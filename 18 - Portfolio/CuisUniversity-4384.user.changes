

----STARTUP---- (1 November 2020 23:34:46) as /Users/celeste/facultad/ing1/si-exercises/CuisUniversity-4384.image!


----End fileIn of /Users/celeste/facultad/ing1/si-exercises/17 - Ternipilli/Ejercicio - TerniLapilli.st----!
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 00:43:43'!
verifyItIsAValidPoint: aPointToCheckRange
	
	^((aPointToCheckRange x between: 1 and: 3) and: [aPointToCheckRange y between: 1 and: 3]) ifFalse: [].

	! !

!methodRemoval: TerniLapilli #verifyItIsAValidPoint:: stamp: 'CR 11/2/2020 00:43:47'!
verifyItIsAValidPoint:: a!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 00:44:38'!
signalPointOutOfRange

	^ self signal: self class errorOutOfRangePosition.! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 00:45:12' prior: 50882317!
verifyItIsAValidPoint: aPointToCheckRange
	
	^((aPointToCheckRange x between: 1 and: 3) and: [aPointToCheckRange y between: 1 and: 3]) ifFalse: [self signalPointOutOfRange].

	! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 00:45:17'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 00:45:17'!
PASSED!

!testRun: #TerniLapilliTest #test03X stamp: 'CR 11/2/2020 00:45:17'!
ERROR!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 00:45:17'!
FAILURE!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 00:45:24' prior: 50882218!
test03X

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 1@1.
	
	self deny: aJustStartedMatch isPlayingX.
	self assert: aJustStartedMatch isPlayingO.
	self deny: aJustStartedMatch isOver.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 00:45:27'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 00:45:27'!
PASSED!

!testRun: #TerniLapilliTest #test03X stamp: 'CR 11/2/2020 00:45:27'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 00:45:27'!
FAILURE!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 00:45:27'!
FAILURE!
!TerniLapilli methodsFor: 'signals' stamp: 'CR 11/2/2020 00:46:26' prior: 50882255!
signalInvalidPlayer

	^ self error: self class errorInvalidPlayer.! !
!TerniLapilli methodsFor: 'signals' stamp: 'CR 11/2/2020 00:46:32' prior: 50882328!
signalPointOutOfRange

	^ self error: self class errorOutOfRangePosition.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 00:46:36'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 00:46:36'!
PASSED!

!testRun: #TerniLapilliTest #test03X stamp: 'CR 11/2/2020 00:46:36'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 00:46:36'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 00:47:02'!
test03XPlaysAndGameChangesTurnToO

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 1@1.
	
	self deny: aJustStartedMatch isPlayingX.
	self assert: aJustStartedMatch isPlayingO.
	self deny: aJustStartedMatch isOver.! !

!methodRemoval: TerniLapilliTest #test03X stamp: 'CR 11/2/2020 00:47:04'!
test03X

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 1@1.
	
	self deny: aJustStartedMatch isPlayingX.
	self assert: aJustStartedMatch isPlayingO.
	self deny: aJustStartedMatch isOver.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 00:47:50'!
test04XPlaysAndGameChangesTurnToO

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 1@1.
	
	self deny: aJustStartedMatch isPlayingX.
	self assert: aJustStartedMatch isPlayingO.
	self deny: aJustStartedMatch isOver.! !

!methodRemoval: TerniLapilliTest #test03XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 00:47:53'!
test03XPlaysAndGameChangesTurnToO

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 1@1.
	
	self deny: aJustStartedMatch isPlayingX.
	self assert: aJustStartedMatch isPlayingO.
	self deny: aJustStartedMatch isOver.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 00:47:58'!
test05verifyPointIsInValidRange

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setXAt: -1@0.] 
	raise: Error   
	withMessageText: TerniLapilli errorOutOfRangePosition.! !

!methodRemoval: TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 00:48:03'!
test03verifyPointIsInValidRange

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setXAt: -1@0.] 
	raise: Error   
	withMessageText: TerniLapilli errorOutOfRangePosition.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 00:48:56'!
test03raisesErrorWhenOStarts

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	self assert: aJustStartedMatch isPlayingX.
	self deny: aJustStartedMatch isPlayingO.
	self deny: aJustStartedMatch isOver.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 00:49:27'!
test07raisesErrorWhenOStarts

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	self assert: aJustStartedMatch isPlayingX.
	self deny: aJustStartedMatch isPlayingO.
	self deny: aJustStartedMatch isOver.! !

!methodRemoval: TerniLapilliTest #test03raisesErrorWhenOStarts stamp: 'CR 11/2/2020 00:49:29'!
test03raisesErrorWhenOStarts

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	self assert: aJustStartedMatch isPlayingX.
	self deny: aJustStartedMatch isPlayingO.
	self deny: aJustStartedMatch isOver.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 00:50:49'!
test06verifyPointIsInValidRange

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setXAt: 1@0.] 
	raise: Error   
	withMessageText: TerniLapilli errorOutOfRangePosition.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 00:51:17'!
test04verifyPointIsInValidRange

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setXAt: -1@0.] 
	raise: Error   
	withMessageText: TerniLapilli errorOutOfRangePosition.! !

!methodRemoval: TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 00:51:20'!
test05verifyPointIsInValidRange

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setXAt: -1@0.] 
	raise: Error   
	withMessageText: TerniLapilli errorOutOfRangePosition.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 00:51:24'!
test05XPlaysAndGameChangesTurnToO

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 1@1.
	
	self deny: aJustStartedMatch isPlayingX.
	self assert: aJustStartedMatch isPlayingO.
	self deny: aJustStartedMatch isOver.! !

!methodRemoval: TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 00:51:26'!
test04XPlaysAndGameChangesTurnToO

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 1@1.
	
	self deny: aJustStartedMatch isPlayingX.
	self assert: aJustStartedMatch isPlayingO.
	self deny: aJustStartedMatch isOver.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 00:53:58' prior: 50882493!
test06verifyPointIsInValidRange

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setXAt: 1@1. aJustStartedMatch setXAt: 2@1.] 
	raise: Error   
	withMessageText: TerniLapilli errorInvalidPlayer.! !

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 00:54:00'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 00:54:57' prior: 50882473!
test07raisesErrorWhenOStarts

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setOAt: 1@1.] 
	raise: Error   
	withMessageText: TerniLapilli errorInvalidPlayer.! !

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 00:55:01'!
FAILURE!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 00:55:01'!
FAILURE!
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 00:55:50'!
setOAt: aPoint 
	self verifyCurrentPlayerO.
	self verifyItIsAValidPoint: aPoint.
	self changeCurrentPlayer.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 00:56:14'!
verifyCurrentPlayer
	isXsTurn ifTrue: [self signalInvalidPlayer]. ! !
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 00:56:18'!
verifyCurrentPlayerO
	isXsTurn ifTrue: [self signalInvalidPlayer]. ! !

!methodRemoval: TerniLapilli #verifyCurrentPlayer stamp: 'CR 11/2/2020 00:56:20'!
verifyCurrentPlayer
	isXsTurn ifTrue: [self signalInvalidPlayer]. !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 00:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 00:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 00:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 00:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 00:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 00:56:23'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 00:57:44' prior: 50882560!
test07raisesErrorWhenOStarts

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setOAt: 1@1.] 
	raise: Error   
	withMessageText: TerniLapilli errorInvalidPlayer.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 00:57:52' prior: 50882616!
test07raisesErrorWhenOStarts

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setOAt: 1@1.] 
	raise: Error   
	withMessageText: TerniLapilli errorInvalidPlayer.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 00:58:32'!
test08

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self assert: aJustStartedMatch isPlayingX.
	self deny: aJustStartedMatch isPlayingO.
	self deny: aJustStartedMatch isOver.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 00:59:06' prior: 50882635!
test08

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 1@1.
	aJustStartedMatch setOAt: 1@2.
	self assert: aJustStartedMatch isPlayingX.
	self deny: aJustStartedMatch isPlayingO.
	self deny: aJustStartedMatch isOver.! !

!testRun: #TerniLapilliTest #test08 stamp: 'CR 11/2/2020 00:59:09'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 00:59:45' prior: 50882645!
test08

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 1@1.
	aJustStartedMatch setOAt: 1@2.
	self assert: aJustStartedMatch isPlayingX.
	self deny: aJustStartedMatch isPlayingO.
	self deny: aJustStartedMatch isOver.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 01:00:07' prior: 50882659!
test08

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 1@1.
	aJustStartedMatch setOAt: 1@1.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 01:05:04'!
test08setYOnAlreadyOccupiedPositionRaisesError

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 1@1.
	
	self should: [aJustStartedMatch setOAt: 1@1.] 
	raise: Error   
	withMessageText: TerniLapilli errorAlreadyOccupiedPosition.! !

!testRun: #TerniLapilliTest #test08 stamp: 'CR 11/2/2020 01:05:17'!
PASSED!

!methodRemoval: TerniLapilliTest #test08 stamp: 'CR 11/2/2020 01:05:20'!
test08

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 1@1.
	aJustStartedMatch setOAt: 1@1.
	!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 01:05:25'!
ERROR!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 01:05:25'!
ERROR!
!TerniLapilli class methodsFor: 'error messages' stamp: 'CR 11/2/2020 01:05:48'!
errorAlreadyOccupiedPosition
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'CR 11/2/2020 01:05:54' prior: 50882705!
errorAlreadyOccupiedPosition
	! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'CR 11/2/2020 01:07:01' prior: 50882710!
errorAlreadyOccupiedPosition
	^ 'This positions is already occupied by another!!'! !

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 01:07:25'!
FAILURE!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 01:07:25'!
FAILURE!

----SNAPSHOT----(2 November 2020 01:07:40) CuisUniversity-4384.image priorSource: 17617025!
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 01:10:46' prior: 50882576!
setOAt: aPoint 
	self verifyCurrentPlayerO.
	self verifyItIsAValidPoint: aPoint.
	self occupyPositionIfPossible: aPoint By: 'X'.
	self changeCurrentPlayer.
! !

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 01:11:02'!
FAILURE!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 01:11:02'!
FAILURE!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 01:11:25'!
PASSED!
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 01:11:39' prior: 50882731!
setOAt: aPoint 
	self verifyCurrentPlayerO.
	self verifyItIsAValidPoint: aPoint.
	self occupyPositionIfPossible: aPoint By: 'O'.
	self changeCurrentPlayer.
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 01:11:46' prior: 50882273!
setXAt: aPoint 
	self verifyCurrentPlayerX.
	self verifyItIsAValidPoint: aPoint.
	self occupyPositionIfPossible: aPoint By: 'X'.
	self changeCurrentPlayer.! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 01:12:09'!
occupyPositionIfPossible: aPosition By: aPlayer
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 01:12:29' prior: 50882766!
occupyPositionIfPossible: aPosition By: aPlayer
	! !

!classDefinition: #TerniLapilli category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 01:13:35'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXsTurn gameBoard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 01:13:34' prior: 50882283!
initializeGame
	isXsTurn := true.
	gameBoard := Dictionary new.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 01:13:44' prior: 50882784!
initializeGame
	isXsTurn := true.
	gameBoard := Dictionary new.
	! !
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 01:14:22' prior: 50882789!
initializeGame
	isXsTurn := true.
	self initializeBoard.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 01:14:29'!
initializeBoard
	gameBoard := Dictionary new.
	! !
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 01:16:01' prior: 50882799!
initializeBoard
	| xPos yPos |
	gameBoard := Dictionary new.
	xPos := 1.
	yPos := 1.
	
	! !

Object subclass: #TLBoardPositions
	instanceVariableNames: 'terniLapilliGame owner row column'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #TLBoardPositions category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 01:17:28'!
Object subclass: #TLBoardPositions
	instanceVariableNames: 'terniLapilliGame owner row column'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 01:18:38' prior: 50882804!
initializeBoard
	| row column |
	gameBoard := Dictionary new.
	row := 1.
	column := 1.
	
	
	! !
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 01:26:17' prior: 50882825!
initializeBoard
	gameBoard := Dictionary new.
	self from: 1 to: 3 do: [ :row |
		self from: 1 to: 3 do: [ :column | |aNewBoardPosition |
			aNewBoardPosition := TLBoardPositions onRow: row onColumn: column.
			gameBoard at: row@column put: aNewBoardPosition. 	
			]
		]
	! !

Object subclass: #TLBoardPositions
	instanceVariableNames: 'terniLapilliGame owner row column'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #TLBoardPositions category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 01:26:37'!
Object subclass: #TLBoardPositions
	instanceVariableNames: 'terniLapilliGame owner row column'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

Object subclass: #TLPosition
	instanceVariableNames: 'terniLapilliGame owner row column'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #TLPosition category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 01:27:05'!
Object subclass: #TLPosition
	instanceVariableNames: 'terniLapilliGame owner row column'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 01:27:21' prior: 50882831!
initializeBoard
	gameBoard := Dictionary new.
	self from: 1 to: 3 do: [ :row |
		self from: 1 to: 3 do: [ :column | |aNewBoardPosition |
			aNewBoardPosition := TLPosition onRow: row onColumn: column.
			gameBoard at: row@column put: aNewBoardPosition. 	
			]
		]
	! !

!classRemoval: #TLBoardPositions stamp: 'CR 11/2/2020 01:27:29'!
Object subclass: #TLBoardPositions
	instanceVariableNames: 'terniLapilliGame owner row column'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!
!TLPosition class methodsFor: 'nil' stamp: 'CR 11/2/2020 01:28:23'!
onRow: row onColumn: column
	^self new initializeWithRow: row andColumn: column.! !
!TLPosition methodsFor: 'nil' stamp: 'CR 11/2/2020 01:29:22'!
initializeWithRow: aRowToSetPosition andColumn: aColumnToSetPosition
	row := aRowToSetPosition.
	column := aColumnToSetPosition.! !

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 01:29:48'!
ERROR!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 01:29:48'!
ERROR!
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 01:30:26' prior: 50882872!
initializeBoard
	gameBoard := Dictionary new.
	self from: 1 to: 3 do: [ :row |
		self from: 1 to: 3 do: [ :column | |aNewBoardPosition |
			aNewBoardPosition := TLPosition onRow: row onColumn: column.
			gameBoard at: row@column put: aNewBoardPosition. 	
			]
		]
	! !

self from: 1 to: 2 do: [2].!

1 from: 1 to: 2 do: [2].!
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 01:31:40' prior: 50882911!
initializeBoard
	gameBoard := Dictionary new.
	1 to: 3 do: [ :row |
		1 to: 3 do: [ :column | |aNewBoardPosition |
			aNewBoardPosition := TLPosition onRow: row onColumn: column.
			gameBoard at: row@column put: aNewBoardPosition. 	
			]
		]
	! !

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 01:31:44'!
FAILURE!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 01:31:44'!
FAILURE!
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 01:34:09' prior: 50882771!
occupyPositionIfPossible: aPosition By: aPlayer
	(gameBoard at: aPosition isOccupied) 
		ifTrue: [self signalPositionAlreadyOccupied]
		ifFalse: [self occupyPosition: aPosition By: aPlayer. 
			]! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 01:34:24' prior: 50882943!
occupyPositionIfPossible: aPosition By: aPlayer
	(gameBoard at: aPosition isOccupied) 
		ifTrue: [self signalPositionAlreadyOccupied]
		ifFalse: [self occupyPosition: aPosition By: aPlayer.]! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 01:34:26' prior: 50882953!
occupyPositionIfPossible: aPosition By: aPlayer
	(gameBoard at: aPosition isOccupied) 
		ifTrue: [self signalPositionAlreadyOccupied]
		ifFalse: [self occupyPosition: aPosition By: aPlayer]! !
!TerniLapilli methodsFor: 'signals' stamp: 'CR 11/2/2020 01:34:39'!
signalPositionAlreadyOccupied

	^ self error: self class errorAlreadyOccupiedPosition.! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 01:36:04'!
occupyPosition: aPosition By: aPlayer
	(gameBoard at: aPosition) setOwnerTo: aPlayer. ! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 01:36:55' prior: 50882977!
occupyPosition: aPosition By: aPlayer

	(gameBoard at: aPosition) setOwnerTo: aPlayer. ! !
!TLPosition methodsFor: 'nil' stamp: 'CR 11/2/2020 01:37:20'!
setOwnerTo: aPlayer
	owner  := aPlayer.! !

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 01:37:24'!
ERROR!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 01:37:24'!
ERROR!
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 01:37:57' prior: 50882962!
occupyPositionIfPossible: aPosition By: aPlayer
	((gameBoard at: aPosition) isOccupied) 
		ifTrue: [self signalPositionAlreadyOccupied]
		ifFalse: [self occupyPosition: aPosition By: aPlayer]! !

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 01:38:02'!
ERROR!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 01:38:02'!
ERROR!
!TLPosition methodsFor: 'accessing' stamp: 'CR 11/2/2020 01:38:15'!
isOccupied
	self shouldBeImplemented.! !
!TLPosition methodsFor: 'accessing' stamp: 'CR 11/2/2020 01:39:22' prior: 50883016!
isOccupied
	(owner = nil ) ifTrue: [^false] ifFalse: [^true].! !

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 01:39:27'!
PASSED!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 01:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 01:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 01:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 01:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 01:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 01:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 01:39:30'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 01:40:52' prior: 50882677!
test08setYOnAlreadyOccupiedPositionRaisesError

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 1@1.
	
	self should: [aJustStartedMatch setOAt: 1@1.] 
	raise: Error   
	withMessageText: TerniLapilli errorAlreadyOccupiedPosition.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 01:45:13'!
test09setPositionToPlayerWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 2@1.
	self assert: (aMatch does: 1@1 BelongToX).
	self assert: (aMatch does: 2@1 BelongToO).! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 01:45:43' prior: 50883062!
test09setPositionToPlayerWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 2@1.
	self assert: (aMatch doesPositionBelongToX: 1@1).
	self assert: (aMatch doesPositionBelongToO: 2@1).! !

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 01:45:48'!
ERROR!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 01:45:48'!
ERROR!
!TerniLapilli methodsFor: 'accessing' stamp: 'CR 11/2/2020 01:45:58'!
doesPositionBelongToX: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'accessing' stamp: 'CR 11/2/2020 01:46:29' prior: 50883089!
doesPositionBelongToX: aPoint 
	^ (self doesPositionBelongToO: aPoint) not. ! !

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 01:46:34'!
ERROR!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 01:46:34'!
ERROR!
!TerniLapilli methodsFor: 'accessing' stamp: 'CR 11/2/2020 01:46:41'!
doesPositionBelongToO: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'accessing' stamp: 'CR 11/2/2020 01:47:11' prior: 50883106!
doesPositionBelongToO: aPoint 
	^ (gameBoard at: aPoint) isOwnerO.! !

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 01:47:17'!
ERROR!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 01:47:17'!
ERROR!
!TLPosition methodsFor: 'accessing' stamp: 'CR 11/2/2020 01:47:26'!
isOwnerO
	self shouldBeImplemented.! !
!TLPosition methodsFor: 'accessing' stamp: 'CR 11/2/2020 01:47:43' prior: 50883123!
isOwnerO
	^owner = 'O'.! !
!TLPosition methodsFor: 'accessing' stamp: 'CR 11/2/2020 01:47:57' prior: 50883127!
isOwnerO
	^owner = 'O'.! !

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 01:48:01'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 01:50:03'!
test010

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 2@1.
	aMatch setXAt: 1@1.
	aMatch setOAt: 2@1.
	self assert: (aMatch doesPositionBelongToX: 1@1).
	self assert: (aMatch doesPositionBelongToO: 2@1).! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 01:50:09'!
test10

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 2@1.
	aMatch setXAt: 1@1.
	aMatch setOAt: 2@1.
	self assert: (aMatch doesPositionBelongToX: 1@1).
	self assert: (aMatch doesPositionBelongToO: 2@1).! !

!methodRemoval: TerniLapilliTest #test010 stamp: 'CR 11/2/2020 01:50:12'!
test010

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 2@1.
	aMatch setXAt: 1@1.
	aMatch setOAt: 2@1.
	self assert: (aMatch doesPositionBelongToX: 1@1).
	self assert: (aMatch doesPositionBelongToO: 2@1).!

!testRun: #TerniLapilliTest #test10 stamp: 'CR 11/2/2020 01:50:29'!
ERROR!

!testRun: #TerniLapilliTest #test10 stamp: 'CR 11/2/2020 01:50:29'!
ERROR!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 01:51:46' prior: 50883148!
test10

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 1@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 3@3.
	self assert: (aMatch doesPositionBelongToX: 1@1).
	self assert: (aMatch doesPositionBelongToO: 2@1).! !

!testRun: #TerniLapilliTest #test10 stamp: 'CR 11/2/2020 01:51:48'!
FAILURE!

!testRun: #TerniLapilliTest #test10 stamp: 'CR 11/2/2020 01:51:48'!
FAILURE!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 01:52:04' prior: 50883173!
test10

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 1@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 3@3.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 01:52:18' prior: 50883190!
test10

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 1@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 3@3.
	! !

----SNAPSHOT----(2 November 2020 01:52:52) CuisUniversity-4384.image priorSource: 17634464!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 01:53:07' prior: 50883072!
test09setPositionToPlayerWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 2@1.
	self assert: (aMatch doesPositionBelongToX: 1@1).
	self assert: (aMatch doesPositionBelongToO: 2@1).
	self deny: aMatch isOver.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 01:55:20' prior: 50883199!
test10

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 1@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 3@3.
	self deny: aMatch isOver.
	aMatch setXAt: 2@3.

	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 01:58:03' prior: 50883222!
test10

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 1@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 3@3.
	self deny: aMatch isOver.
	self should: [aMatch setXAt: 2@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorCantAddMoreThanThreeGamePieces.

	
	! !

!testRun: #TerniLapilliTest #test10 stamp: 'CR 11/2/2020 01:58:38'!
ERROR!

!testRun: #TerniLapilliTest #test10 stamp: 'CR 11/2/2020 01:58:38'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 01:58:52'!
errorCantAddMoreThanThreeGamePieces
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 01:59:41' prior: 50883251!
errorCantAddMoreThanThreeGamePieces
	^ 'Error!! Cant add more than more than 3 game pieces by a single player'! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 01:59:47' prior: 50883257!
errorCantAddMoreThanThreeGamePieces
	^ 'Error!! Cant add more than more than 3 game pieces per player'! !
!TerniLapilli methodsFor: 'signals' stamp: 'CR 11/2/2020 02:00:29'!
signalCantAddMoreThanThreeGamePieces

	^ self error: self class errorCantAddMoreThanThreeGamePieces.! !

!testRun: #TerniLapilliTest #test10 stamp: 'CR 11/2/2020 02:00:36'!
FAILURE!

!testRun: #TerniLapilliTest #test10 stamp: 'CR 11/2/2020 02:00:36'!
FAILURE!
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 02:02:53' prior: 50882758!
setXAt: aPoint 
	self verifyNotAllPiecesInTheGame.
	self verifyCurrentPlayerX.
	self verifyItIsAValidPoint: aPoint.
	self occupyPositionIfPossible: aPoint By: 'X'.
	self changeCurrentPlayer.! !

!classDefinition: #TerniLapilli category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 02:04:01'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXsTurn gameBoard piecesInTheGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 02:03:59'!
verifyNotAllPiecesInTheGame
	piecesInTheGame := piecesInTheGame + 1.! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 02:04:52' prior: 50883299!
verifyNotAllPiecesInTheGame
	(piecesInTheGame < 6) ifFalse: [self signalCantAddMoreThanSixGamePieces].! !
!TerniLapilli methodsFor: 'signals' stamp: 'CR 11/2/2020 02:05:00'!
signalCantAddMoreThanSixGamePieces

	^ self error: self class errorCantAddMoreThanThreeGamePieces.! !

!methodRemoval: TerniLapilli #signalCantAddMoreThanThreeGamePieces stamp: 'CR 11/2/2020 02:05:02'!
signalCantAddMoreThanThreeGamePieces

	^ self error: self class errorCantAddMoreThanThreeGamePieces.!
!TerniLapilli class methodsFor: 'error messages' stamp: 'CR 11/2/2020 02:05:12'!
errorCantAddMoreThanSixGamePieces
	^ 'Error!! Cant add more than more than 6 game pieces per player'! !

!methodRemoval: TerniLapilli class #errorCantAddMoreThanThreeGamePieces stamp: 'CR 11/2/2020 02:05:17'!
errorCantAddMoreThanThreeGamePieces
	^ 'Error!! Cant add more than more than 3 game pieces per player'!
!TerniLapilli methodsFor: 'signals' stamp: 'CR 11/2/2020 02:05:22' prior: 50883311!
signalCantAddMoreThanSixGamePieces

	^ self error: self class errorCantAddMoreThanSixGamePieces.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 02:05:30' prior: 50883233!
test10

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 1@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 3@3.
	self deny: aMatch isOver.
	self should: [aMatch setXAt: 2@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorCantAddMoreThanSixGamePieces.

	
	! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'CR 11/2/2020 02:05:38' prior: 50883324!
errorCantAddMoreThanSixGamePieces
	^ 'Error!! Cant add more than more than 6 game pieces'! !

!testRun: #TerniLapilliTest #test10 stamp: 'CR 11/2/2020 02:05:53'!
ERROR!

!testRun: #TerniLapilliTest #test10 stamp: 'CR 11/2/2020 02:05:53'!
ERROR!
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 02:06:25' prior: 50882794!
initializeGame
	isXsTurn := true.
	piecesInTheGame := 0.
	self initializeBoard.! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 02:06:41' prior: 50882983!
occupyPosition: aPosition By: aPlayer

	(gameBoard at: aPosition) setOwnerTo: aPlayer. 
	piecesInTheGame := piecesInTheGame + 1.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 02:06:45'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 02:06:45'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 02:06:45'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 02:06:45'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 02:06:45'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 02:06:45'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 02:06:45'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 02:06:45'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'CR 11/2/2020 02:06:45'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 02:07:00'!
test10cantAddMoreThanSixGamePieces

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 1@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 3@3.
	self deny: aMatch isOver.
	self should: [aMatch setXAt: 2@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorCantAddMoreThanSixGamePieces.

	
	! !

!methodRemoval: TerniLapilliTest #test10 stamp: 'CR 11/2/2020 02:07:20'!
test10

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 1@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 3@3.
	self deny: aMatch isOver.
	self should: [aMatch setXAt: 2@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorCantAddMoreThanSixGamePieces.

	
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 02:19:44' prior: 50883409!
test10cantAddMoreThanSixGamePieces

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 1@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 3@3.
	self deny: aMatch isOver.
	self should: [aMatch setXAt: 2@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorCantAddMoreThanSixGamePieces.

	
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 02:26:49' prior: 50882587!
verifyCurrentPlayerO
	isXsTurn ifTrue: [self signalInvalidPlayer]. ! !

Object subclass: #TLPositionOwner
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #TLPositionOwner category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 02:39:34'!
Object subclass: #TLPositionOwner
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

TLPositionOwner subclass: #X
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #X category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 02:39:50'!
TLPositionOwner subclass: #X
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

TLPositionOwner subclass: #O
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #O category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 02:39:52'!
TLPositionOwner subclass: #O
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

TLPositionOwner subclass: #Nobody
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #Nobody category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 02:39:57'!
TLPositionOwner subclass: #Nobody
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!
!TLPosition methodsFor: 'accessing' stamp: 'CR 11/2/2020 02:40:23' prior: 50883131!
isOwnerO
	^owner isOwnerO.! !
!TLPositionOwner methodsFor: 'nil' stamp: 'CR 11/2/2020 02:40:38'!
IsOwnerO
	self subclassResponsibility.! !
!TLPositionOwner methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 02:40:48'!
isOwnerO
	self subclassResponsibility.! !

!methodRemoval: TLPositionOwner #IsOwnerO stamp: 'CR 11/2/2020 02:40:50'!
IsOwnerO
	self subclassResponsibility.!
!Nobody methodsFor: 'nil' stamp: 'CR 11/2/2020 02:41:11'!
isO
	! !
!TLPositionOwner methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 02:41:17'!
isO
	self subclassResponsibility.! !

!methodRemoval: TLPositionOwner #isOwnerO stamp: 'CR 11/2/2020 02:41:22'!
isOwnerO
	self subclassResponsibility.!
!TLPosition methodsFor: 'accessing' stamp: 'CR 11/2/2020 02:41:30' prior: 50883503!
isOwnerO
	^owner isO.! !
!O methodsFor: 'nil' stamp: 'CR 11/2/2020 02:41:40' overrides: 50883521!
isO
	^true.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 02:41:57'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 02:41:57'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 02:41:57'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 02:41:57'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 02:41:57'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 02:41:57'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 02:41:57'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 02:41:57'!
ERROR!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 02:41:57'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 02:41:57'!
ERROR!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 02:48:27'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 02:48:27'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 02:48:27'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 02:48:27'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 02:48:27'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 02:48:27'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 02:48:27'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 02:48:27'!
ERROR!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 02:48:27'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 02:48:27'!
ERROR!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 02:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 02:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 02:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 02:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 02:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 02:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 02:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 02:48:38'!
ERROR!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 02:48:38'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 02:48:38'!
ERROR!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 02:49:05'!
ERROR!
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 02:50:15' prior: 50883281!
setXAt: aPoint 
	self verifyNotAllPiecesInTheGame.
	self verifyCurrentPlayerX.
	self verifyItIsAValidPoint: aPoint.
	self occupyPositionIfPossible: aPoint By: XPlayer.
	self changeCurrentPlayer.! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'isXsTurn gameBoard piecesInTheGame XPlayer YPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #TerniLapilli category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 02:50:31'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXsTurn gameBoard piecesInTheGame XPlayer YPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 02:50:58' prior: 50882269!
isPlayingX
	^ isXsTurn.! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 02:51:14' prior: 50882750!
setOAt: aPoint 
	self verifyCurrentPlayerO.
	self verifyItIsAValidPoint: aPoint.
	self occupyPositionIfPossible: aPoint By: OPlayer.
	self changeCurrentPlayer.
! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'isXsTurn gameBoard piecesInTheGame XPlayer OPlayer'
	classVariableNames: 'OPlayer'
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #TerniLapilli category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 02:51:21'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXsTurn gameBoard piecesInTheGame XPlayer OPlayer'
	classVariableNames: 'OPlayer'
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

Object subclass: #TerniLapilli
	instanceVariableNames: 'isXsTurn gameBoard piecesInTheGame XPlayer OPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #TerniLapilli category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 02:51:22'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'isXsTurn gameBoard piecesInTheGame XPlayer OPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!
!Nobody methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 02:52:56' prior: 50883518 overrides: 50883521!
isO
	^false.! !

!methodRemoval: TLPositionOwner #isO stamp: 'CR 11/2/2020 02:53:14'!
isO
	self subclassResponsibility.!

!methodRemoval: Nobody #isO stamp: 'CR 11/2/2020 02:53:21'!
isO
	^false.!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 02:53:34'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 02:53:34'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 02:53:34'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 02:53:34'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 02:53:34'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 02:53:34'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 02:53:34'!
FAILURE!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 02:53:34'!
ERROR!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 02:53:34'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 02:53:45'!
ERROR!
!TLPosition methodsFor: 'accessing' stamp: 'CR 11/2/2020 02:54:58' prior: 50883020!
isOccupied
	owner isOccupied.
	(owner = nil ) ifTrue: [^false] ifFalse: [^true].! !
!TLPosition methodsFor: 'accessing' stamp: 'CR 11/2/2020 02:55:04' prior: 50883748!
isOccupied
	owner isOccupied.! !
!TLPosition methodsFor: 'accessing' stamp: 'CR 11/2/2020 02:55:08' prior: 50883754!
isOccupied
	^owner isOccupied.! !
!TLPositionOwner methodsFor: 'nil' stamp: 'CR 11/2/2020 02:55:20'!
isOccupied
	self subclassResponsibility ! !
!Nobody methodsFor: 'nil' stamp: 'CR 11/2/2020 02:55:32' overrides: 50883762!
isOccupied
	^false.! !
!O methodsFor: 'nil' stamp: 'CR 11/2/2020 02:55:38' overrides: 50883762!
isOccupied
	^true.! !
!X methodsFor: 'nil' stamp: 'CR 11/2/2020 02:55:43' overrides: 50883762!
isOccupied
	^true.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 02:55:51'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 02:55:51'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 02:55:51'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 02:55:51'!
ERROR!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 02:55:51'!
FAILURE!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 02:55:51'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 02:55:51'!
ERROR!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 02:55:51'!
ERROR!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 02:55:51'!
ERROR!
!TLPosition methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 02:56:55' prior: 50882896!
initializeWithRow: aRowToSetPosition andColumn: aColumnToSetPosition
	row := aRowToSetPosition.
	column := aColumnToSetPosition.
	owner := Nobody new.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 02:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 02:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 02:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 02:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 02:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 02:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 02:58:56'!
FAILURE!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 02:58:56'!
ERROR!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 02:58:56'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 02:58:59'!
ERROR!

(gameBoard at: aPoint)!
!Nobody methodsFor: 'nil' stamp: 'CR 11/2/2020 02:59:42'!
isO
	^false.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 02:59:48'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 02:59:48'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 02:59:48'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 02:59:48'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 02:59:48'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 02:59:48'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 02:59:48'!
FAILURE!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 02:59:48'!
ERROR!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 02:59:48'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 02:59:55'!
ERROR!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 03:00:13'!
ERROR!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 03:01:26'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 03:01:26'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 03:01:26'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 03:01:26'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 03:01:26'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 03:01:26'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 03:01:26'!
FAILURE!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 03:01:26'!
ERROR!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 03:01:26'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 03:01:29'!
ERROR!

owner!

(gameBoard at: aPoint)!
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 03:06:24' prior: 50882925!
initializeBoard
	gameBoard := Dictionary new.
	1 to: 3 do: [ :row |
		1 to: 3 do: [ :column |
			gameBoard at: row@column put: (TLPosition onRow: row onColumn: column). 	
			]
		]
	! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 03:06:27'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 03:06:27'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 03:06:27'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 03:06:27'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 03:06:27'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 03:06:27'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 03:06:27'!
FAILURE!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 03:06:27'!
ERROR!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 03:06:27'!
PASSED!

gameBoard := Dictionary new.!

gameBoard at: 0@7 put: (TLPosition onRow: 0 onColumn: 7).!

gameBoard at: 0@7.!

gameBoard at: 0@7.!

gameBoard at: 0@7.!

pipi := gameBoard at: 0@7.!

pipi isOwnerO !
!X methodsFor: 'nil' stamp: 'CR 11/2/2020 03:09:03'!
isO
	^false.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 03:09:11'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 03:09:11'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 03:09:11'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 03:09:11'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 03:09:11'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 03:09:11'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 03:09:11'!
FAILURE!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 03:09:11'!
ERROR!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 03:09:11'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 03:09:56' prior: 50883211!
test09setPositionToPlayerWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	"aMatch setOAt: 2@1."
	self assert: (aMatch doesPositionBelongToX: 1@1).
	"self assert: (aMatch doesPositionBelongToO: 2@1)."
	self deny: aMatch isOver.! !

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 03:09:59'!
ERROR!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 03:09:59'!
ERROR!

aMatch!

gameBoard at: 1@1!
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 03:17:14' prior: 50883368!
initializeGame
	isXsTurn := true.
	piecesInTheGame := 0.
	XPlayer := X new.
	OPlayer := O new.
	self initializeBoard.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 03:17:22'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 03:17:22'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 03:17:22'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 03:17:22'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 03:17:22'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 03:17:22'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 03:17:22'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 03:17:22'!
PASSED!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 03:17:22'!
PASSED!
!TLPositionOwner methodsFor: 'nil' stamp: 'CR 11/2/2020 03:17:49'!
isO
	self subclassResponsibility! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 03:19:16' prior: 50883000!
occupyPositionIfPossible: aPosition By: aPlayer
	(gameBoard at: aPosition) failIfOccupied.
	((gameBoard at: aPosition) isOccupied) 
		ifTrue: [self signalPositionAlreadyOccupied]
		ifFalse: [self occupyPosition: aPosition By: aPlayer]! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 03:19:30' prior: 50884052!
occupyPositionIfPossible: aPosition By: aPlayer
	(gameBoard at: aPosition) failIfOccupied.
	((gameBoard at: aPosition) isOccupied) 
		ifTrue: [self signalPositionAlreadyOccupied]
		ifFalse: [self occupyPosition: aPosition By: aPlayer]! !
!TLPosition methodsFor: 'nil' stamp: 'CR 11/2/2020 03:19:40'!
failIfOccupied
	! !
!TLPosition methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 03:20:38' prior: 50884073!
failIfOccupied
	^owner ifOwnerIsSomeoneThenFail.! !
!TLPosition methodsFor: 'accessing' stamp: 'CR 11/2/2020 03:22:32'!
ItsOwnerIsO
	^owner isO.! !

!methodRemoval: TLPosition #isOwnerO stamp: 'CR 11/2/2020 03:22:36'!
isOwnerO
	^owner isO.!
!TerniLapilli methodsFor: 'accessing' stamp: 'CR 11/2/2020 03:22:46' prior: 50883111!
doesPositionBelongToO: aPoint 
	^ (gameBoard at: aPoint) ItsOwnerIsO.! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 03:23:27' prior: 50883666!
setOAt: aPoint 
	self verifyNotAllPiecesInTheGame.
	self verifyCurrentPlayerO.
	self verifyItIsAValidPoint: aPoint.
	self occupyPositionIfPossible: aPoint By: OPlayer.
	self changeCurrentPlayer.
! !
!TLPositionOwner methodsFor: 'nil' stamp: 'CR 11/2/2020 03:24:39'!
ifOwnerIsSomeoneThenFail
	self subclassResponsibility ! !
!Nobody methodsFor: 'nil' stamp: 'CR 11/2/2020 03:26:05' overrides: 50884103!
ifOwnerIsSomeoneThenFail! !
!O methodsFor: 'nil' stamp: 'CR 11/2/2020 03:26:26' overrides: 50884103!
ifOwnerIsSomeoneThenFail
	TerniLapilli signalPositionAlreadyOccupied.! !
!X methodsFor: 'nil' stamp: 'CR 11/2/2020 03:26:31' overrides: 50884103!
ifOwnerIsSomeoneThenFail
	TerniLapilli signalPositionAlreadyOccupied.! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 03:27:11' prior: 50884063!
occupyPositionIfPossible: aPosition By: aPlayer
	(gameBoard at: aPosition) failIfOccupied.
	self occupyPosition: aPosition By: aPlayer.! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 03:27:38' prior: 50883374!
occupyPosition: aPosition By: aPlayer
	(gameBoard at: aPosition) setOwnerTo: aPlayer. 
	piecesInTheGame := piecesInTheGame + 1.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 03:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 03:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 03:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 03:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 03:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 03:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 03:27:42'!
FAILURE!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 03:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 03:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 03:27:42'!
FAILURE!

Object subclass: #TLPositionOwner
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #TLPositionOwner category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 03:29:31'!
Object subclass: #TLPositionOwner
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

Object subclass: #TLPlayer
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #TLPlayer category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 03:31:46'!
Object subclass: #TLPlayer
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

TLPlayer subclass: #Nobody
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #Nobody category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 03:31:56'!
TLPlayer subclass: #Nobody
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

TLPlayer subclass: #O
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #O category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 03:32:01'!
TLPlayer subclass: #O
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

TLPlayer subclass: #X
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #X category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 03:32:07'!
TLPlayer subclass: #X
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classRemoval: #TLPositionOwner stamp: 'CR 11/2/2020 03:32:14'!
Object subclass: #TLPositionOwner
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!
!TLPosition methodsFor: 'accessing' stamp: 'CR 11/2/2020 03:32:55' prior: 50883758!
isOccupied
	^owner isntNobody.! !
!TLPosition methodsFor: 'accessing' stamp: 'CR 11/2/2020 03:33:08' prior: 50884238!
isOccupied
	^owner isSomebody.! !
!X methodsFor: 'accessing' stamp: 'CR 11/2/2020 03:33:20'!
isSomebody
	^true.! !

!methodRemoval: X #isOccupied stamp: 'CR 11/2/2020 03:33:22'!
isOccupied
	^true.!
!O methodsFor: 'accessing' stamp: 'CR 11/2/2020 03:33:27'!
isSomebody
	^true.! !

!methodRemoval: O #isOccupied stamp: 'CR 11/2/2020 03:33:29'!
isOccupied
	^true.!
!Nobody methodsFor: 'accessing' stamp: 'CR 11/2/2020 03:33:38'!
isSomebody
	^false.! !

!methodRemoval: Nobody #isOccupied stamp: 'CR 11/2/2020 03:33:40'!
isOccupied
	^false.!
!TLPosition methodsFor: 'accessing' stamp: 'CR 11/2/2020 03:34:01' prior: 50884242!
isOccupied
	^owner isSomebody.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 03:35:37' prior: 50884013!
initializeGame
	isXsTurn := true.
	piecesInTheGame := 0.
	XPlayer := X ofGame: self.
	OPlayer := O ofGame: self.
	self initializeBoard.! !
!TLPosition methodsFor: 'initialization' stamp: 'CR 11/2/2020 03:36:45' prior: 50883805!
initializeWithRow: aRowToSetPosition andColumn: aColumnToSetPosition
	row := aRowToSetPosition.
	column := aColumnToSetPosition.
	owner := Nobody ofGame: terniLapilliGame.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 03:37:42' prior: 50883918!
initializeBoard
	gameBoard := Dictionary new.
	1 to: 3 do: [ :row |
		1 to: 3 do: [ :column |
			gameBoard at: row@column put: (TLPosition onRow: row onColumn: column ofGame: self). 	
			]
		]
	! !
!TLPosition methodsFor: 'initialization' stamp: 'CR 11/2/2020 03:38:21'!
initializeWithRow: aRowToSetPosition andColumn: aColumnToSetPosition ofGame: aTLGameToBeAttachedTo
	row := aRowToSetPosition.
	column := aColumnToSetPosition.
	terniLapilliGame := aTLGameToBeAttachedTo.
	owner := Nobody ofGame: terniLapilliGame.! !
!TLPlayer class methodsFor: 'nil' stamp: 'CR 11/2/2020 03:38:53'!
ofGame: aTLGameToBeAttachedTo
	^self new initializeWithGame: aTLGameToBeAttachedTo.! !
!TLPlayer methodsFor: 'nil' stamp: 'CR 11/2/2020 03:39:14'!
initializeWithGame: aTLGameToBeAttachedTo

	terniLapilliGame := aTLGameToBeAttachedTo.! !
!O methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 03:39:45' prior: 50884112!
ifOwnerIsSomeoneThenFail
	terniLapilliGame signalPositionAlreadyOccupied.! !
!X methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 03:39:52' prior: 50884117!
ifOwnerIsSomeoneThenFail
	terniLapilliGame signalPositionAlreadyOccupied.! !
!TLPosition methodsFor: 'owner interface' stamp: 'CR 11/2/2020 03:40:45' prior: 50884077!
failIfOccupied
	^owner ifItsSomebodyThenFail.! !
!Nobody methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 03:41:03'!
ifItsSomebodyThenFail! !
!O methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 03:41:09'!
ifItsSomebodyThenFail
	terniLapilliGame signalPositionAlreadyOccupied.! !
!X methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 03:41:18'!
ifItsSomebodyThenFail
	terniLapilliGame signalPositionAlreadyOccupied.! !
!TLPosition methodsFor: 'owner interface' stamp: 'CR 11/2/2020 03:41:28' prior: 50884327!
failIfOccupied
	^owner ifItsSomebodyThenFail: self.! !
!Nobody methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 03:42:38'!
ifItsSomebodyThenFail: aPositionToBeOwnedByMe
	aPositionToBeOwnedByMe alreadyOccupied.! !

!methodRemoval: Nobody #ifItsSomebodyThenFail stamp: 'CR 11/2/2020 03:42:48'!
ifItsSomebodyThenFail!
!Nobody methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 03:43:26' prior: 50884350!
ifItsSomebodyThenFail: aPositionOwnedByMe
	aPositionOwnedByMe alreadyOccupied.! !
!Nobody methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 03:43:43' prior: 50884359!
ifItsSomebodyThenFail: aPositionOwnedByMe
	aPositionOwnedByMe failBecauseItsAlreadyOccupied.! !

!methodRemoval: Nobody #ifOwnerIsSomeoneThenFail stamp: 'CR 11/2/2020 03:43:51'!
ifOwnerIsSomeoneThenFail!
!O methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 03:44:01'!
ifItsSomebodyThenFail: aPositionOwnedByMe
	aPositionOwnedByMe failBecauseItsAlreadyOccupied.! !

!methodRemoval: O #ifItsSomebodyThenFail stamp: 'CR 11/2/2020 03:44:03'!
ifItsSomebodyThenFail
	terniLapilliGame signalPositionAlreadyOccupied.!

!methodRemoval: O #ifOwnerIsSomeoneThenFail stamp: 'CR 11/2/2020 03:44:04'!
ifOwnerIsSomeoneThenFail
	terniLapilliGame signalPositionAlreadyOccupied.!
!X methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 03:44:11'!
ifItsSomebodyThenFail: aPositionOwnedByMe
	aPositionOwnedByMe failBecauseItsAlreadyOccupied.! !

!methodRemoval: X #ifItsSomebodyThenFail stamp: 'CR 11/2/2020 03:44:14'!
ifItsSomebodyThenFail
	terniLapilliGame signalPositionAlreadyOccupied.!

!methodRemoval: X #ifOwnerIsSomeoneThenFail stamp: 'CR 11/2/2020 03:44:15'!
ifOwnerIsSomeoneThenFail
	terniLapilliGame signalPositionAlreadyOccupied.!
!Nobody methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 03:44:22' prior: 50884365!
ifItsSomebodyThenFail: aPositionOwnedByMe! !
!TLPosition methodsFor: 'owner interface' stamp: 'CR 11/2/2020 03:44:38'!
failBecauseItsAlreadyOccupied
	! !
!TLPosition methodsFor: 'owner interface' stamp: 'CR 11/2/2020 03:45:00' prior: 50884409!
failBecauseItsAlreadyOccupied
	terniLapilliGame signalPositionAlreadyOccupied. ! !
!TLPlayer methodsFor: 'nil' stamp: 'CR 11/2/2020 03:45:27'!
isO
	self subclassResponsibility ! !
!TLPlayer methodsFor: 'nil' stamp: 'CR 11/2/2020 03:45:47'!
ifItsSomebodyThenFail: aPositionOwnedByMe
	self subclassResponsibility ! !
!TLPlayer methodsFor: 'nil' stamp: 'CR 11/2/2020 03:46:07'!
isSomebody
	self subclassResponsibility ! !
!TLPosition methodsFor: 'accessing' stamp: 'CR 11/2/2020 03:46:59'!
itsOwnerIsO
	^owner isO.! !

!methodRemoval: TLPosition #ItsOwnerIsO stamp: 'CR 11/2/2020 03:47:02'!
ItsOwnerIsO
	^owner isO.!
!TerniLapilli methodsFor: 'accessing' stamp: 'CR 11/2/2020 03:47:05' prior: 50884088!
doesPositionBelongToO: aPoint 
	^ (gameBoard at: aPoint) itsOwnerIsO.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 03:48:35'!
ERROR!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 03:48:35'!
ERROR!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 03:48:35'!
ERROR!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 03:48:35'!
ERROR!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 03:48:35'!
ERROR!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 03:48:35'!
ERROR!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 03:48:35'!
ERROR!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 03:48:35'!
ERROR!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 03:48:35'!
ERROR!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 03:48:40'!
ERROR!
!TLPosition class methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 03:49:19'!
onRow: row onColumn: column ofGame: aTLGameToBeAttachedTo
	^self new initializeWithRow: row andColumn: column ofGame: aTLGameToBeAttachedTo.! !

!methodRemoval: TLPosition class #onRow:onColumn: stamp: 'CR 11/2/2020 03:49:22'!
onRow: row onColumn: column
	^self new initializeWithRow: row andColumn: column.!

!methodRemoval: TLPosition #initializeWithRow:andColumn: stamp: 'CR 11/2/2020 03:49:31'!
initializeWithRow: aRowToSetPosition andColumn: aColumnToSetPosition
	row := aRowToSetPosition.
	column := aColumnToSetPosition.
	owner := Nobody ofGame: terniLapilliGame.!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 03:49:45'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 03:49:45'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 03:49:45'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 03:49:45'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 03:49:45'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 03:49:45'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 03:49:45'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 03:49:45'!
PASSED!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 03:49:45'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 03:50:32' prior: 50883450!
verifyCurrentPlayerO
	isXsTurn ifTrue: [self signalInvalidPlayer]. ! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer gameBoard piecesInTheGame XPlayer OPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #TerniLapilli category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 03:50:58'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer gameBoard piecesInTheGame XPlayer OPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 03:51:55' prior: 50882287!
changeCurrentPlayer
	currentPlayer changePlayer.! !
!O methodsFor: 'nil' stamp: 'CR 11/2/2020 03:52:44'!
changePlayer
	terniLapilliGame changeTurnToX.! !
!X methodsFor: 'nil' stamp: 'CR 11/2/2020 03:52:54'!
changePlayer
	terniLapilliGame changeTurnToO.! !
!TerniLapilli methodsFor: 'nil' stamp: 'CR 11/2/2020 03:53:17'!
changeTurnToX
	currentPlayer := XPlayer.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 03:53:26'!
changeTurnToO
	currentPlayer := OPlayer.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 03:58:14' prior: 50882260!
verifyCurrentPlayerX
	currentPlayer checkAndPlayOnXsTurn.! !
!X methodsFor: 'nil' stamp: 'CR 11/2/2020 03:58:25'!
checkAndPlayOnXsTurn! !
!O methodsFor: 'nil' stamp: 'CR 11/2/2020 03:59:04'!
checkAndPlayOnXsTurn
	terniLapilliGame fail! !
!O methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 03:59:30' prior: 50884573!
checkAndPlayOnXsTurn
	terniLapilliGame failBecauseItsNotMyTurn.! !
!O methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 03:59:42'!
checkAndPlayOnYsTurn! !
!X methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 03:59:57'!
checkAndPlayOnYsTurn
	terniLapilliGame failBecauseItsNotMyTurn.! !
!TerniLapilli methodsFor: 'nil' stamp: 'CR 11/2/2020 04:00:15'!
failBecauseItsNotMyTurn
	self signalInvalidPlayer.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 04:00:55'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 04:00:55'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:00:55'!
FAILURE!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 04:00:55'!
ERROR!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:00:55'!
FAILURE!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 04:00:55'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 04:00:55'!
ERROR!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 04:00:55'!
ERROR!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 04:00:55'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 04:01:40' prior: 50884525!
verifyCurrentPlayerO
	currentPlayer checkAndPlayOnOsTurn.! !
!O methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:01:49'!
checkAndPlayOnOsTurn! !

!methodRemoval: O #checkAndPlayOnYsTurn stamp: 'CR 11/2/2020 04:01:52'!
checkAndPlayOnYsTurn!
!X methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:01:57'!
checkAndPlayOnOsTurn
	terniLapilliGame failBecauseItsNotMyTurn.! !

!methodRemoval: X #checkAndPlayOnYsTurn stamp: 'CR 11/2/2020 04:02:00'!
checkAndPlayOnYsTurn
	terniLapilliGame failBecauseItsNotMyTurn.!
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 04:02:33' prior: 50884268!
initializeGame
	piecesInTheGame := 0.
	XPlayer := X ofGame: self.
	OPlayer := O ofGame: self.
	currentPlayer := XPlayer.
	self initializeBoard.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 04:02:38'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 04:02:38'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:02:38'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 04:02:38'!
FAILURE!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:02:38'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 04:02:38'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 04:02:38'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 04:02:38'!
PASSED!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 04:02:38'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 04:02:38'!
FAILURE!

aJustStartedMatch isPlayingX!
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 04:05:09' prior: 50883662!
isPlayingX
	^ currentPlayer isX.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 04:05:28' prior: 50882265!
isPlayingO
	^ currentPlayer isO.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 04:05:44' prior: 50884687!
isPlayingX
	^ self isPlayingO not.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 04:05:59'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 04:05:59'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:05:59'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 04:05:59'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:05:59'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 04:05:59'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 04:05:59'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 04:05:59'!
PASSED!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 04:05:59'!
PASSED!
!TLPosition methodsFor: 'owner interface' stamp: 'CR 11/2/2020 04:07:36' prior: 50882988!
setOwnerTo: aPlayerToBeAttachedTo
	owner  := aPlayerToBeAttachedTo.! !
!TLPosition methodsFor: 'initialization' stamp: 'CR 11/2/2020 04:08:13' prior: 50884294!
initializeWithRow: aTLPositionRow andColumn: aTLPositionColumn ofGame: aTLGameToBeAttachedTo
	row := aTLPositionRow.
	column := aTLPositionColumn.
	terniLapilliGame := aTLGameToBeAttachedTo.
	owner := Nobody ofGame: terniLapilliGame.! !

----SNAPSHOT----(2 November 2020 04:10:20) CuisUniversity-4384.image priorSource: 17649815!

Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer gameBoard piecesInTheGame XPlayer OPlayer gameOver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #TerniLapilli category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 04:12:47'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer gameBoard piecesInTheGame XPlayer OPlayer gameOver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 04:13:00' prior: 50884646!
initializeGame
	piecesInTheGame := 0.
	XPlayer := X ofGame: self.
	OPlayer := O ofGame: self.
	currentPlayer := XPlayer.
	gameOver := false.
	self initializeBoard.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 04:13:10' prior: 50882251!
isOver
	^ gameOver.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 04:13:13'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 04:13:13'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:13:13'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 04:13:13'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:13:13'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 04:13:13'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 04:13:13'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 04:13:13'!
PASSED!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 04:13:13'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 04:13:43'!
test11horizontalWinningWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 1@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 3@3.
	self deny: aMatch isOver.
	self should: [aMatch setXAt: 2@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorCantAddMoreThanSixGamePieces.

	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 04:14:48' prior: 50884803!
test11horizontalWinningWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 3@3.
	self deny: aMatch isOver.
	self should: [aMatch setXAt: 2@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorCantAddMoreThanSixGamePieces.

	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 04:16:10' prior: 50884818!
test11horizontalWinningWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 2@2.
	aMatch setXAt: 1@2.
	self assert: aMatch isOver.
	! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 04:18:39' prior: 50884094!
setOAt: aPoint 
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyNotAllPiecesInTheGame.
			self verifyCurrentPlayerO.
			self verifyItIsAValidPoint: aPoint.
			self occupyPositionIfPossible: aPoint By: OPlayer.
			self changeCurrentPlayer.	
			]
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 04:18:57' prior: 50883637!
setXAt: aPoint 
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyNotAllPiecesInTheGame.
			self verifyCurrentPlayerO.
			self verifyItIsAValidPoint: aPoint.
			self occupyPositionIfPossible: aPoint By: XPlayer.
			self changeCurrentPlayer.	
			]! !
!TerniLapilli methodsFor: 'signals' stamp: 'CR 11/2/2020 04:19:18'!
signalTheGameIsOver

	^ self error: self class errorGameOver.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'CR 11/2/2020 04:19:40'!
errorGameOver
	^ 'Error!! The game has already ended'! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 04:21:17' prior: 50884843!
setOAt: aPoint 
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyNotAllPiecesInTheGame.
			self verifyCurrentPlayerO.
			self verifyItIsAValidPoint: aPoint.
			self occupyPositionIfPossible: aPoint By: OPlayer.
			self verifyIfItsAVictory.
			self changeCurrentPlayer.	
			
			]
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 04:21:26' prior: 50884855!
setXAt: aPoint 
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyNotAllPiecesInTheGame.
			self verifyCurrentPlayerO.
			self verifyItIsAValidPoint: aPoint.
			self occupyPositionIfPossible: aPoint By: XPlayer.
			self verifyIfItsAVictory.
			self changeCurrentPlayer.	
			]! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 04:21:48' prior: 50884889!
setXAt: aPoint 
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyNotAllPiecesInTheGame.
			self verifyCurrentPlayerX.
			self verifyItIsAValidPoint: aPoint.
			self occupyPositionIfPossible: aPoint By: XPlayer.
			self verifyIfItsAVictory.
			self changeCurrentPlayer.	
			]! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 04:21:51'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 04:21:51'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:21:51'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 04:21:51'!
ERROR!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:21:51'!
FAILURE!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 04:21:51'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 04:21:51'!
ERROR!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 04:21:51'!
ERROR!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 04:21:51'!
ERROR!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 04:21:51'!
ERROR!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 04:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 04:22:32'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:22:34'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 04:22:35'!
ERROR!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 04:22:35'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:22:58'!
verifyIfItsAVictory
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:23:01' prior: 50884962!
verifyIfItsAVictory
	! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 04:23:05'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 04:23:05'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:23:05'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 04:23:05'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:23:05'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 04:23:05'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 04:23:05'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 04:23:05'!
PASSED!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 04:23:05'!
PASSED!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 04:23:05'!
FAILURE!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 04:23:05'!
FAILURE!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 04:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 04:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 04:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 04:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 04:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 04:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 04:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 04:23:08'!
FAILURE!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 04:23:08'!
FAILURE!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 04:23:12'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 04:23:12'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:23:12'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 04:23:12'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:23:12'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 04:23:12'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 04:23:12'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 04:23:12'!
PASSED!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 04:23:12'!
PASSED!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 04:23:12'!
FAILURE!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 04:23:12'!
FAILURE!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 04:23:19'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:23:25' prior: 50884967!
verifyIfItsAVictory
	self shouldBeImplemented.! !

----SNAPSHOT----(2 November 2020 04:23:44) CuisUniversity-4384.image priorSource: 17698956!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 04:23:47'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 04:23:47'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:23:47'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 04:23:47'!
ERROR!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:23:47'!
FAILURE!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 04:23:47'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 04:23:47'!
ERROR!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 04:23:47'!
ERROR!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 04:23:47'!
ERROR!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 04:23:47'!
ERROR!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 04:23:51'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:24:01' prior: 50885081!
verifyIfItsAVictory
	! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 04:24:08'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 04:24:08'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:24:08'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 04:24:08'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:24:08'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 04:24:08'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 04:24:08'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 04:24:08'!
PASSED!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 04:24:08'!
PASSED!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 04:24:08'!
FAILURE!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 04:24:08'!
FAILURE!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 04:24:22' prior: 50884833!
test11horizontalWinningWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 2@2.
	aMatch setXAt: 1@2.
	"self assert: aMatch isOver."
	! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 04:24:25'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 04:24:25'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:24:25'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 04:24:25'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:24:25'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 04:24:25'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 04:24:25'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 04:24:25'!
PASSED!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 04:24:25'!
PASSED!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 04:24:25'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:26:31' prior: 50885124!
verifyIfItsAVictory
	self checkHorizontally.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:31:54'!
checkHorizontally
	
	(gameBoard at: 1@1) ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:35:50' prior: 50885211!
checkHorizontally
	
	1 to: 3 do: [:boardRow |
		((gameBoard at: boardRow@1) itsOwnerIsO = (gameBoard at: boardRow@2) itsOwnerIsO = (gameBoard at: boardRow@3) itsOwnerIsO) ifTrue: [^true].
		]! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 04:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 04:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 04:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 04:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 04:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 04:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 04:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 04:35:55'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 04:36:01' prior: 50885164!
test11horizontalWinningWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 2@2.
	aMatch setXAt: 1@2.
	self assert: aMatch isOver.
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:36:21' prior: 50885216!
checkHorizontally
	
	1 to: 3 do: [:boardRow |
		((gameBoard at: boardRow@1) itsOwnerIsO = (gameBoard at: boardRow@2) itsOwnerIsO = (gameBoard at: boardRow@3) itsOwnerIsO) ifTrue: [gameOver := true].
		]! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 04:36:28'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 04:36:28'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:36:28'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 04:36:28'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 04:36:28'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 04:36:28'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 04:36:28'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 04:36:28'!
PASSED!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 04:36:28'!
ERROR!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 04:36:28'!
ERROR!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 04:36:33'!
ERROR!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 04:37:34'!
ERROR!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 04:37:51'!
ERROR!

(gameBoard at: boardRow@1) itsOwnerIsO !

(gameBoard at: boardRow@2) itsOwnerIsO!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:40:08' prior: 50885268!
checkHorizontally
	
	1 to: 3 do: [:boardRow | 
		
		((gameBoard at: boardRow@1) itsOwnerIsO = (gameBoard at: boardRow@2) itsOwnerIsO = (gameBoard at: boardRow@3) itsOwnerIsO) ifTrue: [gameOver := true].
		]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:41:42'!
verifyIfItsAVictory: lastPosition
	self checkHorizontally: lastPosition.! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 04:41:56' prior: 50884876!
setOAt: aPoint 
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyNotAllPiecesInTheGame.
			self verifyCurrentPlayerO.
			self verifyItIsAValidPoint: aPoint.
			self occupyPositionIfPossible: aPoint By: OPlayer.
			self verifyIfItsAVictory: aPoint.
			self changeCurrentPlayer.	
			
			]
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 04:42:02' prior: 50884902!
setXAt: aPoint 
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyNotAllPiecesInTheGame.
			self verifyCurrentPlayerX.
			self verifyItIsAValidPoint: aPoint.
			self occupyPositionIfPossible: aPoint By: XPlayer.
			self verifyIfItsAVictory: aPoint.
			self changeCurrentPlayer.	
			]! !

!methodRemoval: TerniLapilli #verifyIfItsAVictory stamp: 'CR 11/2/2020 04:42:06'!
verifyIfItsAVictory
	self checkHorizontally.!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:44:36'!
checkHorizontally: lastPosition
	| lastPositionRow |
	lastPositionRow := lastPosition x.
	
	(gameBoard at: lastPositionRow@1) ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:47:41' prior: 50885368!
checkHorizontally: lastPosition
	| lastPositionRow |
	lastPositionRow := lastPosition x.
	
	((gameBoard at: lastPositionRow@1) hasOwner) and: [ ((gameBoard at: lastPositionRow@2) hasOwner) and: [(gameBoard at: lastPositionRow@3) hasOwner]].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:52:05' prior: 50885376!
checkHorizontally: lastPosition
	| lastPositionRow firstPosition secondPosition thirdPosition|
	lastPositionRow := lastPosition x.
	firstPosition := gameBoard at: lastPositionRow@1.
	secondPosition := gameBoard at: lastPositionRow@2.
	thirdPosition := gameBoard at: lastPositionRow@3.
	
	
	(firstPosition hasOwner and: [ secondPosition hasOwner and: [thirdPosition hasOwner]])
	ifTrue: [
		
		
		].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:53:05'!
m1: secondPosition m2: firstPosition m3: thirdPosition

	^ firstPosition hasOwner and: [ secondPosition hasOwner and: [thirdPosition hasOwner]]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:53:05' prior: 50885387!
checkHorizontally: lastPosition
	| lastPositionRow firstPosition secondPosition thirdPosition|
	lastPositionRow := lastPosition x.
	firstPosition := gameBoard at: lastPositionRow@1.
	secondPosition := gameBoard at: lastPositionRow@2.
	thirdPosition := gameBoard at: lastPositionRow@3.
	
	
	(self m1: secondPosition m2: firstPosition m3: thirdPosition)
	ifTrue: [
		
		
		].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:53:22' prior: 50885411!
checkHorizontally: lastPosition
	| lastPositionRow firstPosition secondPosition thirdPosition|
	lastPositionRow := lastPosition x.
	firstPosition := gameBoard at: lastPositionRow@1.
	secondPosition := gameBoard at: lastPositionRow@2.
	thirdPosition := gameBoard at: lastPositionRow@3.
	
	
	(self ifOccupied: secondPosition and: firstPosition and: thirdPosition)
	ifTrue: [
		
		
		].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:54:00'!
ifOccupied: firstPosition and: secondPosition and: thirdPosition

	^ firstPosition hasOwner and: [ secondPosition hasOwner and: [thirdPosition hasOwner]].! !

!methodRemoval: TerniLapilli #m1:m2:m3: stamp: 'CR 11/2/2020 04:54:04'!
m1: secondPosition m2: firstPosition m3: thirdPosition

	^ firstPosition hasOwner and: [ secondPosition hasOwner and: [thirdPosition hasOwner]]!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:55:15' prior: 50885426!
checkHorizontally: lastPosition
	| lastPositionRow firstPosition secondPosition thirdPosition|
	lastPositionRow := lastPosition x.
	firstPosition := gameBoard at: lastPositionRow@1.
	secondPosition := gameBoard at: lastPositionRow@2.
	thirdPosition := gameBoard at: lastPositionRow@3.
	
	(self ifOccupied: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [
		self ifSameOwner: firstPosition and: secondPosition and: thirdPosition.
		].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:55:42'!
ifSameOwner: firstPosition and: secondPosition and: thirdPosition.

	^ firstPosition isO and: [ secondPosition isO and: [thirdPosition isO]].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 04:55:56' prior: 50885473!
ifSameOwner: firstPosition and: secondPosition and: thirdPosition.

	^ firstPosition isO = secondPosition isO = thirdPosition isO.! !

!methodRemoval: TerniLapilli #checkHorizontally stamp: 'CR 11/2/2020 04:56:00'!
checkHorizontally
	
	1 to: 3 do: [:boardRow | 
		
		((gameBoard at: boardRow@1) itsOwnerIsO = (gameBoard at: boardRow@2) itsOwnerIsO = (gameBoard at: boardRow@3) itsOwnerIsO) ifTrue: [gameOver := true].
		]!
!TLPosition methodsFor: 'nil' stamp: 'CR 11/2/2020 04:56:39'!
hasOwner
	^self isOccupied.! !

!methodRemoval: TLPosition #hasOwner stamp: 'CR 11/2/2020 05:11:00'!
hasOwner
	^self isOccupied.!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 05:11:10' prior: 50885441!
ifOccupied: firstPosition and: secondPosition and: thirdPosition

	^ firstPosition isOccupied and: [ secondPosition isOccupied and: [thirdPosition isOccupied]].! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 05:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 05:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 05:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 05:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 05:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 05:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 05:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 05:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 05:11:35'!
ERROR!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:11:35'!
ERROR!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:11:46'!
ERROR!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:11:46'!
ERROR!
!TLPosition methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 05:11:57'!
isO
	self shouldBeImplemented.! !

!methodRemoval: TLPosition #isO stamp: 'CR 11/2/2020 05:12:17'!
isO
	self shouldBeImplemented.!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 05:12:35' prior: 50885481!
ifSameOwner: firstPosition and: secondPosition and: thirdPosition.

	^ firstPosition itsOwnerIsO = secondPosition itsOwnerIsO = thirdPosition itsOwnerIsO.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 05:12:43'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 05:12:43'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 05:12:43'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 05:12:43'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 05:12:43'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 05:12:44'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 05:12:44'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 05:12:44'!
PASSED!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 05:12:44'!
PASSED!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:12:44'!
FAILURE!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:12:44'!
FAILURE!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:12:51'!
FAILURE!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:12:51'!
FAILURE!

^ firstPosition isOccupied and: [ secondPosition isOccupied and: [thirdPosition isOccupied]]!

firstPosition itsOwnerIsO!

secondPosition itsOwnerIsO!

thirdPosition itsOwnerIsO!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 05:15:30' prior: 50885456!
checkHorizontally: lastPosition
	| lastPositionRow firstPosition secondPosition thirdPosition|
	lastPositionRow := lastPosition x.
	firstPosition := gameBoard at: lastPositionRow@1.
	secondPosition := gameBoard at: lastPositionRow@2.
	thirdPosition := gameBoard at: lastPositionRow@3.
	
	(self itsOccupied: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [
		self ifSameOwner: firstPosition and: secondPosition and: thirdPosition.
		].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 05:15:38' prior: 50885617!
checkHorizontally: lastPosition
	| lastPositionRow firstPosition secondPosition thirdPosition|
	lastPositionRow := lastPosition x.
	firstPosition := gameBoard at: lastPositionRow@1.
	secondPosition := gameBoard at: lastPositionRow@2.
	thirdPosition := gameBoard at: lastPositionRow@3.
	
	(self itsOccupied: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [
		self sameOwner: firstPosition and: secondPosition and: thirdPosition.
		].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 05:16:00' prior: 50885635!
checkHorizontally: lastPosition
	| lastPositionRow firstPosition secondPosition thirdPosition|
	lastPositionRow := lastPosition x.
	firstPosition := gameBoard at: lastPositionRow@1.
	secondPosition := gameBoard at: lastPositionRow@2.
	thirdPosition := gameBoard at: lastPositionRow@3.
	
	(self itsOccupied: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [
		(self sameOwner: firstPosition and: secondPosition and: thirdPosition)
			ifTrue: [gameOver := true]
		].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 05:16:09'!
ifItsOccupied: firstPosition and: secondPosition and: thirdPosition

	^ firstPosition isOccupied and: [ secondPosition isOccupied and: [thirdPosition isOccupied]].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 05:16:13'!
itsOccupied: firstPosition and: secondPosition and: thirdPosition

	^ firstPosition isOccupied and: [ secondPosition isOccupied and: [thirdPosition isOccupied]].! !

!methodRemoval: TerniLapilli #ifItsOccupied:and:and: stamp: 'CR 11/2/2020 05:16:15'!
ifItsOccupied: firstPosition and: secondPosition and: thirdPosition

	^ firstPosition isOccupied and: [ secondPosition isOccupied and: [thirdPosition isOccupied]].!

!methodRemoval: TerniLapilli #ifOccupied:and:and: stamp: 'CR 11/2/2020 05:16:17'!
ifOccupied: firstPosition and: secondPosition and: thirdPosition

	^ firstPosition isOccupied and: [ secondPosition isOccupied and: [thirdPosition isOccupied]].!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 05:16:22'!
sameOwner: firstPosition and: secondPosition and: thirdPosition.

	^ firstPosition itsOwnerIsO = secondPosition itsOwnerIsO = thirdPosition itsOwnerIsO.! !

!methodRemoval: TerniLapilli #ifSameOwner:and:and: stamp: 'CR 11/2/2020 05:16:24'!
ifSameOwner: firstPosition and: secondPosition and: thirdPosition.

	^ firstPosition itsOwnerIsO = secondPosition itsOwnerIsO = thirdPosition itsOwnerIsO.!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 05:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 05:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 05:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 05:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 05:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 05:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 05:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 05:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 05:16:29'!
ERROR!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:16:29'!
FAILURE!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:16:34'!
FAILURE!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:16:34'!
FAILURE!

firstPosition itsOwnerIsO = secondPosition itsOwnerIsO!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 05:18:46' prior: 50885703!
sameOwner: firstPosition and: secondPosition and: thirdPosition

	^ firstPosition itsOwnerIsO = secondPosition itsOwnerIsO = thirdPosition itsOwnerIsO.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 05:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 05:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 05:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 05:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 05:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 05:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 05:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 05:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 05:18:49'!
ERROR!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:18:49'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 05:20:09' prior: 50885760!
sameOwner: firstPosition and: secondPosition and: thirdPosition
	| isOwnerO |
	isOwnerO := firstPosition itsOwnerIsO.
	
	^ (secondPosition itsOwnerIsO = thirdPosition itsOwnerIsO) and: [ secondPosition itsOwnerIsO = isOwnerO].! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 05:20:23'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 05:20:23'!
PASSED!

!testRun: #TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 05:20:23'!
PASSED!

!testRun: #TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 05:20:23'!
PASSED!

!testRun: #TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 05:20:23'!
PASSED!

!testRun: #TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 05:20:23'!
PASSED!

!testRun: #TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 05:20:23'!
PASSED!

!testRun: #TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 05:20:23'!
PASSED!

!testRun: #TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 05:20:23'!
PASSED!

!testRun: #TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:20:23'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:21:40'!
test11verticalWinningWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@3.
	aMatch setXAt: 2@1.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@1.
	self assert: aMatch isOver.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:21:44'!
test12verticalWinningWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@3.
	aMatch setXAt: 2@1.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@1.
	self assert: aMatch isOver.
	! !

!methodRemoval: TerniLapilliTest #test11verticalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:21:47'!
test11verticalWinningWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@3.
	aMatch setXAt: 2@1.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@1.
	self assert: aMatch isOver.
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:21:55'!
test03verifyPointIsInValidRange

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setXAt: -1@0.] 
	raise: Error   
	withMessageText: TerniLapilli errorOutOfRangePosition.! !

!methodRemoval: TerniLapilliTest #test04verifyPointIsInValidRange stamp: 'CR 11/2/2020 05:21:58'!
test04verifyPointIsInValidRange

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setXAt: -1@0.] 
	raise: Error   
	withMessageText: TerniLapilli errorOutOfRangePosition.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:22:04'!
test04XPlaysAndGameChangesTurnToO

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 1@1.
	
	self deny: aJustStartedMatch isPlayingX.
	self assert: aJustStartedMatch isPlayingO.
	self deny: aJustStartedMatch isOver.! !

!methodRemoval: TerniLapilliTest #test05XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 05:22:07'!
test05XPlaysAndGameChangesTurnToO

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 1@1.
	
	self deny: aJustStartedMatch isPlayingX.
	self assert: aJustStartedMatch isPlayingO.
	self deny: aJustStartedMatch isOver.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:22:11'!
test05verifyPointIsInValidRange

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setXAt: 1@1. aJustStartedMatch setXAt: 2@1.] 
	raise: Error   
	withMessageText: TerniLapilli errorInvalidPlayer.! !

!methodRemoval: TerniLapilliTest #test06verifyPointIsInValidRange stamp: 'CR 11/2/2020 05:22:13'!
test06verifyPointIsInValidRange

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setXAt: 1@1. aJustStartedMatch setXAt: 2@1.] 
	raise: Error   
	withMessageText: TerniLapilli errorInvalidPlayer.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:22:17'!
test06raisesErrorWhenOStarts

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setOAt: 1@1.] 
	raise: Error   
	withMessageText: TerniLapilli errorInvalidPlayer.! !

!methodRemoval: TerniLapilliTest #test07raisesErrorWhenOStarts stamp: 'CR 11/2/2020 05:22:20'!
test07raisesErrorWhenOStarts

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setOAt: 1@1.] 
	raise: Error   
	withMessageText: TerniLapilli errorInvalidPlayer.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:22:23'!
test07setYOnAlreadyOccupiedPositionRaisesError

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 1@1.
	
	self should: [aJustStartedMatch setOAt: 1@1.] 
	raise: Error   
	withMessageText: TerniLapilli errorAlreadyOccupiedPosition.! !

!methodRemoval: TerniLapilliTest #test08setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 05:22:28'!
test08setYOnAlreadyOccupiedPositionRaisesError

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 1@1.
	
	self should: [aJustStartedMatch setOAt: 1@1.] 
	raise: Error   
	withMessageText: TerniLapilli errorAlreadyOccupiedPosition.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:22:35'!
test08setPositionToPlayerWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	"aMatch setOAt: 2@1."
	self assert: (aMatch doesPositionBelongToX: 1@1).
	"self assert: (aMatch doesPositionBelongToO: 2@1)."
	self deny: aMatch isOver.! !

!methodRemoval: TerniLapilliTest #test09setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 05:22:40'!
test09setPositionToPlayerWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	"aMatch setOAt: 2@1."
	self assert: (aMatch doesPositionBelongToX: 1@1).
	"self assert: (aMatch doesPositionBelongToO: 2@1)."
	self deny: aMatch isOver.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:22:46'!
test9cantAddMoreThanSixGamePieces

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 1@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 3@3.
	self deny: aMatch isOver.
	self should: [aMatch setXAt: 2@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorCantAddMoreThanSixGamePieces.

	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:22:55'!
test09cantAddMoreThanSixGamePieces

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 1@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 3@3.
	self deny: aMatch isOver.
	self should: [aMatch setXAt: 2@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorCantAddMoreThanSixGamePieces.

	
	! !

!methodRemoval: TerniLapilliTest #test9cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 05:22:58'!
test9cantAddMoreThanSixGamePieces

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 1@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 3@3.
	self deny: aMatch isOver.
	self should: [aMatch setXAt: 2@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorCantAddMoreThanSixGamePieces.

	
	!

!methodRemoval: TerniLapilliTest #test10cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 05:23:04'!
test10cantAddMoreThanSixGamePieces

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 1@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 3@3.
	self deny: aMatch isOver.
	self should: [aMatch setXAt: 2@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorCantAddMoreThanSixGamePieces.

	
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:23:07'!
test10horizontalWinningWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 2@2.
	aMatch setXAt: 1@2.
	self assert: aMatch isOver.
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:23:13'!
test11verticalWinningWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@3.
	aMatch setXAt: 2@1.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@1.
	self assert: aMatch isOver.
	! !

!methodRemoval: TerniLapilliTest #test11horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:23:16'!
test11horizontalWinningWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 2@2.
	aMatch setXAt: 1@2.
	self assert: aMatch isOver.
	!

!methodRemoval: TerniLapilliTest #test12verticalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:23:20'!
test12verticalWinningWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@3.
	aMatch setXAt: 2@1.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@1.
	self assert: aMatch isOver.
	!
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 05:24:34'!
checkVertically: lastPosition
	| lastPositionColumn firstPosition secondPosition thirdPosition|
	lastPositionColumn := lastPosition y.
	firstPosition := gameBoard at: 1@lastPositionColumn.
	secondPosition := gameBoard at: 2@lastPositionColumn.
	thirdPosition := gameBoard at: 3@lastPositionColumn.
	
	(self itsOccupied: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [
		(self sameOwner: firstPosition and: secondPosition and: thirdPosition)
			ifTrue: [gameOver := true]
		].! !
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 05:24:57' prior: 50885332!
verifyIfItsAVictory: lastPosition
	self checkHorizontally: lastPosition.
	self checkVertically: lastPosition.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 05:25:01'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 05:25:01'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 05:25:01'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 05:25:01'!
PASSED!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 05:25:01'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 05:25:01'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 05:25:01'!
PASSED!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 05:25:01'!
PASSED!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 05:25:01'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:25:01'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:25:01'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:27:02'!
test12diagonalWinningWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 1@3.
	self assert: aMatch isOver.
	! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 05:39:43'!
checkDiagonals: lastPosition
	| firstPosition secondPosition thirdPosition|
	
	firstPosition := gameBoard at: 1@1.
	secondPosition := gameBoard at: 2@2.
	thirdPosition := gameBoard at: 3@3.
	
	(self itsOccupied: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [
		(self sameOwner: firstPosition and: secondPosition and: thirdPosition)
			ifTrue: [gameOver := true]
		].
	(self itsOccupied: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [
		(self sameOwner: firstPosition and: secondPosition and: thirdPosition)
			ifTrue: [gameOver := true]
		].! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 05:41:06' prior: 50886169!
checkDiagonals: lastPosition
	| firstPosition secondPosition thirdPosition|
	
	firstPosition := gameBoard at: 1@1.
	secondPosition := gameBoard at: 2@2.
	thirdPosition := gameBoard at: 3@3.
	
	(self itsOccupied: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [
		(self sameOwner: firstPosition and: secondPosition and: thirdPosition)
			ifTrue: [gameOver := true]
		].
	firstPosition := gameBoard at: 1@3.
	secondPosition := gameBoard at: 2@2.
	thirdPosition := gameBoard at: 3@1.
	
	(self itsOccupied: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [
		(self sameOwner: firstPosition and: secondPosition and: thirdPosition)
			ifTrue: [gameOver := true]
		].! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 05:42:21'!
m1: firstPosition m2: secondPosition m3: thirdPosition

	^ (self itsOccupied: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [
		(self sameOwner: firstPosition and: secondPosition and: thirdPosition)
			ifTrue: [gameOver := true]
		]! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 05:42:21' prior: 50886190!
checkDiagonals: lastPosition
	| firstPosition secondPosition thirdPosition|
	
	firstPosition := gameBoard at: 1@1.
	secondPosition := gameBoard at: 2@2.
	thirdPosition := gameBoard at: 3@3.
	
	self m1: firstPosition m2: secondPosition m3: thirdPosition.
	firstPosition := gameBoard at: 1@3.
	secondPosition := gameBoard at: 2@2.
	thirdPosition := gameBoard at: 3@1.
	
	(self itsOccupied: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [
		(self sameOwner: firstPosition and: secondPosition and: thirdPosition)
			ifTrue: [gameOver := true]
		].! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 05:44:03' prior: 50886225!
checkDiagonals: lastPosition
	| firstPosition secondPosition thirdPosition|
	
	firstPosition := gameBoard at: 1@1.
	secondPosition := gameBoard at: 2@2.
	thirdPosition := gameBoard at: 3@3.
	
	self ifPositionsHaveTheSameOwnerThenItsVictory: firstPosition and: secondPosition and: thirdPosition.
	firstPosition := gameBoard at: 1@3.
	secondPosition := gameBoard at: 2@2.
	thirdPosition := gameBoard at: 3@1.
	
	(self itsOccupied: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [
		(self sameOwner: firstPosition and: secondPosition and: thirdPosition)
			ifTrue: [gameOver := true]
		].! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 05:44:13'!
ifPositionsHaveTheSameOwnerThenItsVictory: firstPosition and: secondPosition and: thirdPosition.

	^ (self itsOccupied: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [
		(self sameOwner: firstPosition and: secondPosition and: thirdPosition)
			ifTrue: [gameOver := true]
		]! !

!methodRemoval: TerniLapilli #m1:m2:m3: stamp: 'CR 11/2/2020 05:44:18'!
m1: firstPosition m2: secondPosition m3: thirdPosition

	^ (self itsOccupied: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [
		(self sameOwner: firstPosition and: secondPosition and: thirdPosition)
			ifTrue: [gameOver := true]
		]!
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 05:44:28' prior: 50886098!
checkVertically: lastPosition
	| lastPositionColumn firstPosition secondPosition thirdPosition|
	lastPositionColumn := lastPosition y.
	firstPosition := gameBoard at: 1@lastPositionColumn.
	secondPosition := gameBoard at: 2@lastPositionColumn.
	thirdPosition := gameBoard at: 3@lastPositionColumn.
	
	self ifPositionsHaveTheSameOwnerThenItsVictory: firstPosition and: secondPosition and: thirdPosition.! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 05:44:43' prior: 50885653!
checkHorizontally: lastPosition
	| lastPositionRow firstPosition secondPosition thirdPosition|
	lastPositionRow := lastPosition x.
	firstPosition := gameBoard at: lastPositionRow@1.
	secondPosition := gameBoard at: lastPositionRow@2.
	thirdPosition := gameBoard at: lastPositionRow@3.
	
	self ifPositionsHaveTheSameOwnerThenItsVictory: firstPosition and: secondPosition and: thirdPosition.! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 05:44:53' prior: 50886246!
checkDiagonals: lastPosition
	| firstPosition secondPosition thirdPosition|
	
	firstPosition := gameBoard at: 1@1.
	secondPosition := gameBoard at: 2@2.
	thirdPosition := gameBoard at: 3@3.
	
	self ifPositionsHaveTheSameOwnerThenItsVictory: firstPosition and: secondPosition and: thirdPosition.
	firstPosition := gameBoard at: 1@3.
	secondPosition := gameBoard at: 2@2.
	thirdPosition := gameBoard at: 3@1.
	
	self ifPositionsHaveTheSameOwnerThenItsVictory: firstPosition and: secondPosition and: thirdPosition.! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 05:44:59' prior: 50886321!
checkDiagonals: lastPosition
	| firstPosition secondPosition thirdPosition|
	
	firstPosition := gameBoard at: 1@1.
	secondPosition := gameBoard at: 2@2.
	thirdPosition := gameBoard at: 3@3.
	self ifPositionsHaveTheSameOwnerThenItsVictory: firstPosition and: secondPosition and: thirdPosition.
	
	firstPosition := gameBoard at: 1@3.
	secondPosition := gameBoard at: 2@2.
	thirdPosition := gameBoard at: 3@1.
	self ifPositionsHaveTheSameOwnerThenItsVictory: firstPosition and: secondPosition and: thirdPosition.! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 05:45:24' prior: 50886340!
checkDiagonals: lastPosition
	| firstPosition secondPosition thirdPosition|
	
	firstPosition := gameBoard at: 1@1.
	secondPosition := gameBoard at: 2@2.
	thirdPosition := gameBoard at: 3@3.
	self ifPositionsHaveTheSameOwnerThenItsVictory: firstPosition and: secondPosition and: thirdPosition.
	
	firstPosition := gameBoard at: 1@3.
	secondPosition := gameBoard at: 2@2.
	thirdPosition := gameBoard at: 3@1.
	self ifPositionsHaveTheSameOwnerThenItsVictory: firstPosition and: secondPosition and: thirdPosition.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 05:45:43'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 05:45:43'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 05:45:43'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 05:45:43'!
PASSED!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 05:45:43'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 05:45:43'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 05:45:43'!
PASSED!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 05:45:43'!
PASSED!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 05:45:43'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:45:43'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:45:43'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:45:43'!
FAILURE!

!testRun: #TerniLapilliTest #test12diagonalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:45:43'!
FAILURE!

!testRun: #TerniLapilliTest #test12diagonalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:45:47'!
FAILURE!

!testRun: #TerniLapilliTest #test12diagonalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:45:47'!
FAILURE!

!testRun: #TerniLapilliTest #test11verticalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:45:51'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 05:46:15' prior: 50886117!
verifyIfItsAVictory: lastPosition
	self checkHorizontally: lastPosition.
	self checkVertically: lastPosition.
	self checkDiagonals.! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 05:46:27'!
checkDiagonals
	| firstPosition secondPosition thirdPosition|
	
	firstPosition := gameBoard at: 1@1.
	secondPosition := gameBoard at: 2@2.
	thirdPosition := gameBoard at: 3@3.
	self ifPositionsHaveTheSameOwnerThenItsVictory: firstPosition and: secondPosition and: thirdPosition.
	
	firstPosition := gameBoard at: 1@3.
	secondPosition := gameBoard at: 2@2.
	thirdPosition := gameBoard at: 3@1.
	self ifPositionsHaveTheSameOwnerThenItsVictory: firstPosition and: secondPosition and: thirdPosition.! !

!methodRemoval: TerniLapilli #checkDiagonals: stamp: 'CR 11/2/2020 05:46:30'!
checkDiagonals: lastPosition
	| firstPosition secondPosition thirdPosition|
	
	firstPosition := gameBoard at: 1@1.
	secondPosition := gameBoard at: 2@2.
	thirdPosition := gameBoard at: 3@3.
	self ifPositionsHaveTheSameOwnerThenItsVictory: firstPosition and: secondPosition and: thirdPosition.
	
	firstPosition := gameBoard at: 1@3.
	secondPosition := gameBoard at: 2@2.
	thirdPosition := gameBoard at: 3@1.
	self ifPositionsHaveTheSameOwnerThenItsVictory: firstPosition and: secondPosition and: thirdPosition.!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 05:46:33'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 05:46:33'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 05:46:33'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 05:46:33'!
PASSED!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 05:46:33'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 05:46:33'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 05:46:33'!
PASSED!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 05:46:33'!
PASSED!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 05:46:33'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:46:33'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:46:33'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:46:33'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:46:43'!
test12diagonalVictoryWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 1@3.
	self assert: aMatch isOver.
	! !

!methodRemoval: TerniLapilliTest #test12diagonalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:46:46'!
test12diagonalWinningWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 1@3.
	self assert: aMatch isOver.
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:46:52'!
test11verticalVictoryWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@3.
	aMatch setXAt: 2@1.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@1.
	self assert: aMatch isOver.
	! !

!methodRemoval: TerniLapilliTest #test11verticalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:46:55'!
test11verticalWinningWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@3.
	aMatch setXAt: 2@1.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@1.
	self assert: aMatch isOver.
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:47:01'!
test10horizontalVictoryWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 2@2.
	aMatch setXAt: 1@2.
	self assert: aMatch isOver.
	! !

!methodRemoval: TerniLapilliTest #test10horizontalWinningWorksCorrectly stamp: 'CR 11/2/2020 05:47:04'!
test10horizontalWinningWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 2@2.
	aMatch setXAt: 1@2.
	self assert: aMatch isOver.
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:52:20'!
test13moveOfNotOwnedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:52:36'!
test14moveOfNotOwnedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:53:52'!
test20afterVictoryWeCantMoveAnything

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:54:40' prior: 50886594!
test20afterVictoryWeCantMoveAnything

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@3.
	aMatch setXAt: 2@1.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@1.
	self assert: aMatch isOver.
	aMatch setOAt: 1@2. 
	
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:54:53' prior: 50885979!
test08setPositionToPlayerWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 2@1.
	self assert: (aMatch doesPositionBelongToX: 1@1).
	self assert: (aMatch doesPositionBelongToO: 2@1).
	self deny: aMatch isOver.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:55:27' prior: 50886605!
test20afterVictoryWeCantMoveAnything

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@3.
	aMatch setXAt: 2@1.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@1.
	self assert: aMatch isOver. 
	self should: [aMatch setOAt: 1@2.] 
	raise: Error   
	withMessageText: TerniLapilli errorTheGame
	
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:56:03' prior: 50886627!
test20afterVictoryWeCantMoveAnything

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@3.
	aMatch setXAt: 2@1.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@1.
	self assert: aMatch isOver. 
	self should: [aMatch setOAt: 1@2.] 
	raise: Error   
	withMessageText: TerniLapilli errorGameOver. 
	
	
	! !

!testRun: #TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 05:56:05'!
PASSED!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 05:56:08'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 05:56:08'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 05:56:08'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 05:56:08'!
PASSED!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 05:56:08'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 05:56:08'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 05:56:08'!
PASSED!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 05:56:08'!
PASSED!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 05:56:08'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 05:56:08'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 05:56:08'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 05:56:08'!
PASSED!

!testRun: #TerniLapilliTest #test13moveOfNotOwnedPositionRaisesError stamp: 'CR 11/2/2020 05:56:08'!
PASSED!

!testRun: #TerniLapilliTest #test14moveOfNotOwnedPositionRaisesError stamp: 'CR 11/2/2020 05:56:08'!
PASSED!

!testRun: #TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 05:56:08'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:56:24' prior: 50886584!
test14moveOfNotOwnedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	
	
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:57:34' prior: 50886706!
test14moveOfNotOwnedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	self should: [aMatch move: 2@3 to: 1@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorGameOver. 
	
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:58:13'!
test14moveOfNonOwnedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	self should: [aMatch move: 2@3 to: 1@3.] 
	raise: Error   
	withMessageText: TerniLapilli error
	
	
	! !

!methodRemoval: TerniLapilliTest #test14moveOfNotOwnedPositionRaisesError stamp: 'CR 11/2/2020 05:58:15'!
test14moveOfNotOwnedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	self should: [aMatch move: 2@3 to: 1@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorGameOver. 
	
	
	!

!methodRemoval: TerniLapilliTest #test13moveOfNotOwnedPositionRaisesError stamp: 'CR 11/2/2020 05:58:29'!
test13moveOfNotOwnedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	
	
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:58:35'!
test13moveOfNonOwnedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	self should: [aMatch move: 2@3 to: 1@3.] 
	raise: Error   
	withMessageText: TerniLapilli error
	
	
	! !

!methodRemoval: TerniLapilliTest #test14moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 05:58:37'!
test14moveOfNonOwnedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	self should: [aMatch move: 2@3 to: 1@3.] 
	raise: Error   
	withMessageText: TerniLapilli error
	
	
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 05:59:13' prior: 50886770!
test13moveOfNonOwnedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	self should: [aMatch move: 2@3 to: 1@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorInvalidPlayer. 
	
	
	! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:03:12'!
moveFrom: anInitialPosition to: aDestinationPosition
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyItIsAValidPoint: anInitialPosition.
			self verifyCurrentPlayerO.
			self occupyPositionIfPossible: aDestinationPosition By: currentPlayer.
			self verifyIfItsAVictory: aDestinationPosition.
			self changeCurrentPlayer.	
			
			]
! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 06:03:23' prior: 50886798!
test13moveOfNonOwnedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	self should: [aMatch moveFrom: 2@3 to: 1@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorInvalidPlayer. 
	
	
	! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:04:26' prior: 50886812!
moveFrom: anInitialPosition to: aDestinationPosition
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyItIsAValidPoint: anInitialPosition.
			self verifyItIsAValidPoint: aDestinationPosition.
			self verifyCurrentPlayerOwnsPiece.
			self occupyPositionIfPossible: aDestinationPosition By: currentPlayer.
			self verifyIfItsAVictory: aDestinationPosition.
			self changeCurrentPlayer.	
			
			]
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:05:32' prior: 50886842!
moveFrom: anInitialPosition to: aDestinationPosition
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyItIsAValidPoint: anInitialPosition.
			self verifyItIsAValidPoint: aDestinationPosition.
			self verifyCurrentPlayerOwnsPosition.
			self occupyPositionIfPossible: aDestinationPosition By: currentPlayer.
			self verifyIfItsAVictory: aDestinationPosition.
			self changeCurrentPlayer.	
			
			]
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:05:47' prior: 50886859!
moveFrom: anInitialPosition to: aDestinationPosition
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyItIsAValidPoint: anInitialPosition.
			self verifyItIsAValidPoint: aDestinationPosition.
			self verifyCurrentPlayerOwnsPosition: anInitialPosition.
			self occupyPositionIfPossible: aDestinationPosition By: currentPlayer.
			self verifyIfItsAVictory: aDestinationPosition.
			self changeCurrentPlayer.	
			
			]
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:06:15' prior: 50886876!
moveFrom: anInitialPosition to: aDestinationPosition
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyItIsAValidPoint: anInitialPosition.
			self verifyItIsAValidPoint: aDestinationPosition.
			self verifyCurrentPlayerOwnsPosition: anInitialPosition.
			self occupyPositionIfPossible: aDestinationPosition By: currentPlayer.
			self freePreviousPosition: anInitialPosition.
			self verifyIfItsAVictory: aDestinationPosition.
			self changeCurrentPlayer.	
			
			]
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:06:32'!
verifyCurrentPlayerOwnsPosition: anInitialPosition
	
	
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:07:58' prior: 50886911!
verifyCurrentPlayerOwnsPosition: anInitialPosition
	
	anInitialPosition its
! !

!methodRemoval: TerniLapilli #verifyCurrentPlayerOwnsPosition: stamp: 'CR 11/2/2020 06:08:01'!
verifyCurrentPlayerOwnsPosition: anInitialPosition
	
	anInitialPosition its
!
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:08:20'!
moveXFrom: anInitialPosition to: aDestinationPosition
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyItIsAValidPoint: anInitialPosition.
			self verifyItIsAValidPoint: aDestinationPosition.
			self verifyCurrentPlayerOwnsPosition: anInitialPosition.
			self occupyPositionIfPossible: aDestinationPosition By: currentPlayer.
			self freePreviousPosition: anInitialPosition.
			self verifyIfItsAVictory: aDestinationPosition.
			self changeCurrentPlayer.	
			
			]
! !

!methodRemoval: TerniLapilli #moveFrom:to: stamp: 'CR 11/2/2020 06:08:23'!
moveFrom: anInitialPosition to: aDestinationPosition
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyItIsAValidPoint: anInitialPosition.
			self verifyItIsAValidPoint: aDestinationPosition.
			self verifyCurrentPlayerOwnsPosition: anInitialPosition.
			self occupyPositionIfPossible: aDestinationPosition By: currentPlayer.
			self freePreviousPosition: anInitialPosition.
			self verifyIfItsAVictory: aDestinationPosition.
			self changeCurrentPlayer.	
			
			]
!
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:08:56' prior: 50886927!
moveXFrom: anInitialPosition to: aDestinationPosition
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyItIsAValidPoint: anInitialPosition.
			self verifyItIsAValidPoint: aDestinationPosition.
			self verifyCurrentPlayerX.
			self occupyPositionIfPossible: aDestinationPosition By: currentPlayer.
			self freePreviousPosition: anInitialPosition.
			self verifyIfItsAVictory: aDestinationPosition.
			self changeCurrentPlayer.	
			
			]
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:09:20' prior: 50886964!
moveXFrom: anInitialPosition to: aDestinationPosition
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyItIsAValidPoint: anInitialPosition.
			self verifyItIsAValidPoint: aDestinationPosition.
			self verifyCurrentPlayerX.
			self occupyPositionIfPossible: aDestinationPosition By: currentPlayer.
			self freePreviousPosition: anInitialPosition.
			self verifyIfItsAVictory: aDestinationPosition.
			self changeCurrentPlayer.	
			
			]
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:09:34'!
moveYFrom: anInitialPosition to: aDestinationPosition
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyItIsAValidPoint: anInitialPosition.
			self verifyItIsAValidPoint: aDestinationPosition.
			self verifyCurrentPlayerY.
			self occupyPositionIfPossible: aDestinationPosition By: currentPlayer.
			self freePreviousPosition: anInitialPosition.
			self verifyIfItsAVictory: aDestinationPosition.
			self changeCurrentPlayer.	
			
			]
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:09:49' prior: 50885338!
setOAt: aPoint 
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyNotAllPiecesInTheGame.
			self verifyCurrentPlayerO.
			self verifyItIsAValidPoint: aPoint.
			self occupyPositionIfPossible: aPoint By: currentPlayer.
			self verifyIfItsAVictory: aPoint.
			self changeCurrentPlayer.	
			
			]
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:09:57' prior: 50885351!
setXAt: aPoint 
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyNotAllPiecesInTheGame.
			self verifyCurrentPlayerX.
			self verifyItIsAValidPoint: aPoint.
			self occupyPositionIfPossible: aPoint By: currentPlayer.
			self verifyIfItsAVictory: aPoint.
			self changeCurrentPlayer.	
			]! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:10:11' prior: 50887030!
setXAt: aDestinationPosition
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyNotAllPiecesInTheGame.
			self verifyCurrentPlayerX.
			self verifyItIsAValidPoint: aDestinationPosition.
			self occupyPositionIfPossible: aDestinationPosition By: currentPlayer.
			self verifyIfItsAVictory: aDestinationPosition.
			self changeCurrentPlayer.	
			]! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:10:21' prior: 50887017!
setOAt: aDestinationPosition 
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyNotAllPiecesInTheGame.
			self verifyCurrentPlayerO.
			self verifyItIsAValidPoint: aDestinationPosition.
			self occupyPositionIfPossible: aDestinationPosition By: currentPlayer.
			self verifyIfItsAVictory: aDestinationPosition.
			self changeCurrentPlayer.	
			
			]
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:10:48'!
moveOFrom: anInitialPosition to: aDestinationPosition
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyItIsAValidPoint: anInitialPosition.
			self verifyItIsAValidPoint: aDestinationPosition.
			self verifyCurrentPlayerO.
			self occupyPositionIfPossible: aDestinationPosition By: currentPlayer.
			self freePreviousPosition: anInitialPosition.
			self verifyIfItsAVictory: aDestinationPosition.
			self changeCurrentPlayer.	
			
			]
! !

!methodRemoval: TerniLapilli #moveYFrom:to: stamp: 'CR 11/2/2020 06:10:50'!
moveYFrom: anInitialPosition to: aDestinationPosition
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyItIsAValidPoint: anInitialPosition.
			self verifyItIsAValidPoint: aDestinationPosition.
			self verifyCurrentPlayerY.
			self occupyPositionIfPossible: aDestinationPosition By: currentPlayer.
			self freePreviousPosition: anInitialPosition.
			self verifyIfItsAVictory: aDestinationPosition.
			self changeCurrentPlayer.	
			
			]
!
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:11:36'!
freePreviousPosition: aPositionToRelease
	aPositionToRelease free.
! !
!TLPosition methodsFor: 'nil' stamp: 'CR 11/2/2020 06:11:52'!
free
	owner := Nobody new.! !
!TLPosition methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 06:12:21' prior: 50887112!
free
	owner := Nobody ofGame: terniLapilliGame.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 06:13:18'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 06:13:18'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 06:13:18'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 06:13:18'!
PASSED!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 06:13:18'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 06:13:18'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 06:13:18'!
PASSED!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 06:13:18'!
PASSED!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 06:13:18'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 06:13:18'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 06:13:18'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 06:13:18'!
PASSED!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:13:18'!
FAILURE!

!testRun: #TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 06:13:18'!
PASSED!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:13:18'!
FAILURE!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:13:26'!
FAILURE!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:13:26'!
FAILURE!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 06:13:32' prior: 50886827!
test13moveOfNonOwnedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	self should: [aMatch moveXFrom: 2@3 to: 1@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorInvalidPlayer. 
	
	
	! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 06:13:41'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 06:13:41'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 06:13:41'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 06:13:41'!
PASSED!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 06:13:41'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 06:13:41'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 06:13:41'!
PASSED!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 06:13:41'!
PASSED!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 06:13:41'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 06:13:41'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 06:13:41'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 06:13:41'!
PASSED!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:13:41'!
FAILURE!

!testRun: #TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 06:13:41'!
PASSED!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:13:41'!
FAILURE!
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:14:57' prior: 50887107!
freePreviousPosition: aPointToRelease
	(gameBoard at: aPointToRelease) free.
! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 06:15:00'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 06:15:00'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 06:15:00'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 06:15:00'!
PASSED!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 06:15:00'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 06:15:00'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 06:15:00'!
PASSED!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 06:15:00'!
PASSED!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 06:15:00'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 06:15:00'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 06:15:00'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 06:15:00'!
PASSED!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:15:00'!
FAILURE!

!testRun: #TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 06:15:00'!
PASSED!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:15:00'!
FAILURE!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:15:05'!
FAILURE!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:15:05'!
FAILURE!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 06:15:10'!
PASSED!

!testRun: #TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 06:15:12'!
PASSED!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:15:14'!
FAILURE!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:15:14'!
FAILURE!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:17:36'!
FAILURE!
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:21:54' prior: 50886982!
moveXFrom: anInitialPosition to: aDestinationPosition
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyItIsAValidPoint: anInitialPosition.
			self verifyItIsAValidPoint: aDestinationPosition.
			self verifyCurrentPlayerX.
			self verifyPositionIsOwnedByX.
			self occupyPositionIfPossible: aDestinationPosition By: currentPlayer.
			self freePreviousPosition: anInitialPosition.
			self verifyIfItsAVictory: aDestinationPosition.
			self changeCurrentPlayer.	
			
			]
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:22:07'!
verifyPositionIsOwnedByX
	
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:22:25' prior: 50887320!
moveXFrom: anInitialPosition to: aDestinationPosition
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyItIsAValidPoint: anInitialPosition.
			self verifyItIsAValidPoint: aDestinationPosition.
			self verifyCurrentPlayerX.
			self verifyPositionIsOwnedByX: currentPlayer.
			self occupyPositionIfPossible: aDestinationPosition By: currentPlayer.
			self freePreviousPosition: anInitialPosition.
			self verifyIfItsAVictory: aDestinationPosition.
			self changeCurrentPlayer.	
			
			]
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:22:34' prior: 50887342!
moveXFrom: anInitialPosition to: aDestinationPosition
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyItIsAValidPoint: anInitialPosition.
			self verifyItIsAValidPoint: aDestinationPosition.
			self verifyCurrentPlayerX.
			self verifyPositionIsOwnedByX: anInitialPosition.
			self occupyPositionIfPossible: aDestinationPosition By: currentPlayer.
			self freePreviousPosition: anInitialPosition.
			self verifyIfItsAVictory: aDestinationPosition.
			self changeCurrentPlayer.	
			
			]
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:22:55'!
verifyPositionIsOwnedByX: aPosition
	
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:23:17' prior: 50887241!
freePreviousPosition: aPositionToRelease
	(gameBoard at: aPositionToRelease) free.
! !

!methodRemoval: TerniLapilli #verifyPositionIsOwnedByX stamp: 'CR 11/2/2020 06:23:19'!
verifyPositionIsOwnedByX
	
!
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:25:07' prior: 50887380!
verifyPositionIsOwnedByX: aPositionToBeChecked
	(gameBoard at: aPositionToBeChecked) failIfNotOwnedByX. 
	
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 06:25:17'!
verifyPositionIsOwnedByO: aPositionToBeChecked
	(gameBoard at: aPositionToBeChecked) failIfNotOwnedByO. 
	
! !
!TLPosition methodsFor: 'testing' stamp: 'CR 11/2/2020 06:26:21'!
failIfNotOwnedByO
	^owner ifItsNotXThenFail: self.! !
!TLPosition methodsFor: 'testing' stamp: 'CR 11/2/2020 06:27:01' prior: 50887407!
failIfNotOwnedByO
	^owner ifItsNotOThenFail: self.! !
!TLPosition methodsFor: 'testing' stamp: 'CR 11/2/2020 06:27:12'!
failIfNotOwnedByX
	^owner ifItsNotXThenFail: self.! !
!TLPosition methodsFor: 'testing' stamp: 'CR 11/2/2020 06:27:58'!
failBecauseOnlyMyOwnerCanMoveMe
	terniLapilliGame signalPositionOwnedBySomeoneElse.! !
!TLPosition methodsFor: 'testing' stamp: 'CR 11/2/2020 06:28:12' prior: 50887420!
failBecauseOnlyMyOwnerCanMoveMe
	terniLapilliGame signalPositionOwnedByAnotherPlayer.! !
!O methodsFor: 'nil' stamp: 'CR 11/2/2020 06:28:34'!
failIfNotOwnedByO! !
!X methodsFor: 'nil' stamp: 'CR 11/2/2020 06:28:44'!
failIfNotOwnedByO: a
	! !
!X methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 06:29:26' prior: 50887434!
failIfNotOwnedByO: aPositionOwnedByMe
	aPositionOwnedByMe failBecauseOnlyMyOwnerCanMoveMe. ! !
!O methodsFor: 'nil' stamp: 'CR 11/2/2020 06:29:39'!
failIfNotOwnedByX: aPositionOwnedByMe
	aPositionOwnedByMe failBecauseOnlyMyOwnerCanMoveMe. ! !
!O methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 06:29:48'!
failIfNotOwnedByO: aPositionOwnedByMe! !

!methodRemoval: O #failIfNotOwnedByO stamp: 'CR 11/2/2020 06:29:51'!
failIfNotOwnedByO!
!X methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 06:30:03'!
failIfNotOwnedByX: aPositionOwnedByMe! !
!Nobody methodsFor: 'nil' stamp: 'CR 11/2/2020 06:31:46'!
failIfNotOwnedByX: aPositionOwnedByMe
	aPositionOwnedByMe failBecauseOnlyMyOwnerCanMoveMe. ! !
!Nobody methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 06:31:49'!
failIfNotOwnedByO: aPositionOwnedByMe
	aPositionOwnedByMe failBecauseOnlyMyOwnerCanMoveMe. ! !
!TLPosition methodsFor: 'testing' stamp: 'CR 11/2/2020 06:33:55' prior: 50887426!
failBecauseOnlyMyOwnerCanMoveMe
	terniLapilliGame signalcurrentPlayerDoesntOwnPosition.! !
!TerniLapilli methodsFor: 'signals' stamp: 'CR 11/2/2020 06:34:20'!
signalCurrentPlayerDoesntOwnPosition

	^ self error: self class errorCurrentPlayerDoesntOwnPosition! !
!TLPosition methodsFor: 'testing' stamp: 'CR 11/2/2020 06:34:31' prior: 50887472!
failBecauseOnlyMyOwnerCanMoveMe
	terniLapilliGame signalCurrentPlayerDoesntOwnPosition.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'CR 11/2/2020 06:35:17'!
errorCurrentPlayerDoesntOwnPosition
	^ 'This position doesnt belong to current player!!'! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'CR 11/2/2020 06:35:25' prior: 50882715!
errorAlreadyOccupiedPosition
	^ 'This position is already occupied by another!!'! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'CR 11/2/2020 06:35:37' prior: 50887495!
errorAlreadyOccupiedPosition
	^ 'This position is already occupied!!'! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 06:35:53'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 06:35:53'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 06:35:53'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 06:35:53'!
PASSED!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 06:35:53'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 06:35:53'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 06:35:53'!
PASSED!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 06:35:53'!
PASSED!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 06:35:53'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 06:35:53'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 06:35:53'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 06:35:53'!
PASSED!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:35:53'!
FAILURE!

!testRun: #TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 06:35:53'!
PASSED!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:35:53'!
FAILURE!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:35:58'!
FAILURE!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:35:58'!
FAILURE!
!TLPosition methodsFor: 'testing' stamp: 'CR 11/2/2020 06:38:20' prior: 50887416!
failIfNotOwnedByX
	^owner failIfNotOwnedByX: self.! !
!TLPosition methodsFor: 'testing' stamp: 'CR 11/2/2020 06:38:42' prior: 50887412!
failIfNotOwnedByO
	^owner failIfNotOwnedByO: self.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 06:38:46'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 06:38:46'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 06:38:46'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 06:38:46'!
PASSED!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 06:38:46'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 06:38:46'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 06:38:46'!
PASSED!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 06:38:46'!
PASSED!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 06:38:46'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 06:38:46'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 06:38:46'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 06:38:46'!
PASSED!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:38:46'!
FAILURE!

!testRun: #TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 06:38:46'!
PASSED!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:38:46'!
FAILURE!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:38:50'!
FAILURE!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:38:50'!
FAILURE!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 06:39:03' prior: 50887177!
test13moveOfNonOwnedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	self should: [aMatch moveXFrom: 2@3 to: 1@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorCurrentPlayerDoesntOwnPosition. 
	
	
	! !

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 06:39:05'!
PASSED!

----SNAPSHOT----(2 November 2020 06:39:14) CuisUniversity-4384.image priorSource: 17709905!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 06:40:17'!
test14moveToOccupiedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	self should: [aMatch moveXFrom: 2@1 to: 2@2.] 
	raise: Error   
	withMessageText: TerniLapilli errorCurrentPlayerDoesntOwnPosition. 
	
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 06:40:49' prior: 50887649!
test14moveToOccupiedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	self should: [aMatch moveXFrom: 2@1 to: 2@2.] 
	raise: Error   
	withMessageText: TerniLapilli errorAlreadyOccupiedPosition. 
	
	
	! !

!testRun: #TerniLapilliTest #test14moveToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 06:40:52'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 06:48:20'!
test15moveToOccupiedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	self should: [aMatch moveXFrom: 2@1 to: 2@2.] 
	raise: Error   
	withMessageText: TerniLapilli errorAlreadyOccupiedPosition. 
	
	
	! !

----SNAPSHOT----(2 November 2020 06:49:18) CuisUniversity-4384.image priorSource: 17791851!

!methodRemoval: TerniLapilliTest #test15moveToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 06:49:22'!
test15moveToOccupiedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	self should: [aMatch moveXFrom: 2@1 to: 2@2.] 
	raise: Error   
	withMessageText: TerniLapilli errorAlreadyOccupiedPosition. 
	
	
	!

----QUIT----(2 November 2020 06:53:59) CuisUniversity-4384.image priorSource: 17793462!

----STARTUP---- (2 November 2020 15:09:41) as /Users/celeste/facultad/ing1/si-exercises/CuisUniversity-4384.image!


!classRemoval: #TerniLapilli stamp: 'CR 11/2/2020 15:13:29'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer gameBoard piecesInTheGame XPlayer OPlayer gameOver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classRemoval: #TLPosition stamp: 'CR 11/2/2020 15:13:31'!
Object subclass: #TLPosition
	instanceVariableNames: 'terniLapilliGame owner row column'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classRemoval: #X stamp: 'CR 11/2/2020 15:13:31'!
TLPlayer subclass: #X
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classRemoval: #O stamp: 'CR 11/2/2020 15:13:32'!
TLPlayer subclass: #O
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classRemoval: #Nobody stamp: 'CR 11/2/2020 15:13:33'!
TLPlayer subclass: #Nobody
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classRemoval: #TLPlayer stamp: 'CR 11/2/2020 15:13:34'!
Object subclass: #TLPlayer
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classRemoval: #TerniLapilliTest stamp: 'CR 11/2/2020 15:13:34'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

----End fileIn of /Users/celeste/facultad/ing1/si-exercises/17 - Ternipilli/Ejercicio - TerniLapilli.st----!
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 15:15:39' prior: 50888210!
checkHorizontally: lastPosition
	| lastPositionRow positionsToCheck|
	positionsToCheck := OrderedCollection new.
	lastPositionRow := lastPosition x.
	positionsToCheck add: (gameBoard at: lastPositionRow@1).
	positionsToCheck add: (gameBoard at: lastPositionRow@2).
	positionsToCheck add: (gameBoard at: lastPositionRow@3).
	
	self setGameOverIfBelongToCurrentPlayerPositions: positionsToCheck.! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 15:15:45' prior: 50888191!
checkDiagonals
	| diagonalPositions |
	
	diagonalPositions := OrderedCollection new.
	diagonalPositions add: (gameBoard at: 1@1).
	diagonalPositions add: (gameBoard at: 2@2).
	diagonalPositions add: (gameBoard at: 3@3).
	self setGameOverIfBelongToCurrentPlayerPositions: diagonalPositions.
	
	diagonalPositions removeAll. 
	
	diagonalPositions add: (gameBoard at: 1@3).
	diagonalPositions add: ( gameBoard at: 2@2).
	diagonalPositions add: (gameBoard at: 3@1).
	self setGameOverIfBelongToCurrentPlayerPositions: diagonalPositions.! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 15:15:52' prior: 50888225!
checkVertically: lastPosition
	| lastPositionColumn positionsToCheck|
	positionsToCheck := OrderedCollection new.
	lastPositionColumn := lastPosition y.
	positionsToCheck add: (gameBoard at: 1@lastPositionColumn).
	positionsToCheck add: (gameBoard at: 2@lastPositionColumn).
	positionsToCheck add: (gameBoard at: 3@lastPositionColumn).
	
	self setGameOverIfBelongToCurrentPlayerPositions: positionsToCheck.! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 15:16:01' prior: 50888649!
checkVertically: lastPosition
	| lastPositionColumn positionsToCheck|
	positionsToCheck := OrderedCollection new.
	lastPositionColumn := lastPosition y.
	
	positionsToCheck add: (gameBoard at: 1@lastPositionColumn).
	positionsToCheck add: (gameBoard at: 2@lastPositionColumn).
	positionsToCheck add: (gameBoard at: 3@lastPositionColumn).
	
	self setGameOverIfBelongToCurrentPlayerPositions: positionsToCheck.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 15:16:06'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 15:16:06'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 15:16:06'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 15:16:06'!
PASSED!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 15:16:06'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 15:16:06'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 15:16:06'!
PASSED!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 15:16:06'!
PASSED!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 15:16:06'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:16:06'!
FAILURE!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:16:06'!
FAILURE!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:16:06'!
FAILURE!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 15:16:06'!
PASSED!

!testRun: #TerniLapilliTest #test14moveToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 15:16:06'!
PASSED!

!testRun: #TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 15:16:06'!
FAILURE!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:16:14'!
FAILURE!

currentPlayer class!

aBlock value: (array at: index)!
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 15:19:38' prior: 50888270!
setGameOverIfBelongToCurrentPlayerPositions: positionsToCheck.
	
	^positionsToCheck allSatisfy: [:aPosition | (aPosition owner) isKindOf: currentPlayer class].
	
	"(self currentPlayerHasPositions: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [gameOver := true]
	
			
	^ (self itsOccupied: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [
		(self sameOwner: firstPosition and: secondPosition and: thirdPosition)
			ifTrue: [gameOver := true]
		]
	"
	! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 15:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 15:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 15:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 15:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 15:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 15:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 15:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 15:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 15:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:19:47'!
FAILURE!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:19:47'!
FAILURE!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:19:47'!
FAILURE!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 15:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test14moveToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 15:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 15:19:47'!
FAILURE!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:19:54'!
FAILURE!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:19:54'!
FAILURE!
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 15:21:10' prior: 50888735!
setGameOverIfBelongToCurrentPlayerPositions: positionsToCheck.
	
	gameOver := positionsToCheck allSatisfy: [:aPosition | (aPosition owner) isKindOf: currentPlayer class].
	
	"(self currentPlayerHasPositions: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [gameOver := true]
	
			
	^ (self itsOccupied: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [
		(self sameOwner: firstPosition and: secondPosition and: thirdPosition)
			ifTrue: [gameOver := true]
		]
	"
	! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 15:21:17'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 15:21:17'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 15:21:17'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 15:21:17'!
PASSED!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 15:21:17'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 15:21:17'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 15:21:17'!
PASSED!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 15:21:17'!
PASSED!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 15:21:17'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:21:17'!
FAILURE!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:21:17'!
FAILURE!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:21:17'!
PASSED!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 15:21:17'!
PASSED!

!testRun: #TerniLapilliTest #test14moveToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 15:21:17'!
PASSED!

!testRun: #TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 15:21:17'!
FAILURE!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:21:31'!
FAILURE!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:21:31'!
FAILURE!

positionsToCheck allSatisfy: [:aPosition | (aPosition owner) isKindOf: currentPlayer class].!
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 15:23:32' prior: 50888809!
setGameOverIfBelongToCurrentPlayerPositions: positionsToCheck.
	
	gameOver := gameOver or: [positionsToCheck allSatisfy: [:aPosition | (aPosition owner) isKindOf: currentPlayer class]].
	
	"(self currentPlayerHasPositions: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [gameOver := true]
	
			
	^ (self itsOccupied: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [
		(self sameOwner: firstPosition and: secondPosition and: thirdPosition)
			ifTrue: [gameOver := true]
		]
	"
	! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 15:24:12' prior: 50888887!
setGameOverIfBelongToCurrentPlayerPositions: positionsToCheck.
	
	^ positionsToCheck allSatisfy: [:aPosition | (aPosition owner) isKindOf: currentPlayer class].
	
	"(self currentPlayerHasPositions: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [gameOver := true]
	
			
	^ (self itsOccupied: firstPosition and: secondPosition and: thirdPosition)
	ifTrue: [
		(self sameOwner: firstPosition and: secondPosition and: thirdPosition)
			ifTrue: [gameOver := true]
		]
	"
	! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 15:25:26' prior: 50888629!
checkDiagonals
	| diagonalPositions isADiagonalVictory |
	
	diagonalPositions := OrderedCollection new.
	diagonalPositions add: (gameBoard at: 1@1).
	diagonalPositions add: (gameBoard at: 2@2).
	diagonalPositions add: (gameBoard at: 3@3).
	isADiagonalVictory := self setGameOverIfBelongToCurrentPlayerPositions: diagonalPositions.
	
	diagonalPositions removeAll. 
	
	diagonalPositions add: (gameBoard at: 1@3).
	diagonalPositions add: ( gameBoard at: 2@2).
	diagonalPositions add: (gameBoard at: 3@1).
	isADiagonalVictory := isADiagonalVictory or: [self setGameOverIfBelongToCurrentPlayerPositions: diagonalPositions].! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 15:25:33' prior: 50888613!
checkHorizontally: lastPosition
	| lastPositionRow positionsToCheck|
	positionsToCheck := OrderedCollection new.
	lastPositionRow := lastPosition x.
	positionsToCheck add: (gameBoard at: lastPositionRow@1).
	positionsToCheck add: (gameBoard at: lastPositionRow@2).
	positionsToCheck add: (gameBoard at: lastPositionRow@3).
	
	^ self setGameOverIfBelongToCurrentPlayerPositions: positionsToCheck.! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 15:25:39' prior: 50888665!
checkVertically: lastPosition
	| lastPositionColumn positionsToCheck|
	positionsToCheck := OrderedCollection new.
	lastPositionColumn := lastPosition y.
	
	positionsToCheck add: (gameBoard at: 1@lastPositionColumn).
	positionsToCheck add: (gameBoard at: 2@lastPositionColumn).
	positionsToCheck add: (gameBoard at: 3@lastPositionColumn).
	
	^ self setGameOverIfBelongToCurrentPlayerPositions: positionsToCheck.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 15:26:55' prior: 50888041!
verifyIfCurrentPlayerWins: lastPosition
	gameOver := (self checkHorizontally: lastPosition) or: [ (self checkVertically: lastPosition) or: [self checkDiagonals]].! !
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 15:28:34'!
lastPositionFormsALine: lastPosition

	^ (self checkHorizontally: lastPosition) or: [ (self checkVertically: lastPosition) or: [self checkDiagonals]]! !
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 15:28:34' prior: 50888979!
verifyIfCurrentPlayerWins: lastPosition
	gameOver := self lastPositionFormsALine: lastPosition.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 15:28:51'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 15:28:51'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 15:28:51'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 15:28:51'!
ERROR!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 15:28:51'!
FAILURE!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 15:28:51'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 15:28:51'!
FAILURE!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 15:28:51'!
ERROR!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 15:28:51'!
ERROR!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:28:51'!
ERROR!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:28:51'!
ERROR!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:28:51'!
ERROR!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 15:28:51'!
ERROR!

!testRun: #TerniLapilliTest #test14moveToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 15:28:51'!
ERROR!

!testRun: #TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 15:28:51'!
ERROR!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 15:29:09'!
ERROR!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 15:29:09'!
ERROR!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 15:29:17'!
ERROR!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 15:29:45'!
ERROR!
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 15:31:13' prior: 50888924!
checkDiagonals
	| diagonalPositions isADiagonalVictory |
	
	diagonalPositions := OrderedCollection new.
	diagonalPositions add: (gameBoard at: 1@1).
	diagonalPositions add: (gameBoard at: 2@2).
	diagonalPositions add: (gameBoard at: 3@3).
	isADiagonalVictory := self setGameOverIfBelongToCurrentPlayerPositions: diagonalPositions.
	
	diagonalPositions removeAll. 
	
	diagonalPositions add: (gameBoard at: 1@3).
	diagonalPositions add: ( gameBoard at: 2@2).
	diagonalPositions add: (gameBoard at: 3@1).
	isADiagonalVictory := isADiagonalVictory or: [self setGameOverIfBelongToCurrentPlayerPositions: diagonalPositions].
	^ isADiagonalVictory.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 15:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 15:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 15:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 15:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 15:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 15:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 15:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 15:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 15:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 15:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test14moveToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 15:31:16'!
PASSED!

!testRun: #TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 15:31:16'!
PASSED!
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 15:32:52' prior: 50888906!
setGameOverIfBelongToCurrentPlayerPositions: positionsToCheck.
	
	^ positionsToCheck allSatisfy: [:aPosition | (aPosition owner) isKindOf: currentPlayer class].
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 15:34:13' prior: 50887996!
currentPlayerHasPositions: firstPosition and: secondPosition and: thirdPosition
	
	^ ((firstPosition owner) isKindOf: currentPlayer class) and: [((secondPosition owner) isKindOf: currentPlayer class) and: [(thirdPosition owner) isKindOf: currentPlayer class]].! !

Object subclass: #TerniLapilliState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #TerniLapilliState category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 15:39:02'!
Object subclass: #TerniLapilliState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

TerniLapilliState subclass: #gameOver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

TerniLapilliState subclass: #GameOver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #GameOver category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 15:39:19'!
TerniLapilliState subclass: #GameOver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

TerniLapilliState subclass: #AllPiecesInGame
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #AllPiecesInGame category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 15:40:56'!
TerniLapilliState subclass: #AllPiecesInGame
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

TerniLapilliState subclass: #NotAllPiecesInGame
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #NotAllPiecesInGame category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 15:41:12'!
TerniLapilliState subclass: #NotAllPiecesInGame
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

Object subclass: #TerniLapilliState
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #TerniLapilliState category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 15:41:32'!
Object subclass: #TerniLapilliState
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!
!TerniLapilliState class methodsFor: 'nil' stamp: 'CR 11/2/2020 15:42:20'!
ofGame: aTerniLapilliGameToBeAttachedTo
	^self new initializeWithGame: aTerniLapilliGameToBeAttachedTo.! !
!TerniLapilliState methodsFor: 'nil' stamp: 'CR 11/2/2020 15:42:37'!
initializeWithGame: aTerniLapilliGameToBeAttachedTo
	terniLapilliGame := aTerniLapilliGameToBeAttachedTo.! !

TerniLapilliState subclass: #AllPiecesInGameNotOver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #AllPiecesInGameNotOver category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 15:43:26'!
TerniLapilliState subclass: #AllPiecesInGameNotOver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classRemoval: #AllPiecesInGameNotOver stamp: 'CR 11/2/2020 15:44:21'!
TerniLapilliState subclass: #AllPiecesInGameNotOver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

TerniLapilliState subclass: #NonOverGame
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #NonOverGame category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 15:44:53'!
TerniLapilliState subclass: #NonOverGame
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

NonOverGame subclass: #AllPiecesInGame
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #AllPiecesInGame category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 15:45:07'!
NonOverGame subclass: #AllPiecesInGame
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

NonOverGame subclass: #NotAllPiecesInGame
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #NotAllPiecesInGame category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 15:45:17'!
NonOverGame subclass: #NotAllPiecesInGame
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 15:45:48' prior: 50888160!
initializeGame
	piecesInTheGame := 0.
	currentPlayer := PlayerX ofGame: self..
	gameOver := false.
	
	self initializeBoard.! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'gameState currentPlayer gameBoard piecesInTheGame gameOver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #TerniLapilli category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 15:45:56'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'gameState currentPlayer gameBoard piecesInTheGame gameOver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 15:46:31' prior: 50889296!
initializeGame
	piecesInTheGame := 0.
	currentPlayer := PlayerX ofGame: self..
	gameOver := false.
	gameState := NotAllPiecesInGame ofGame: self.
	self initializeBoard.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 15:47:12' prior: 50888012!
isOver
	^ gameState isOver.! !
!GameOver methodsFor: 'nil' stamp: 'CR 11/2/2020 15:47:22'!
isOver
	^true.! !
!NonOverGame methodsFor: 'nil' stamp: 'CR 11/2/2020 15:47:28'!
isOver
	^false.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:47:36'!
FAILURE!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:47:36'!
FAILURE!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:47:36'!
FAILURE!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTest #test14moveToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 15:47:36'!
FAILURE!
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 15:49:50' prior: 50888105!
setOAt: aDestinationPosition 
	gameState checkIfNotAllPiecesInGame.
	
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyCurrentPlayerO.
			self IfPossibleUpdateGameBySettingPlayerAt: aDestinationPosition.	
			]
! !
!AllPiecesInGame methodsFor: 'nil' stamp: 'CR 11/2/2020 15:50:12'!
checkIfNotAllPiecesInGame
! !
!NotAllPiecesInGame methodsFor: 'nil' stamp: 'CR 11/2/2020 15:50:18'!
checkIfNotAllPiecesInGame
	! !
!NotAllPiecesInGame methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 15:50:56' prior: 50889400!
checkIfNotAllPiecesInGame
	terniLapilliGame signalCantAddMoreThanSixGamePieces. ! !
!NotAllPiecesInGame methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 15:51:04' prior: 50889405!
checkIfNotAllPiecesInGame! !
!AllPiecesInGame methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 15:51:10' prior: 50889396!
checkIfNotAllPiecesInGame
	terniLapilliGame signalCantAddMoreThanSixGamePieces. ! !
!GameOver methodsFor: 'nil' stamp: 'CR 11/2/2020 15:51:59'!
checkIfNotAllPiecesInGame
	terniLapilliGame signalTheGameIsOver. ! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 15:52:05'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 15:52:05'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 15:52:05'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 15:52:05'!
PASSED!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 15:52:05'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 15:52:05'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 15:52:05'!
PASSED!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 15:52:05'!
PASSED!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 15:52:05'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:52:05'!
FAILURE!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:52:05'!
FAILURE!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:52:05'!
FAILURE!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 15:52:05'!
PASSED!

!testRun: #TerniLapilliTest #test14moveToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 15:52:05'!
PASSED!

!testRun: #TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 15:52:05'!
FAILURE!
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 15:52:46' prior: 50889386!
setOAt: aDestinationPosition 
	gameState checkIfNotAllPiecesInGame.
	self verifyCurrentPlayerO.
	self IfPossibleUpdateGameBySettingPlayerAt: aDestinationPosition.	
			
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 15:52:57' prior: 50888114!
setXAt: aDestinationPosition
	(gameOver) 
	self verifyCurrentPlayerX.
	self IfPossibleUpdateGameBySettingPlayerAt: aDestinationPosition.	
	! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 15:53:08' prior: 50889484!
setXAt: aDestinationPosition
	gameState checkIfNotAllPiecesInGame.
	self verifyCurrentPlayerX.
	self IfPossibleUpdateGameBySettingPlayerAt: aDestinationPosition.	
	! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 15:53:34' prior: 50888083!
moveOFrom: anInitialPosition to: aDestinationPosition
	gameOver checkIfAllPiecesInGame.
	(gameOver) 
		ifTrue:[self signalTheGameIsOver]
		ifFalse: [
			self verifyItIsAValidOMoveFrom: aDestinationPosition to: anInitialPosition.
			self move: anInitialPosition to: aDestinationPosition.
			]
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 15:53:50' prior: 50889501!
moveOFrom: anInitialPosition to: aDestinationPosition
	gameOver checkIfAllPiecesInGame.
	self verifyItIsAValidOMoveFrom: aDestinationPosition to: anInitialPosition.
	self move: anInitialPosition to: aDestinationPosition.
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 15:54:03' prior: 50888094!
moveXFrom: anInitialPosition to: aDestinationPosition
	self verifyItIsAValidXMoveFrom: aDestinationPosition to: anInitialPosition.
	self move: anInitialPosition to: aDestinationPosition.	
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 15:54:12' prior: 50889524!
moveXFrom: anInitialPosition to: aDestinationPosition
	gameOver checkIfAllPiecesInGame.
	self verifyItIsAValidXMoveFrom: aDestinationPosition to: anInitialPosition.
	self move: anInitialPosition to: aDestinationPosition.	
! !
!AllPiecesInGame methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 15:54:27'!
checkIfAllPiecesInGame! !
!NotAllPiecesInGame methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 15:54:35'!
checkIfAllPiecesInGame
	! !
!NotAllPiecesInGame methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 15:55:14' prior: 50889547!
checkIfAllPiecesInGame
	terniLapilliGame signalNotAllPiecesInGame.! !
!TerniLapilli methodsFor: 'signals' stamp: 'CR 11/2/2020 15:55:41'!
signalNotAllPiecesInGame

	^ self error: self class errorNotAllPiecesInGame.! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'CR 11/2/2020 15:56:04'!
errorNotAllPiecesInGame
	^ 'Cant move pieces if not all pieces in game!!'! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 15:56:12'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 15:56:12'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 15:56:12'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 15:56:12'!
PASSED!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 15:56:12'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 15:56:12'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 15:56:12'!
PASSED!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 15:56:12'!
PASSED!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 15:56:12'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:56:12'!
FAILURE!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:56:12'!
FAILURE!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 15:56:12'!
FAILURE!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 15:56:12'!
FAILURE!

!testRun: #TerniLapilliTest #test14moveToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 15:56:12'!
FAILURE!

!testRun: #TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 15:56:12'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 15:58:23' prior: 50888995!
verifyIfCurrentPlayerWins: lastPosition
	| doesCurrentPlayerWin |
	doesCurrentPlayerWin := self lastPositionFormsALine: lastPosition.
	doesCurrentPlayerWin ifTrue: [
		gameState := GameOver.
		
		]! !
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 15:58:52' prior: 50889618!
verifyIfCurrentPlayerWins: lastPosition
	| doesCurrentPlayerWin |
	doesCurrentPlayerWin := self lastPositionFormsALine: lastPosition.
	doesCurrentPlayerWin ifTrue: [
		gameState := GameOver ofGame: self.
		]! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'gameState currentPlayer gameBoard piecesInTheGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!

!classDefinition: #TerniLapilli category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 15:59:12'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'gameState currentPlayer gameBoard piecesInTheGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 15:59:37' prior: 50889319!
initializeGame
	piecesInTheGame := 0.
	currentPlayer := PlayerX ofGame: self.
	gameState := NotAllPiecesInGame ofGame: self.
	self initializeBoard.! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 15:59:55' prior: 50889514!
moveOFrom: anInitialPosition to: aDestinationPosition
	gameState checkIfAllPiecesInGame.
	self verifyItIsAValidOMoveFrom: aDestinationPosition to: anInitialPosition.
	self move: anInitialPosition to: aDestinationPosition.
! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 16:00:03' prior: 50889533!
moveXFrom: anInitialPosition to: aDestinationPosition
	gameState checkIfAllPiecesInGame.
	self verifyItIsAValidXMoveFrom: aDestinationPosition to: anInitialPosition.
	self move: anInitialPosition to: aDestinationPosition.	
! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 16:01:21' prior: 50888167!
IfPossibleUpdateGameBySettingPlayerAt: aDestinationPosition

	self verifyItIsAValidPoint: aDestinationPosition.
	self occupyPositionByCurrentPlayerIfPossible: aDestinationPosition.
	self verifyIfCurrentPlayerWins: aDestinationPosition.
	self changeCurrentPlayer.! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 16:02:27' prior: 50889475!
setOAt: aDestinationPosition 
	gameState checkIfNotAllPiecesInGame.
	self verifyCurrentPlayerO.
	self IfPossibleUpdateGameBySettingPlayerAt: aDestinationPosition.	
			
! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 16:03:48' prior: 50889680!
IfPossibleUpdateGameBySettingPlayerAt: aDestinationPosition

	self verifyItIsAValidPoint: aDestinationPosition.
	self occupyPositionByCurrentPlayerIfPossible: aDestinationPosition.
	self updateGameState: aDestinationPosition.! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 16:04:27' prior: 50889700!
IfPossibleUpdateGameBySettingPlayerAt: aDestinationPosition

	self verifyItIsAValidPoint: aDestinationPosition.
	self occupyPositionByCurrentPlayerIfPossible: aDestinationPosition.
	self updateGame: aDestinationPosition.
	self changeCurrentPlayer.! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 16:04:32' prior: 50889710!
IfPossibleUpdateGameBySettingPlayerAt: aDestinationPosition

	self verifyItIsAValidPoint: aDestinationPosition.
	self occupyPositionByCurrentPlayerIfPossible: aDestinationPosition.
	self updateGame: aDestinationPosition.! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 16:04:39'!
updateGame: aDestinationPosition
	! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 16:05:34' prior: 50889731!
updateGame: aDestinationPosition
	self ifPlayerWinsThenGameOver: aDestinationPosition. 
	! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 16:07:26' prior: 50889735!
updateGame: aDestinationPosition
	self ifPlayerWinsThenGameOverElseChangeTurn: aDestinationPosition. 
	! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 16:08:50'!
ifPlayerWinsThenGameOverElseChangeTurn: aDestinationPosition
	self verifyIfCurrentPlayerWins: aDestinationPosition. 
	gameState ifNotOverThenChangeTurn. 
	! !
!GameOver methodsFor: 'nil' stamp: 'CR 11/2/2020 16:09:06'!
ifNotOverThenChangeTurn! !
!NonOverGame methodsFor: 'nil' stamp: 'CR 11/2/2020 16:09:32'!
ifNotOverThenChangeTurn
	terniLapilliGame changeCurrentPlayer. ! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 16:09:46'!
changeTurn
	currentPlayer changePlayer.! !
!NonOverGame methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 16:09:55' prior: 50889757!
ifNotOverThenChangeTurn
	terniLapilliGame changeTurn.! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 16:10:15' prior: 50888074!
move: anInitialPosition to: aDestinationPosition

	self moveOccupyingFrom: aDestinationPosition to: anInitialPosition.
	self verifyIfCurrentPlayerWins: aDestinationPosition.
	self changeTurn.! !

!methodRemoval: TerniLapilli #changeCurrentPlayer stamp: 'CR 11/2/2020 16:10:21'!
changeCurrentPlayer
	currentPlayer changePlayer.!
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 16:11:21' prior: 50889772!
move: anInitialPosition to: aDestinationPosition

	self moveOccupyingFrom: aDestinationPosition to: anInitialPosition.
	self updateGame.
	self verifyIfCurrentPlayerWins: aDestinationPosition.
	self changeTurn.! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 16:11:35' prior: 50889786!
move: anInitialPosition to: aDestinationPosition

	self moveOccupyingFrom: aDestinationPosition to: anInitialPosition.
	self updateGame: aDestinationPosition. 
	self verifyIfCurrentPlayerWins: aDestinationPosition.
	self changeTurn.! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 16:11:39' prior: 50889796!
move: anInitialPosition to: aDestinationPosition

	self moveOccupyingFrom: aDestinationPosition to: anInitialPosition.
	self updateGame: aDestinationPosition. ! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 16:13:14' prior: 50889721!
IfPossibleUpdateGameBySettingPlayerAt: aDestinationPosition

	self verifyItIsAValidPoint: aDestinationPosition.
	self occupyPositionByCurrentPlayerIfPossible: aDestinationPosition.
	self updateGame: aDestinationPosition.! !
!TerniLapilli methodsFor: 'game - actions' stamp: 'CR 11/2/2020 16:14:24' prior: 50889807!
move: anInitialPosition to: aDestinationPosition

	self moveOccupyingFrom: aDestinationPosition to: anInitialPosition.
	gameState updateGame: aDestinationPosition.! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 16:14:46' prior: 50889815!
IfPossibleUpdateGameBySettingPlayerAt: aDestinationPosition

	self verifyItIsAValidPoint: aDestinationPosition.
	self occupyPositionByCurrentPlayerIfPossible: aDestinationPosition.
	gameState updateGame: aDestinationPosition.! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 16:15:26'!
checkIfVictory: aDestinationPosition
	self ifPlayerWinsThenGameOverElseChangeTurn: aDestinationPosition. 
	! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 16:17:00'!
checkIfVictoryOrChangeTurn: aDestinationPosition
	self ifPlayerWinsThenGameOverElseChangeTurn: aDestinationPosition. 
	! !

!methodRemoval: TerniLapilli #checkIfVictory: stamp: 'CR 11/2/2020 16:17:02'!
checkIfVictory: aDestinationPosition
	self ifPlayerWinsThenGameOverElseChangeTurn: aDestinationPosition. 
	!
!AllPiecesInGame methodsFor: 'nil' stamp: 'CR 11/2/2020 16:18:11'!
updateGame: aDestinationPosition
	terniLapilliGame checkIfVictoryOrChangeTurn: aDestinationPosition.
	terniLapilliGame ! !
!AllPiecesInGame methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 16:18:17' prior: 50889861!
updateGame: aDestinationPosition
	terniLapilliGame checkIfVictoryOrChangeTurn: aDestinationPosition.! !
!NotAllPiecesInGame methodsFor: 'nil' stamp: 'CR 11/2/2020 16:18:25'!
updateGame: aDestinationPosition
	terniLapilliGame checkIfVictoryOrChangeTurn: aDestinationPosition.
	! !
!NotAllPiecesInGame methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 16:18:46' prior: 50889874!
updateGame: aDestinationPosition
	terniLapilliGame checkIfVictoryOrChangeTurn: aDestinationPosition.
	terniLapilliGame checkIfAllPiecesAreAdded.! !
!NotAllPiecesInGame methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 16:18:51' prior: 50889881!
updateGame: aDestinationPosition
	terniLapilliGame checkIfVictoryOrChangeTurn: aDestinationPosition.
	terniLapilliGame checkIfAllPiecesInGame.! !
!NotAllPiecesInGame methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 16:19:48' prior: 50889889!
updateGame: aDestinationPosition
	terniLapilliGame checkForVictoryOrChangeTurn: aDestinationPosition.
	terniLapilliGame checkIfAllPiecesInGame.! !
!NotAllPiecesInGame methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 16:20:07' prior: 50889897!
updateGame: aDestinationPosition
	terniLapilliGame checkForVictoryOrChangeTurn: aDestinationPosition.
	terniLapilliGame ifAllPiecesInGameThenChangeState.! !
!TerniLapilli methodsFor: 'private' stamp: 'CR 11/2/2020 16:20:18'!
checkForVictoryOrChangeTurn: aDestinationPosition
	self ifPlayerWinsThenGameOverElseChangeTurn: aDestinationPosition. 
	! !

!methodRemoval: TerniLapilli #checkIfVictoryOrChangeTurn: stamp: 'CR 11/2/2020 16:20:23'!
checkIfVictoryOrChangeTurn: aDestinationPosition
	self ifPlayerWinsThenGameOverElseChangeTurn: aDestinationPosition. 
	!
!AllPiecesInGame methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 16:20:28' prior: 50889868!
updateGame: aDestinationPosition
	terniLapilliGame checkForVictoryOrChangeTurn: aDestinationPosition.! !
!NotAllPiecesInGame methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 16:21:09' prior: 50889905!
updateGame: aDestinationPosition
	terniLapilliGame checkForVictoryOrChangeTurn: aDestinationPosition.
	terniLapilliGame ifAllPiecesInGameThenChangeState.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 16:21:58'!
ifAllPiecesInGameThenChangeState
	(piecesInTheGame = 6) ifTrue: [gameState := AllPiecesInGame ofGame: self].! !

!methodRemoval: TerniLapilli #verifyNotAllPiecesInTheGame stamp: 'CR 11/2/2020 16:22:06'!
verifyNotAllPiecesInTheGame
	(piecesInTheGame < 6) ifFalse: [self signalCantAddMoreThanSixGamePieces].!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 16:22:18'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 16:22:18'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 16:22:18'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 16:22:18'!
PASSED!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 16:22:18'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 16:22:18'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 16:22:18'!
PASSED!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 16:22:18'!
PASSED!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 16:22:18'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:22:18'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:22:18'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:22:18'!
FAILURE!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 16:22:18'!
PASSED!

!testRun: #TerniLapilliTest #test14moveToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 16:22:18'!
PASSED!

!testRun: #TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 16:22:18'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:22:18'!
FAILURE!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:22:26'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:22:29'!
FAILURE!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:22:29'!
FAILURE!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:22:41'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:22:43'!
PASSED!

(self checkHorizontally: lastPosition)!

(self checkVertically: lastPosition)!

self checkDiagonals!

^ (self checkHorizontally: lastPosition) or: [ (self checkVertically: lastPosition) or: [self checkDiagonals]]!
!NotAllPiecesInGame methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 16:29:08' prior: 50889934!
updateGame: aDestinationPosition
	terniLapilliGame ifAllPiecesInGameThenChangeState.
	terniLapilliGame checkForVictoryOrChangeTurn: aDestinationPosition.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 16:29:13'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 16:29:13'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 16:29:13'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 16:29:13'!
PASSED!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 16:29:13'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 16:29:13'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 16:29:13'!
PASSED!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 16:29:13'!
PASSED!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 16:29:13'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:29:13'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:29:13'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:29:13'!
PASSED!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 16:29:13'!
PASSED!

!testRun: #TerniLapilliTest #test14moveToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 16:29:13'!
PASSED!

!testRun: #TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 16:29:13'!
PASSED!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 16:31:42'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 16:31:42'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 16:31:42'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 16:31:42'!
PASSED!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 16:31:42'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 16:31:42'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 16:31:42'!
PASSED!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 16:31:42'!
PASSED!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 16:31:42'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:31:42'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:31:42'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:31:42'!
PASSED!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 16:31:42'!
PASSED!

!testRun: #TerniLapilliTest #test14moveToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 16:31:42'!
PASSED!

!testRun: #TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 16:31:42'!
PASSED!

!methodRemoval: TerniLapilli #currentPlayerHasPositions:and:and: stamp: 'CR 11/2/2020 16:32:19'!
currentPlayerHasPositions: firstPosition and: secondPosition and: thirdPosition
	
	^ ((firstPosition owner) isKindOf: currentPlayer class) and: [((secondPosition owner) isKindOf: currentPlayer class) and: [(thirdPosition owner) isKindOf: currentPlayer class]].!

!methodRemoval: TerniLapilli #itsOccupied:and:and: stamp: 'CR 11/2/2020 16:32:36'!
itsOccupied: firstPosition and: secondPosition and: thirdPosition

	^ firstPosition isOccupied and: [ secondPosition isOccupied and: [thirdPosition isOccupied]].!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 16:34:53'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 16:34:53'!
PASSED!

!testRun: #TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 16:34:53'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 16:34:53'!
PASSED!

!testRun: #TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 16:34:53'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 16:34:53'!
PASSED!

!testRun: #TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 16:34:53'!
PASSED!

!testRun: #TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 16:34:53'!
PASSED!

!testRun: #TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 16:34:53'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:34:53'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:34:53'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:34:53'!
PASSED!

!testRun: #TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 16:34:53'!
PASSED!

!testRun: #TerniLapilliTest #test14moveToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 16:34:53'!
PASSED!

!testRun: #TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 16:34:53'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 16:36:49'!
test05playerTryingToPlayOnWrongTurnRaisesError

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setXAt: 1@1. aJustStartedMatch setXAt: 2@1.] 
	raise: Error   
	withMessageText: TerniLapilli errorInvalidPlayer.! !

!methodRemoval: TerniLapilliTest #test05verifyPointIsInValidRange stamp: 'CR 11/2/2020 16:36:53'!
test05verifyPointIsInValidRange

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setXAt: 1@1. aJustStartedMatch setXAt: 2@1.] 
	raise: Error   
	withMessageText: TerniLapilli errorInvalidPlayer.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 16:37:35'!
test07setPieceOnAlreadyOccupiedPositionRaisesError

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 1@1.
	
	self should: [aJustStartedMatch setOAt: 1@1.] 
	raise: Error   
	withMessageText: TerniLapilli errorAlreadyOccupiedPosition.! !

!methodRemoval: TerniLapilliTest #test07setYOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 16:37:37'!
test07setYOnAlreadyOccupiedPositionRaisesError

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	aJustStartedMatch setXAt: 1@1.
	
	self should: [aJustStartedMatch setOAt: 1@1.] 
	raise: Error   
	withMessageText: TerniLapilli errorAlreadyOccupiedPosition.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 16:38:08'!
test08setPieceWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 2@1.
	self assert: (aMatch doesPositionBelongToX: 1@1).
	self assert: (aMatch doesPositionBelongToO: 2@1).
	self deny: aMatch isOver.! !

!methodRemoval: TerniLapilliTest #test08setPositionToPlayerWorksCorrectly stamp: 'CR 11/2/2020 16:38:11'!
test08setPositionToPlayerWorksCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 2@1.
	self assert: (aMatch doesPositionBelongToX: 1@1).
	self assert: (aMatch doesPositionBelongToO: 2@1).
	self deny: aMatch isOver.!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 16:38:46'!
test09addingMoreThanSixPiecesRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 1@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 3@3.
	self deny: aMatch isOver.
	self should: [aMatch setXAt: 2@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorCantAddMoreThanSixGamePieces.

	
	! !

!methodRemoval: TerniLapilliTest #test09cantAddMoreThanSixGamePieces stamp: 'CR 11/2/2020 16:38:48'!
test09cantAddMoreThanSixGamePieces

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@3.
	aMatch setOAt: 1@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 3@3.
	self deny: aMatch isOver.
	self should: [aMatch setXAt: 2@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorCantAddMoreThanSixGamePieces.

	
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 16:39:16'!
test13movingNonOwnedPieceRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	self should: [aMatch moveXFrom: 2@3 to: 1@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorCurrentPlayerDoesntOwnPosition. 
	
	
	! !

!methodRemoval: TerniLapilliTest #test13moveOfNonOwnedPositionRaisesError stamp: 'CR 11/2/2020 16:39:19'!
test13moveOfNonOwnedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	self should: [aMatch moveXFrom: 2@3 to: 1@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorCurrentPlayerDoesntOwnPosition. 
	
	
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 16:39:36'!
test14movingPieceToOccupiedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	self should: [aMatch moveXFrom: 2@1 to: 2@2.] 
	raise: Error   
	withMessageText: TerniLapilli errorAlreadyOccupiedPosition. 
	
	
	! !

!methodRemoval: TerniLapilliTest #test14moveToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 16:39:38'!
test14moveToOccupiedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	self should: [aMatch moveXFrom: 2@1 to: 2@2.] 
	raise: Error   
	withMessageText: TerniLapilli errorAlreadyOccupiedPosition. 
	
	
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 16:40:41'!
test15movingPieceToOccupiedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	self deny: aMatch isOver.
	self should: [aMatch moveXFrom: 2@1 to: 2@2.] 
	raise: Error   
	withMessageText: TerniLapilli errorNotAllPiecesInGame.
	
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 16:40:55'!
test15movingPieceWhenNotAllPiecesInGameRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	self deny: aMatch isOver.
	self should: [aMatch moveXFrom: 2@1 to: 2@2.] 
	raise: Error   
	withMessageText: TerniLapilli errorNotAllPiecesInGame.
	
	
	! !

!methodRemoval: TerniLapilliTest #test15movingPieceToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 16:40:58'!
test15movingPieceToOccupiedPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	self deny: aMatch isOver.
	self should: [aMatch moveXFrom: 2@1 to: 2@2.] 
	raise: Error   
	withMessageText: TerniLapilli errorNotAllPiecesInGame.
	
	
	!

!testRun: #TerniLapilliTest #test15movingPieceWhenNotAllPiecesInGameRaisesError stamp: 'CR 11/2/2020 16:40:59'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 16:41:43'!
test16movingAfterVictoryRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@3.
	aMatch setXAt: 2@1.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@1.
	self assert: aMatch isOver. 
	self should: [aMatch setOAt: 1@2.] 
	raise: Error   
	withMessageText: TerniLapilli errorGameOver. 
	
	
	! !

!methodRemoval: TerniLapilliTest #test20afterVictoryWeCantMoveAnything stamp: 'CR 11/2/2020 16:41:46'!
test20afterVictoryWeCantMoveAnything

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@3.
	aMatch setXAt: 2@1.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@1.
	self assert: aMatch isOver. 
	self should: [aMatch setOAt: 1@2.] 
	raise: Error   
	withMessageText: TerniLapilli errorGameOver. 
	
	
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 16:43:51'!
test17movingToValidPositionError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 1@1.
	aMatch setOAt: 3@3.
	aMatch setXAt: 2@1.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@1.
	self assert: aMatch isOver. 
	self should: [aMatch setOAt: 1@2.] 
	raise: Error   
	withMessageText: TerniLapilli errorGameOver. 
	
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 16:45:05' prior: 50890428!
test17movingToValidPositionError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self assert: aMatch isOver. 
	self should: [aMatch moveXFrom: 3@2 to: -1@2.] 
	raise: Error   
	withMessageText: TerniLapilli errorOutOfRangePosition.
	
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 16:45:18'!
test17movingToPositionOutOfRangeRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self assert: aMatch isOver. 
	self should: [aMatch moveXFrom: 3@2 to: -1@2.] 
	raise: Error   
	withMessageText: TerniLapilli errorOutOfRangePosition.
	
	
	! !

!methodRemoval: TerniLapilliTest #test17movingToValidPositionError stamp: 'CR 11/2/2020 16:45:21'!
test17movingToValidPositionError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self assert: aMatch isOver. 
	self should: [aMatch moveXFrom: 3@2 to: -1@2.] 
	raise: Error   
	withMessageText: TerniLapilli errorOutOfRangePosition.
	
	
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 16:45:35'!
test03settingPieceIsInValidRange

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setXAt: -1@0.] 
	raise: Error   
	withMessageText: TerniLapilli errorOutOfRangePosition.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 16:45:51'!
test03settingPieceToPositionOutOfRangeRaisesError

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setXAt: -1@0.] 
	raise: Error   
	withMessageText: TerniLapilli errorOutOfRangePosition.! !

!methodRemoval: TerniLapilliTest #test03settingPieceIsInValidRange stamp: 'CR 11/2/2020 16:45:53'!
test03settingPieceIsInValidRange

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setXAt: -1@0.] 
	raise: Error   
	withMessageText: TerniLapilli errorOutOfRangePosition.!

!methodRemoval: TerniLapilliTest #test03verifyPointIsInValidRange stamp: 'CR 11/2/2020 16:45:55'!
test03verifyPointIsInValidRange

	| aJustStartedMatch |
	aJustStartedMatch := TerniLapilli newGame.
	
	self should: [aJustStartedMatch setXAt: -1@0.] 
	raise: Error   
	withMessageText: TerniLapilli errorOutOfRangePosition.!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 16:46:05'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 16:46:05'!
PASSED!

!testRun: #TerniLapilliTest #test03settingPieceToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 16:46:05'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 16:46:05'!
PASSED!

!testRun: #TerniLapilliTest #test05playerTryingToPlayOnWrongTurnRaisesError stamp: 'CR 11/2/2020 16:46:05'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 16:46:05'!
PASSED!

!testRun: #TerniLapilliTest #test07setPieceOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 16:46:05'!
PASSED!

!testRun: #TerniLapilliTest #test08setPieceWorksCorrectly stamp: 'CR 11/2/2020 16:46:05'!
PASSED!

!testRun: #TerniLapilliTest #test09addingMoreThanSixPiecesRaisesError stamp: 'CR 11/2/2020 16:46:05'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:46:05'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:46:05'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:46:05'!
PASSED!

!testRun: #TerniLapilliTest #test13movingNonOwnedPieceRaisesError stamp: 'CR 11/2/2020 16:46:05'!
PASSED!

!testRun: #TerniLapilliTest #test14movingPieceToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 16:46:05'!
PASSED!

!testRun: #TerniLapilliTest #test15movingPieceWhenNotAllPiecesInGameRaisesError stamp: 'CR 11/2/2020 16:46:05'!
PASSED!

!testRun: #TerniLapilliTest #test16movingAfterVictoryRaisesError stamp: 'CR 11/2/2020 16:46:05'!
PASSED!

!testRun: #TerniLapilliTest #test17movingToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 16:46:05'!
FAILURE!

!testRun: #TerniLapilliTest #test17movingToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 16:46:05'!
FAILURE!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 16:46:34' prior: 50890455!
test17movingToPositionOutOfRangeRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver. 
	self should: [aMatch moveXFrom: 3@2 to: -1@2.] 
	raise: Error   
	withMessageText: TerniLapilli errorOutOfRangePosition.
	
	
	! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 16:46:38'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 16:46:38'!
PASSED!

!testRun: #TerniLapilliTest #test03settingPieceToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 16:46:38'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 16:46:38'!
PASSED!

!testRun: #TerniLapilliTest #test05playerTryingToPlayOnWrongTurnRaisesError stamp: 'CR 11/2/2020 16:46:38'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 16:46:38'!
PASSED!

!testRun: #TerniLapilliTest #test07setPieceOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 16:46:38'!
PASSED!

!testRun: #TerniLapilliTest #test08setPieceWorksCorrectly stamp: 'CR 11/2/2020 16:46:38'!
PASSED!

!testRun: #TerniLapilliTest #test09addingMoreThanSixPiecesRaisesError stamp: 'CR 11/2/2020 16:46:38'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:46:38'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:46:38'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 16:46:38'!
PASSED!

!testRun: #TerniLapilliTest #test13movingNonOwnedPieceRaisesError stamp: 'CR 11/2/2020 16:46:38'!
PASSED!

!testRun: #TerniLapilliTest #test14movingPieceToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 16:46:38'!
PASSED!

!testRun: #TerniLapilliTest #test15movingPieceWhenNotAllPiecesInGameRaisesError stamp: 'CR 11/2/2020 16:46:38'!
PASSED!

!testRun: #TerniLapilliTest #test16movingAfterVictoryRaisesError stamp: 'CR 11/2/2020 16:46:38'!
PASSED!

!testRun: #TerniLapilliTest #test17movingToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 16:46:38'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 16:47:36'!
test17movingToInvalidPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver. 
	self should: [aMatch moveXFrom: 3@2 to: -1@2.] 
	raise: Error   
	withMessageText: TerniLapilli errorOutOfRangePosition.
	
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 16:48:31' prior: 50890658!
test17movingToInvalidPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver. 
	self should: [aMatch moveXFrom: 3@2 to: 1@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorInvalidMovement.
	
	
	! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'CR 11/2/2020 16:48:58'!
errorInvalidMovement
	^ 'This movement is invalid!!'! !
!TerniLapilli methodsFor: 'signals' stamp: 'CR 11/2/2020 16:49:13'!
signalInvalidMovement

	^ self error: self class errorInvalidMovement! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 16:50:40' prior: 50888123!
verifyItIsAValidOMoveFrom: anInitialPosition to: aDestinationPosition

	self verifyPosition: anInitialPosition and: aDestinationPosition.
	self verifyValidMovementFrom:anInitialPosition to: aDestinationPosition. 
	self verifyCurrentPlayerO.
	self verifyPositionIsOwnedByO: anInitialPosition! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 16:50:44' prior: 50890698!
verifyItIsAValidOMoveFrom: anInitialPosition to: aDestinationPosition

	self verifyPosition: anInitialPosition and: aDestinationPosition.
	self verifyValidMovementFrom: anInitialPosition to: aDestinationPosition. 
	self verifyCurrentPlayerO.
	self verifyPositionIsOwnedByO: anInitialPosition! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 16:50:53' prior: 50888133!
verifyItIsAValidXMoveFrom: aDestinationPosition to: anInitialPosition
	
	self verifyPosition: anInitialPosition and: aDestinationPosition.			
	self verifyValidMovementFrom: anInitialPosition to: aDestinationPosition. 
	self verifyCurrentPlayerX.
	self verifyPositionIsOwnedByX: anInitialPosition! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 17:02:31'!
verifyValidMovementFrom: anInitialPosition to: aDestinationPosition
	| distanceBetweenPoints |
	distanceBetweenPoints := anInitialPosition dist: aDestinationPosition.
	(distanceBetweenPoints = 1) ifFalse: [
			((distanceBetweenPoints = 2 sqrt) and: [self isCenter: anInitialPosition or: [self isCenter: aDestinationPosition ]]) ifFalse: [self signalInvalidMovement].
		]
		! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 17:02:41' prior: 50890735!
verifyValidMovementFrom: anInitialPosition to: aDestinationPosition
	| distanceBetweenPoints |
	distanceBetweenPoints := anInitialPosition dist: aDestinationPosition.
	(distanceBetweenPoints = 1) ifFalse: [
			((distanceBetweenPoints = 2 sqrt) and: [(self isCenter: anInitialPosition) or: [self isCenter: aDestinationPosition ]]) ifFalse: [self signalInvalidMovement].
		]
		! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 17:04:59'!
moveVerticallyOrHorizontally: distanceBetweenPoints

	^ distanceBetweenPoints = 1! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 17:05:00' prior: 50890750!
verifyValidMovementFrom: anInitialPosition to: aDestinationPosition
	| distanceBetweenPoints |
	distanceBetweenPoints := anInitialPosition dist: aDestinationPosition.
	((self moveVerticallyOrHorizontally: distanceBetweenPoints)) ifFalse: [
			((distanceBetweenPoints = 2 sqrt) and: [(self isCenter: anInitialPosition) or: [self isCenter: aDestinationPosition ]]) ifFalse: [self signalInvalidMovement].
		]
		! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 17:05:14' prior: 50890771!
verifyValidMovementFrom: anInitialPosition to: aDestinationPosition
	| distanceBetweenPoints |
	distanceBetweenPoints := anInitialPosition dist: aDestinationPosition.
	(self moveVerticallyOrHorizontally: distanceBetweenPoints) ifFalse: [
			((distanceBetweenPoints = 2 sqrt) and: [(self isCenter: anInitialPosition) or: [self isCenter: aDestinationPosition ]]) ifFalse: [self signalInvalidMovement].
		]
		! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 17:05:22'!
moveDiagonally: distanceBetweenPoints

	^ distanceBetweenPoints = 2 sqrt! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 17:05:22' prior: 50890787!
verifyValidMovementFrom: anInitialPosition to: aDestinationPosition
	| distanceBetweenPoints |
	distanceBetweenPoints := anInitialPosition dist: aDestinationPosition.
	(self moveVerticallyOrHorizontally: distanceBetweenPoints) ifFalse: [
			(((self moveDiagonally: distanceBetweenPoints)) and: [(self isCenter: anInitialPosition) or: [self isCenter: aDestinationPosition ]]) ifFalse: [self signalInvalidMovement].
		]
		! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 17:05:33' prior: 50890809!
verifyValidMovementFrom: anInitialPosition to: aDestinationPosition
	| distanceBetweenPoints |
	distanceBetweenPoints := anInitialPosition dist: aDestinationPosition.
	(self moveVerticallyOrHorizontally: distanceBetweenPoints) ifFalse: [
			((self moveDiagonally: distanceBetweenPoints) and: [(self isCenter: anInitialPosition) or: [self isCenter: aDestinationPosition ]]) ifFalse: [self signalInvalidMovement].
		]
		! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 17:06:21'!
isCenter: anInitialPosition
	^ anInitialPosition = 2@2.
		! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 17:07:27'!
IsCenter: anInitialPosition or: aDestinationPosition

	^ (self isCenter: anInitialPosition) or: [self isCenter: aDestinationPosition ]! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 17:07:27' prior: 50890826!
verifyValidMovementFrom: anInitialPosition to: aDestinationPosition
	| distanceBetweenPoints |
	distanceBetweenPoints := anInitialPosition dist: aDestinationPosition.
	(self moveVerticallyOrHorizontally: distanceBetweenPoints) ifFalse: [
			((self moveDiagonally: distanceBetweenPoints) and: [self IsCenter: anInitialPosition or: aDestinationPosition]) ifFalse: [self signalInvalidMovement].
		]
		! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 17:09:00' prior: 50890855!
verifyValidMovementFrom: anInitialPosition to: aDestinationPosition
	| distanceBetweenPoints |
	distanceBetweenPoints := anInitialPosition dist: aDestinationPosition.
	(self moveVerticallyOrHorizontally: distanceBetweenPoints) ifFalse: [
			(self movingDiagonallyIsValidFrom: anInitialPosition to: aDestinationPosition) ifFalse: [self signalInvalidMovement].
		]
		! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 17:10:03' prior: 50890871!
verifyValidMovementFrom: anInitialPosition to: aDestinationPosition
	| distanceBetweenPoints |
	distanceBetweenPoints := anInitialPosition dist: aDestinationPosition.
	(self movingVerticallyOrHorizontallyIsValidFrom: anInitialPosition to: aDestinationPosition) ifFalse: [
			(self movingDiagonallyIsValidFrom: anInitialPosition to: aDestinationPosition) ifFalse: [self signalInvalidMovement].
		]
		! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 17:10:56'!
movingDiagonallyIsValidFrom: anInitialPosition to: aDestinationPosition
	| distanceBetweenPoints |
	distanceBetweenPoints := anInitialPosition dist: aDestinationPosition.	
	^ (self moveDiagonally: distanceBetweenPoints) and: [self IsCenter: anInitialPosition or: aDestinationPosition].! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 17:11:28'!
movingVerticallyOrHorizontallyIsValidFrom: anInitialPosition to: aDestinationPosition
	| distanceBetweenPoints |
	distanceBetweenPoints := anInitialPosition dist: aDestinationPosition.
	^ distanceBetweenPoints = 1.! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 17:11:42' prior: 50890913!
movingVerticallyOrHorizontallyIsValidFrom: anInitialPosition to: aDestinationPosition
	^ anInitialPosition dist: aDestinationPosition = 1.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 17:12:14'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 17:12:14'!
PASSED!

!testRun: #TerniLapilliTest #test03settingPieceToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 17:12:14'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 17:12:14'!
PASSED!

!testRun: #TerniLapilliTest #test05playerTryingToPlayOnWrongTurnRaisesError stamp: 'CR 11/2/2020 17:12:14'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 17:12:14'!
PASSED!

!testRun: #TerniLapilliTest #test07setPieceOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 17:12:14'!
PASSED!

!testRun: #TerniLapilliTest #test08setPieceWorksCorrectly stamp: 'CR 11/2/2020 17:12:14'!
PASSED!

!testRun: #TerniLapilliTest #test09addingMoreThanSixPiecesRaisesError stamp: 'CR 11/2/2020 17:12:14'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:12:14'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:12:14'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:12:14'!
PASSED!

!testRun: #TerniLapilliTest #test13movingNonOwnedPieceRaisesError stamp: 'CR 11/2/2020 17:12:14'!
FAILURE!

!testRun: #TerniLapilliTest #test14movingPieceToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 17:12:14'!
FAILURE!

!testRun: #TerniLapilliTest #test15movingPieceWhenNotAllPiecesInGameRaisesError stamp: 'CR 11/2/2020 17:12:14'!
PASSED!

!testRun: #TerniLapilliTest #test16movingAfterVictoryRaisesError stamp: 'CR 11/2/2020 17:12:14'!
PASSED!

!testRun: #TerniLapilliTest #test17movingToInvalidPositionRaisesError stamp: 'CR 11/2/2020 17:12:14'!
FAILURE!

!testRun: #TerniLapilliTest #test17movingToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 17:12:14'!
PASSED!

!testRun: #TerniLapilliTest #test14movingPieceToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 17:12:29'!
FAILURE!

!testRun: #TerniLapilliTest #test14movingPieceToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 17:12:29'!
FAILURE!
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 17:13:21' prior: 50890923!
movingVerticallyOrHorizontallyIsValidFrom: anInitialPosition to: aDestinationPosition
	^ (anInitialPosition dist: aDestinationPosition) = 1.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 17:13:25'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 17:13:25'!
PASSED!

!testRun: #TerniLapilliTest #test03settingPieceToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 17:13:25'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 17:13:25'!
PASSED!

!testRun: #TerniLapilliTest #test05playerTryingToPlayOnWrongTurnRaisesError stamp: 'CR 11/2/2020 17:13:25'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 17:13:25'!
PASSED!

!testRun: #TerniLapilliTest #test07setPieceOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 17:13:25'!
PASSED!

!testRun: #TerniLapilliTest #test08setPieceWorksCorrectly stamp: 'CR 11/2/2020 17:13:25'!
PASSED!

!testRun: #TerniLapilliTest #test09addingMoreThanSixPiecesRaisesError stamp: 'CR 11/2/2020 17:13:25'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:13:25'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:13:25'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:13:25'!
PASSED!

!testRun: #TerniLapilliTest #test13movingNonOwnedPieceRaisesError stamp: 'CR 11/2/2020 17:13:25'!
PASSED!

!testRun: #TerniLapilliTest #test14movingPieceToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 17:13:25'!
PASSED!

!testRun: #TerniLapilliTest #test15movingPieceWhenNotAllPiecesInGameRaisesError stamp: 'CR 11/2/2020 17:13:25'!
PASSED!

!testRun: #TerniLapilliTest #test16movingAfterVictoryRaisesError stamp: 'CR 11/2/2020 17:13:25'!
PASSED!

!testRun: #TerniLapilliTest #test17movingToInvalidPositionRaisesError stamp: 'CR 11/2/2020 17:13:25'!
PASSED!

!testRun: #TerniLapilliTest #test17movingToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 17:13:25'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 17:13:39'!
test18movingToInvalidPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver. 
	self should: [aMatch moveXFrom: 3@2 to: 1@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorInvalidMovement.
	
	
	! !

!methodRemoval: TerniLapilliTest #test17movingToInvalidPositionRaisesError stamp: 'CR 11/2/2020 17:13:43'!
test17movingToInvalidPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver. 
	self should: [aMatch moveXFrom: 3@2 to: 1@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorInvalidMovement.
	
	
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 17:16:02' prior: 50891067!
test18movingToInvalidPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	aMatch moveXFrom: 3@2 to: 3@3.
	self deny: aMatch isOver. 
	
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 17:16:30'!
test19movingToInvalidPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	aMatch moveXFrom: 3@2 to: 3@3.
	self deny: aMatch isOver. 
	
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 17:13:39' prior: 50891096!
test18movingToInvalidPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver. 
	self should: [aMatch moveXFrom: 3@2 to: 1@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorInvalidMovement.
	
	
	! !

!testRun: #TerniLapilliTest #test18movingToInvalidPositionRaisesError stamp: 'CR 11/2/2020 17:16:43'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 17:17:33'!
test19movingChangesOwnershipCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	aMatch moveXFrom: 3@2 to: 3@3.
	self deny: aMatch isOver. 
	self assert: (aMatch doesPositionBelongToX: 3@3).
	self deny: (aMatch doesPositionBelongToX: 3@2).
	
	
	! !

!methodRemoval: TerniLapilliTest #test19movingToInvalidPositionRaisesError stamp: 'CR 11/2/2020 17:17:50'!
test19movingToInvalidPositionRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	aMatch moveXFrom: 3@2 to: 3@3.
	self deny: aMatch isOver. 
	
	
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 17:19:03' prior: 50891137!
test19movingChangesOwnershipCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	aMatch moveXFrom: 3@2 to: 3@3.
	self deny: aMatch isOver. 
	self assert: (aMatch doesPositionBelongToX: 3@3).
	self deny: (aMatch doesPositionBelongToX: 3@2).
	
	
	! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 17:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 17:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test03settingPieceToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 17:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 17:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test05playerTryingToPlayOnWrongTurnRaisesError stamp: 'CR 11/2/2020 17:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 17:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test07setPieceOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 17:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test08setPieceWorksCorrectly stamp: 'CR 11/2/2020 17:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test09addingMoreThanSixPiecesRaisesError stamp: 'CR 11/2/2020 17:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test13movingNonOwnedPieceRaisesError stamp: 'CR 11/2/2020 17:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test14movingPieceToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 17:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test15movingPieceWhenNotAllPiecesInGameRaisesError stamp: 'CR 11/2/2020 17:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test16movingAfterVictoryRaisesError stamp: 'CR 11/2/2020 17:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test17movingToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 17:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test18movingToInvalidPositionRaisesError stamp: 'CR 11/2/2020 17:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test19movingChangesOwnershipCorrectly stamp: 'CR 11/2/2020 17:19:06'!
FAILURE!

!testRun: #TerniLapilliTest #test19movingChangesOwnershipCorrectly stamp: 'CR 11/2/2020 17:19:06'!
FAILURE!

!testRun: #TerniLapilliTest #test19movingChangesOwnershipCorrectly stamp: 'CR 11/2/2020 17:19:28'!
FAILURE!

!testRun: #TerniLapilliTest #test19movingChangesOwnershipCorrectly stamp: 'CR 11/2/2020 17:19:28'!
FAILURE!

aMatch isOver. !

(aMatch doesPositionBelongToX: 3@3).!

(aMatch doesPositionBelongToX: 3@2)!

gameBoard at: aPositionToRelease!

gameBoard at: aPositionToRelease!

gameBoard at: aPositionToRelease!

(gameBoard at: aPoint) itsOwnerIsO.!
!TerniLapilli methodsFor: 'accessing' stamp: 'CR 11/2/2020 17:27:16' prior: 50888293!
doesPositionBelongToX: aPointToVerifyOwnerShip 
	^ true! !
!TerniLapilli methodsFor: 'accessing' stamp: 'CR 11/2/2020 17:27:26' prior: 50888288!
doesPositionBelongToO: aPointToVerifyOwnerShip 
	^ (gameBoard at: aPointToVerifyOwnerShip) itsOwnerIsO.! !
!TerniLapilli methodsFor: 'accessing' stamp: 'CR 11/2/2020 17:27:33' prior: 50891261!
doesPositionBelongToX: aPointToVerifyOwnerShip 
	^ (gameBoard at: aPointToVerifyOwnerShip) itsOwnerIsX.! !
!PlayerO methodsFor: 'nil' stamp: 'CR 11/2/2020 17:27:45'!
itsOwnerIsX
	^false.! !
!Nobody methodsFor: 'nil' stamp: 'CR 11/2/2020 17:27:51'!
itsOwnerIsX
	^false.! !

!methodRemoval: PlayerO #itsOwnerIsX stamp: 'CR 11/2/2020 17:28:11'!
itsOwnerIsX
	^false.!

!methodRemoval: Nobody #itsOwnerIsX stamp: 'CR 11/2/2020 17:28:15'!
itsOwnerIsX
	^false.!
!TerniLapilliPosition methodsFor: 'testing' stamp: 'CR 11/2/2020 17:28:35'!
itsOwnerIsX
	^owner isX.! !
!PlayerO methodsFor: 'nil' stamp: 'CR 11/2/2020 17:28:46'!
isX
	^false.! !
!PlayerX methodsFor: 'nil' stamp: 'CR 11/2/2020 17:28:53'!
isX
	^true.! !
!Nobody methodsFor: 'nil' stamp: 'CR 11/2/2020 17:29:02'!
isX
	^false.! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 17:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 17:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test03settingPieceToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 17:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 17:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test05playerTryingToPlayOnWrongTurnRaisesError stamp: 'CR 11/2/2020 17:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 17:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test07setPieceOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 17:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test08setPieceWorksCorrectly stamp: 'CR 11/2/2020 17:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test09addingMoreThanSixPiecesRaisesError stamp: 'CR 11/2/2020 17:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test13movingNonOwnedPieceRaisesError stamp: 'CR 11/2/2020 17:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test14movingPieceToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 17:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test15movingPieceWhenNotAllPiecesInGameRaisesError stamp: 'CR 11/2/2020 17:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test16movingAfterVictoryRaisesError stamp: 'CR 11/2/2020 17:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test17movingToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 17:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test18movingToInvalidPositionRaisesError stamp: 'CR 11/2/2020 17:29:18'!
PASSED!

!testRun: #TerniLapilliTest #test19movingChangesOwnershipCorrectly stamp: 'CR 11/2/2020 17:29:18'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 17:31:18' prior: 50891164!
test19movingChangesOwnershipCorrectly

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	aMatch moveXFrom: 3@2 to: 3@3.
	self deny: aMatch isOver. 
	self assert: (aMatch doesPositionBelongToX: 3@3).
	self deny: (aMatch doesPositionBelongToX: 3@2).
	
	
	! !

!methodRemoval: TerniLapilliTest #test13movingNonOwnedPieceRaisesError stamp: 'CR 11/2/2020 17:33:26'!
test13movingNonOwnedPieceRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	self should: [aMatch moveXFrom: 2@3 to: 1@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorCurrentPlayerDoesntOwnPosition. 
	
	
	!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 17:34:06'!
test13movingNonOwnedPieceRaisesError

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	self deny: aMatch isOver.
	self should: [aMatch moveXFrom: 2@3 to: 1@3.] 
	raise: Error   
	withMessageText: TerniLapilli errorCurrentPlayerDoesntOwnPosition. 
	
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 17:34:30'!
test20winnerIsCorrect

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 2@3.
	aMatch moveXFrom: 3@2 to: 3@3.
	self deny: aMatch isOver. 
	self assert: (aMatch doesPositionBelongToX: 3@3).
	self deny: (aMatch doesPositionBelongToX: 3@2).
	
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 17:35:32' prior: 50891413!
test20winnerIsCorrect

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 1@3.
	self assert: aMatch isOver.
	self deny: aMatch xWins.
	self assert: aMatch oWins.
	
	
	! !

!classDefinition: #TerniLapilli category: 'Ejercicio - TerniLapilli' stamp: 'CR 11/2/2020 17:36:29'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'gameState currentPlayer gameBoard piecesInTheGame winner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio - TerniLapilli'!
!TerniLapilli methodsFor: 'nil' stamp: 'CR 11/2/2020 17:36:26'!
xWins
	^ winner isX. ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 17:36:39'!
OWins
	^ winner isX. ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 17:36:43'!
XWins
	^ winner isX. ! !

!methodRemoval: TerniLapilli #xWins stamp: 'CR 11/2/2020 17:36:46'!
xWins
	^ winner isX. !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CR 11/2/2020 17:36:52' prior: 50891453!
OWins
	^ winner isO. ! !
!TerniLapilli methodsFor: 'initialization' stamp: 'CR 11/2/2020 17:37:12' prior: 50889652!
initializeGame
	piecesInTheGame := 0.
	currentPlayer := PlayerX ofGame: self.
	gameState := NotAllPiecesInGame ofGame: self.
	winner := Nobody ofGame: self.
	self initializeBoard.! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 17:37:27' prior: 50891428!
test20winnerIsCorrect

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 1@3.
	self assert: aMatch isOver.
	self deny: aMatch XWins.
	self assert: aMatch OWins.
	
	
	! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 17:37:42' prior: 50889627!
verifyIfCurrentPlayerWins: lastPosition
	| doesCurrentPlayerWin |
	doesCurrentPlayerWin := self lastPositionFormsALine: lastPosition.
	doesCurrentPlayerWin ifTrue: [
		gameState := GameOver ofGame: self.
		winner := currentPlayer.
		]! !

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test03settingPieceToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test05playerTryingToPlayOnWrongTurnRaisesError stamp: 'CR 11/2/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test07setPieceOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test08setPieceWorksCorrectly stamp: 'CR 11/2/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test09addingMoreThanSixPiecesRaisesError stamp: 'CR 11/2/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test13movingNonOwnedPieceRaisesError stamp: 'CR 11/2/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test14movingPieceToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test15movingPieceWhenNotAllPiecesInGameRaisesError stamp: 'CR 11/2/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test16movingAfterVictoryRaisesError stamp: 'CR 11/2/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test17movingToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test18movingToInvalidPositionRaisesError stamp: 'CR 11/2/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test19movingChangesOwnershipCorrectly stamp: 'CR 11/2/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test20winnerIsCorrect stamp: 'CR 11/2/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 17:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 17:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test03settingPieceToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 17:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 17:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test05playerTryingToPlayOnWrongTurnRaisesError stamp: 'CR 11/2/2020 17:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 17:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test07setPieceOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 17:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test08setPieceWorksCorrectly stamp: 'CR 11/2/2020 17:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test09addingMoreThanSixPiecesRaisesError stamp: 'CR 11/2/2020 17:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test13movingNonOwnedPieceRaisesError stamp: 'CR 11/2/2020 17:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test14movingPieceToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 17:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test15movingPieceWhenNotAllPiecesInGameRaisesError stamp: 'CR 11/2/2020 17:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test16movingAfterVictoryRaisesError stamp: 'CR 11/2/2020 17:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test17movingToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 17:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test18movingToInvalidPositionRaisesError stamp: 'CR 11/2/2020 17:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test19movingChangesOwnershipCorrectly stamp: 'CR 11/2/2020 17:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test20winnerIsCorrect stamp: 'CR 11/2/2020 17:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 17:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 17:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test03settingPieceToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 17:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 17:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test05playerTryingToPlayOnWrongTurnRaisesError stamp: 'CR 11/2/2020 17:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 17:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test07setPieceOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 17:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test08setPieceWorksCorrectly stamp: 'CR 11/2/2020 17:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test09addingMoreThanSixPiecesRaisesError stamp: 'CR 11/2/2020 17:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test13movingNonOwnedPieceRaisesError stamp: 'CR 11/2/2020 17:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test14movingPieceToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 17:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test15movingPieceWhenNotAllPiecesInGameRaisesError stamp: 'CR 11/2/2020 17:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test16movingAfterVictoryRaisesError stamp: 'CR 11/2/2020 17:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test17movingToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 17:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test18movingToInvalidPositionRaisesError stamp: 'CR 11/2/2020 17:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test19movingChangesOwnershipCorrectly stamp: 'CR 11/2/2020 17:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test20winnerIsCorrect stamp: 'CR 11/2/2020 17:37:52'!
PASSED!

!testRun: #TerniLapilliTest #test20winnerIsCorrect stamp: 'CR 11/2/2020 17:37:55'!
PASSED!

----SNAPSHOT----(2 November 2020 17:38:08) CuisUniversity-4384.image priorSource: 17794035!

!testRun: #TerniLapilliTest #test20winnerIsCorrect stamp: 'CR 11/2/2020 17:38:12'!
PASSED!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 17:38:17'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 17:38:17'!
PASSED!

!testRun: #TerniLapilliTest #test03settingPieceToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 17:38:17'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 17:38:17'!
PASSED!

!testRun: #TerniLapilliTest #test05playerTryingToPlayOnWrongTurnRaisesError stamp: 'CR 11/2/2020 17:38:17'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 17:38:18'!
PASSED!

!testRun: #TerniLapilliTest #test07setPieceOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 17:38:18'!
PASSED!

!testRun: #TerniLapilliTest #test08setPieceWorksCorrectly stamp: 'CR 11/2/2020 17:38:18'!
PASSED!

!testRun: #TerniLapilliTest #test09addingMoreThanSixPiecesRaisesError stamp: 'CR 11/2/2020 17:38:18'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:38:18'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:38:18'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:38:18'!
PASSED!

!testRun: #TerniLapilliTest #test13movingNonOwnedPieceRaisesError stamp: 'CR 11/2/2020 17:38:18'!
PASSED!

!testRun: #TerniLapilliTest #test14movingPieceToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 17:38:18'!
PASSED!

!testRun: #TerniLapilliTest #test15movingPieceWhenNotAllPiecesInGameRaisesError stamp: 'CR 11/2/2020 17:38:18'!
PASSED!

!testRun: #TerniLapilliTest #test16movingAfterVictoryRaisesError stamp: 'CR 11/2/2020 17:38:18'!
PASSED!

!testRun: #TerniLapilliTest #test17movingToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 17:38:18'!
PASSED!

!testRun: #TerniLapilliTest #test18movingToInvalidPositionRaisesError stamp: 'CR 11/2/2020 17:38:18'!
PASSED!

!testRun: #TerniLapilliTest #test19movingChangesOwnershipCorrectly stamp: 'CR 11/2/2020 17:38:18'!
PASSED!

!testRun: #TerniLapilliTest #test20winnerIsCorrect stamp: 'CR 11/2/2020 17:38:18'!
PASSED!
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 17:39:15'!
test21thereIsNoWinnerWhenGameIsNotOver

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	aMatch setOAt: 1@3.
	self assert: aMatch isOver.
	self deny: aMatch XWins.
	self assert: aMatch OWins.
	
	
	! !
!TerniLapilliTest methodsFor: 'tests' stamp: 'CR 11/2/2020 17:39:28' prior: 50891777!
test21thereIsNoWinnerWhenGameIsNotOver

	| aMatch |
	aMatch := TerniLapilli newGame.
	aMatch setXAt: 2@1.
	aMatch setOAt: 3@1.
	aMatch setXAt: 1@2.
	aMatch setOAt: 2@2.
	aMatch setXAt: 3@2.
	self deny: aMatch isOver.
	self deny: aMatch XWins.
	self deny: aMatch OWins.
	
	
	! !

!testRun: #TerniLapilliTest #test21thereIsNoWinnerWhenGameIsNotOver stamp: 'CR 11/2/2020 17:39:30'!
PASSED!

!testRun: #TerniLapilliTest #test01aNewGameIsNotOver stamp: 'CR 11/2/2020 17:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test02XstartsPlaying stamp: 'CR 11/2/2020 17:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test03settingPieceToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 17:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAndGameChangesTurnToO stamp: 'CR 11/2/2020 17:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test05playerTryingToPlayOnWrongTurnRaisesError stamp: 'CR 11/2/2020 17:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test06raisesErrorWhenOStarts stamp: 'CR 11/2/2020 17:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test07setPieceOnAlreadyOccupiedPositionRaisesError stamp: 'CR 11/2/2020 17:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test08setPieceWorksCorrectly stamp: 'CR 11/2/2020 17:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test09addingMoreThanSixPiecesRaisesError stamp: 'CR 11/2/2020 17:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test10horizontalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test11verticalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test12diagonalVictoryWorksCorrectly stamp: 'CR 11/2/2020 17:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test13movingNonOwnedPieceRaisesError stamp: 'CR 11/2/2020 17:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test14movingPieceToOccupiedPositionRaisesError stamp: 'CR 11/2/2020 17:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test15movingPieceWhenNotAllPiecesInGameRaisesError stamp: 'CR 11/2/2020 17:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test16movingAfterVictoryRaisesError stamp: 'CR 11/2/2020 17:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test17movingToPositionOutOfRangeRaisesError stamp: 'CR 11/2/2020 17:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test18movingToInvalidPositionRaisesError stamp: 'CR 11/2/2020 17:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test19movingChangesOwnershipCorrectly stamp: 'CR 11/2/2020 17:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test20winnerIsCorrect stamp: 'CR 11/2/2020 17:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test21thereIsNoWinnerWhenGameIsNotOver stamp: 'CR 11/2/2020 17:39:33'!
PASSED!
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 17:40:22' prior: 50888062!
verifyPositionIsOwnedByO: aPositionToBeCheckedItsOwnership
	(gameBoard at: aPositionToBeCheckedItsOwnership) failIfNotOwnedByO. 
	
! !
!TerniLapilli methodsFor: 'verifications' stamp: 'CR 11/2/2020 17:40:29' prior: 50888068!
verifyPositionIsOwnedByX: aPositionToBeCheckedItsOwnership
	(gameBoard at: aPositionToBeCheckedItsOwnership) failIfNotOwnedByX. 
	
! !
!TerniLapilli methodsFor: 'testing' stamp: 'CR 11/2/2020 17:40:58' prior: 50890842!
isCenter: aPositionToCheckIfItsTheCenterOfBoard
	^ aPositionToCheckIfItsTheCenterOfBoard = 2@2.
		! !

----SNAPSHOT----(2 November 2020 17:41:56) CuisUniversity-4384.image priorSource: 17921697!

----QUIT----(2 November 2020 17:42:24) CuisUniversity-4384.image priorSource: 17927877!

----STARTUP---- (4 November 2020 22:57:32) as /Users/celeste/facultad/ing1/si-exercises/CuisUniversity-4384.image!


----End fileIn of /Users/celeste/facultad/ing1/si-exercises/18 - Portfolio/Portfolio-Ejercicio.st----!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/4/2020 23:03:22' prior: 50892119!
balance

	^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'CR 11/4/2020 23:04:55'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions deposits'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'CR 11/4/2020 23:04:57'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions deposits withdraws'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CR 11/4/2020 23:04:53' prior: 50892110!
register: aTransaction

	deposits add: aTransaction.
	withdraws add: aTransaction.
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CR 11/4/2020 23:05:36' prior: 50892156!
register: aTransaction

	deposits add: aTransaction.
	withdraws add: aTransaction.
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CR 11/4/2020 23:06:38'!
registerByAccountType: aTransaction

	deposits add: aTransaction.
	withdraws add: aTransaction! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CR 11/4/2020 23:06:38' prior: 50892162!
register: aTransaction

	self registerByAccountType: aTransaction.
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CR 11/4/2020 23:06:47' prior: 50892174!
register: aTransactionToRegister

	self registerByAccountType: aTransactionToRegister.
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CR 11/4/2020 23:07:37' prior: 50892168!
registerByAccountType: aTransactionToRegister

	deposits addIfItsADeposit: aTransactionToRegister.
	withdraws addIfItsAWithdraw: aTransactionToRegister.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CR 11/4/2020 23:08:27' prior: 50892186!
registerByAccountType: aTransactionToRegister

	aTransactionToRegister addIfItsADeposit: deposits.
	aTransactionToRegister addIfItsAWithdraw: withdraws.! !
!Deposit methodsFor: 'nil' stamp: 'CR 11/4/2020 23:09:37'!
addIfItsADeposit: aSetOfDepositToBeAddedTo
	aSetOfDepositToBeAddedTo add: self.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'CR 11/4/2020 23:09:46' prior: 50892201!
addIfItsADeposit: aSetOfDepositToBeAddedTo
	aSetOfDepositToBeAddedTo add: self.! !
!Withdraw methodsFor: 'nil' stamp: 'CR 11/4/2020 23:10:12'!
addIfItsAWithdraw: aSetOfWithdrawsToBeAddedTo
	aSetOfWithdrawsToBeAddedTo add: self.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'CR 11/4/2020 23:10:28'!
addIfItsADeposit: aSetOfDepositsToBeAddedTo! !
!Deposit methodsFor: 'nil' stamp: 'CR 11/4/2020 23:10:41'!
addIfItsAWithdraw: aSetOfWithdrawsToBeAddedTo
! !
!AccountTransaction methodsFor: 'nil' stamp: 'CR 11/4/2020 23:11:37'!
addIfItsADeposit: aSetOfDepositsToBeAddedTo
	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'nil' stamp: 'CR 11/4/2020 23:11:55'!
addIfItsAWithdraw: aSetOfWithdrawsToBeAddedTo
	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'CR 11/4/2020 23:11:56' prior: 50892231!
addIfItsAWithdraw: aSetOfWithdrawsToBeAddedTo
	self subclassResponsibility.! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'CR 11/4/2020 23:12:00' prior: 50892226!
addIfItsADeposit: aSetOfDepositsToBeAddedTo
	self subclassResponsibility.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/4/2020 23:13:51' prior: 50892133!
balance

	^deposits sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ] - withdraws sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/4/2020 23:14:08' prior: 50892249!
balance

	^(deposits sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]) - withdraws sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/4/2020 23:18:18'!
sumTotalTransactionsFrom: aSetOfTransactions

	^aSetOfTransactions sum: [ :aTransactionToSumItsValue | aTransactionToSumItsValue value ] ifEmpty: [ 0 ].! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/4/2020 23:20:19' prior: 50892257!
balance

	^(self sumTotalTransactionsFrom: deposits) - (self sumTotalTransactionsFrom: withdraws).! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CR 11/4/2020 23:20:30'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/4/2020 23:20:30'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/4/2020 23:20:30'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CR 11/4/2020 23:20:30'!
ERROR!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CR 11/4/2020 23:20:30'!
ERROR!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CR 11/4/2020 23:20:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/4/2020 23:20:30'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'CR 11/4/2020 23:20:59' prior: 50892105 overrides: 16896425!
initialize

	deposits := OrderedCollection new.
	withdraws := OrderedCollection new.! !

Object subclass: #ReceptiveAccount
	instanceVariableNames: 'deposits withdraws'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'CR 11/4/2020 23:21:04'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'deposits withdraws'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CR 11/4/2020 23:21:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/4/2020 23:21:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/4/2020 23:21:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CR 11/4/2020 23:21:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CR 11/4/2020 23:21:07'!
ERROR!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CR 11/4/2020 23:21:07'!
ERROR!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/4/2020 23:21:07'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'CR 11/4/2020 23:22:20' prior: 50892124!
hasRegistered: aTransactionToCheckIfRegistered

	^ (deposits includes: aTransactionToCheckIfRegistered) or: [withdraws includes: aTransactionToCheckIfRegistered].
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CR 11/4/2020 23:22:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/4/2020 23:22:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/4/2020 23:22:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CR 11/4/2020 23:22:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CR 11/4/2020 23:22:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CR 11/4/2020 23:22:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/4/2020 23:22:23'!
ERROR!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/4/2020 23:22:23'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CR 11/4/2020 23:23:12' prior: 50892115!
transactions 

	^ deposits copy union: (withdraws copy).! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CR 11/4/2020 23:23:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/4/2020 23:23:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/4/2020 23:23:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CR 11/4/2020 23:23:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CR 11/4/2020 23:23:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CR 11/4/2020 23:23:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/4/2020 23:23:14'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions private' stamp: 'CR 11/4/2020 23:25:51' prior: 50892265!
sumTotalTransactionsFrom: aSetOfTransactions

	^ aSetOfTransactions sum: [ :aTransactionToSumItsValue | aTransactionToSumItsValue value ] ifEmpty: [ 0 ].! !

----SNAPSHOT----(4 November 2020 23:26:00) CuisUniversity-4384.image priorSource: 17927970!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'CR 11/4/2020 23:26:26'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'nil' stamp: 'CR 11/4/2020 23:27:35'!
test01balanceOfAnEmptyPortfolioIsZero
	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CR 11/4/2020 23:29:13'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'CR 11/4/2020 23:29:01' prior: 50892443!
test01balanceOfAnEmptyPortfolioIsZero
	| anEmptyPortfolio |
	anEmptyPortfolio := Portfolio new. 
	
	self assert: 0 = anEmptyPortfolio balance.
	! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/4/2020 23:29:17'!
ERROR!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/4/2020 23:29:17'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/4/2020 23:29:29'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/4/2020 23:29:39' prior: 50892469!
balance
	^ 0.! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/4/2020 23:29:44'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/4/2020 23:30:05'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/4/2020 23:34:24'!
test02registerReceptiveAccountWithNoTransactionsWorksCorrectly
	| aReceptiveAccountWithNoTransactions anEmptyPortfolio |
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	aReceptiveAccountWithNoTransactions register: Deposit new.
	anEmptyPortfolio := Portfolio new. 
	
	self assert: 0 = anEmptyPortfolio balance.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/4/2020 23:35:19' prior: 50892483!
test02registerReceptiveAccountWithNoTransactionsWorksCorrectly
	| aReceptiveAccountWithNoTransactions anEmptyPortfolio |
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	anEmptyPortfolio := Portfolio new. 
	anEmptyPortfolio register: aReceptiveAccountWithNoTransactions.
	self assert: 0 = anEmptyPortfolio balance.
	! !

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:35:23'!
ERROR!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:35:23'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/4/2020 23:35:34'!
register: aReceptiveAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'CR 11/4/2020 23:36:19'!
Object subclass: #Portfolio
	instanceVariableNames: 'receptiveAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/4/2020 23:36:17' prior: 50892517!
register: aReceptiveAccountToBeAdded 
	receptiveAccounts add: aReceptiveAccountToBeAdded.! !
!Portfolio class methodsFor: 'nil' stamp: 'CR 11/4/2020 23:37:18' overrides: 16783533!
new
	^self new initialize.! !

!methodRemoval: Portfolio class #new stamp: 'CR 11/4/2020 23:37:23'!
new
	^self new initialize.!
!Portfolio methodsFor: 'nil' stamp: 'CR 11/4/2020 23:37:53' overrides: 16896425!
initialize
	receptiveAccounts := Collection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/4/2020 23:38:33' prior: 50892543 overrides: 16896425!
initialize
	receptiveAccounts := OrderedCollection new.! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/4/2020 23:39:09'!
PASSED!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:39:09'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/4/2020 23:40:19'!
test03registerReceptiveAccountWithTransactionsWorksCorrectly
	| aReceptiveAccountWithTransactions anEmptyPortfolio |
	aReceptiveAccountWithTransactions := ReceptiveAccount for: 50.
	anEmptyPortfolio := Portfolio new. 
	anEmptyPortfolio register: aReceptiveAccountWithTransactions.
	self assert: 50 = anEmptyPortfolio balance.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/4/2020 23:40:39' prior: 50892561!
test03registerReceptiveAccountWithTransactionsWorksCorrectly
	| aReceptiveAccountWithTransactions anEmptyPortfolio |
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	anEmptyPortfolio := Portfolio new. 
	anEmptyPortfolio register: aReceptiveAccountWithTransactions.
	self assert: 50 = anEmptyPortfolio balance.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/4/2020 23:41:05' prior: 50892574!
test03registerReceptiveAccountWithTransactionsWorksCorrectly
	| aReceptiveAccountWithTransactions anEmptyPortfolio |
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: (Deposit for: 50).
	anEmptyPortfolio := Portfolio new. 
	anEmptyPortfolio register: aReceptiveAccountWithTransactions.
	self assert: 50 = anEmptyPortfolio balance.
	! !

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:41:09'!
FAILURE!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:41:09'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/4/2020 23:42:24' prior: 50892496!
test02registerReceptiveAccountWithNoTransactionsWorksCorrectly
	| aReceptiveAccountWithNoTransactions aPortfolio |
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	self assert: aPortfolio balance = 0.
	self assert: aPortfolio transactions isEmpty.! !

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:42:28'!
ERROR!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:42:28'!
ERROR!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:42:51'!
ERROR!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:42:51'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/4/2020 23:42:57'!
transactions
	self shouldBeImplemented.! !

lala := #( #(2) #(3 5) )!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/4/2020 23:46:05' prior: 50892640!
transactions
	^ receptiveAccounts collect: [:aReceptiveAccountToAddItsTransactions | aReceptiveAccountToAddItsTransactions transactions] copy.! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/4/2020 23:46:10'!
PASSED!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:46:10'!
FAILURE!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:46:10'!
FAILURE!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:46:25'!
FAILURE!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:46:25'!
FAILURE!

aPortfolio transactions!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/4/2020 23:47:00' prior: 50892610!
test02registerReceptiveAccountWithNoTransactionsWorksCorrectly
	| aReceptiveAccountWithNoTransactions aPortfolio |
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	self assert: aPortfolio balance = 0.
	self assert: (aPortfolio transactions) isEmpty.! !

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:47:01'!
FAILURE!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:47:01'!
FAILURE!

(aPortfolio transactions) !

lala collect: [:lala | lala first]!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/4/2020 23:54:01' prior: 50892645!
transactions
	^ receptiveAccounts collect: [:aReceptiveAccountToAddItsTransactions | aReceptiveAccountToAddItsTransactions transactions] andFold: [:a :b | a union: b] ifEmpty: (OrderedCollection new) copy. ! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/4/2020 23:54:06'!
PASSED!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:54:06'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:54:06'!
FAILURE!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:54:06'!
FAILURE!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:54:27'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/4/2020 23:55:37' prior: 50892473!
balance
	^ receptiveAccounts sum: [:aReceptiveAccountToSum | aReceptiveAccountToSum balance] ifEmpty: [0].! !

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/4/2020 23:55:57'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:19:20'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/5/2020 00:21:02' prior: 50892587!
test03registerReceptiveAccountWithTransactionsWorksCorrectly
	| aReceptiveAccountWithTransactions aPortfolio aDeposit |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: 50 = aPortfolio balance.
	self assert: aPortfolio transactions includes: aDeposit.	
	self assert: aPortfolio transactions size = 1.! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/5/2020 00:21:04'!
PASSED!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:21:04'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:21:04'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/5/2020 00:22:06'!
test04
	| aReceptiveAccountWithTransactions aPortfolio aDeposit |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: 50 = aPortfolio balance.
	self assert: aPortfolio transactions includes: aDeposit.	
	self assert: aPortfolio transactions size = 1.! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/5/2020 00:23:06' prior: 50892741!
test03registerReceptiveAccountWithTransactionsWorksCorrectly
	| aReceptiveAccountWithTransactions aPortfolio aDeposit |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: 50 = aPortfolio balance.
	self assert: aPortfolio transactions includes: aDeposit.	
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aDeposit).! !

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:23:28'!
ERROR!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:23:28'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/5/2020 00:23:34'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/5/2020 00:23:56' prior: 50892816!
hasRegistered: aTransactionToCheckIfRegistered
	
	! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/5/2020 00:24:13' prior: 50892821!
hasRegistered: aTransactionToCheckIfRegistered
	receptiveAccounts includes: aTransactionToCheckIfRegistered. 	! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/5/2020 00:24:24'!
PASSED!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:24:24'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:24:24'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'CR 11/5/2020 00:24:24'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:24:24'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/5/2020 00:24:40' prior: 50892826!
hasRegistered: aTransactionToCheckIfRegistered
	^ receptiveAccounts includes: aTransactionToCheckIfRegistered. 	! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/5/2020 00:24:44'!
PASSED!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:24:44'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:24:44'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'CR 11/5/2020 00:24:44'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:24:44'!
FAILURE!

aPortfolio transactions includes: aDeposit.	!

aPortfolio hasRegistered: aDeposit!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/5/2020 00:25:54' prior: 50892850!
hasRegistered: aTransactionToCheckIfRegistered
	^ (receptiveAccounts transactions) includes: aTransactionToCheckIfRegistered. 	! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/5/2020 00:25:59'!
PASSED!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:25:59'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:25:59'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'CR 11/5/2020 00:25:59'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:25:59'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/5/2020 00:27:04' prior: 50892877!
hasRegistered: aTransactionToCheckIfRegistered
	^ receptiveAccounts transactions.! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/5/2020 00:27:49' prior: 50892902!
hasRegistered: aTransactionToCheckIfRegistered
	^ receptiveAccounts anySatisfy: [:aReceptiveAccount | aReceptiveAccount hasRegistered: aTransactionToCheckIfRegistered].! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/5/2020 00:27:55'!
PASSED!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:27:55'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:27:55'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CR 11/5/2020 00:27:55'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/5/2020 00:30:05' prior: 50892788!
test03registerReceptiveAccountWithTransactionsWorksCorrectly
	| aReceptiveAccountWithTransactions aPortfolio aDeposit |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: 50 = aPortfolio balance.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aDeposit).! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/5/2020 00:30:18'!
PASSED!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:30:18'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:30:18'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CR 11/5/2020 00:30:18'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/5/2020 00:33:02'!
test03registerReceptiveAccountWithOnlyDepositWorksCorrectly
	| aReceptiveAccountWithTransactions aPortfolio aDeposit |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: 50 = aPortfolio balance.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aDeposit).! !

!methodRemoval: PortfolioTest #test03registerReceptiveAccountWithTransactionsWorksCorrectly stamp: 'CR 11/5/2020 00:33:07'!
test03registerReceptiveAccountWithTransactionsWorksCorrectly
	| aReceptiveAccountWithTransactions aPortfolio aDeposit |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: 50 = aPortfolio balance.
	self assert: aPortfolio transactions size = 1.
	self assert: (aPortfolio hasRegistered: aDeposit).!

----SNAPSHOT----(5 November 2020 00:58:33) CuisUniversity-4384.image priorSource: 17944892!

----QUIT----(5 November 2020 00:58:40) CuisUniversity-4384.image priorSource: 17963159!

----STARTUP---- (5 November 2020 18:35:13) as /Users/celeste/facultad/ing1/si-exercises/CuisUniversity-4384.image!


!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'CR 11/5/2020 18:45:56'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'deposits withdraws transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/5/2020 18:45:54' prior: 50892273!
balance

	^(self sumTotalTransactionsFrom: transactions).! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/5/2020 18:47:05' prior: 50893018!
balance

	^(self calculateTotalBalanceFromTransactions).! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/5/2020 18:47:14' prior: 50893023!
balance

	^self calculateTotalBalanceFromTransactions.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/5/2020 18:47:16' prior: 50893028!
balance

	^ self calculateTotalBalanceFromTransactions.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/5/2020 18:49:23'!
calculateTotalBalanceFromTransactions
	| totalBalance |
	transactions do: [:aTransactionToCollaborateWith | aTransactionToCollaborateWith collaborateWithBalance: totalBalance].
	^ totalBalance.
	! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/5/2020 18:49:42' prior: 50893038!
calculateTotalBalanceFromTransactions
	| totalBalance |
	totalBalance := 0.
	transactions do: [:aTransactionToCollaborateWith | aTransactionToCollaborateWith collaborateWithBalance: totalBalance].
	^ totalBalance.
	! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'NR 10/17/2019 15:06:56' prior: 50892306 overrides: 16896425!
initialize

	transactions := OrderedCollection new.! !

!methodRemoval: ReceptiveAccount #registerByAccountType: stamp: 'CR 11/5/2020 18:50:19'!
registerByAccountType: aTransactionToRegister

	aTransactionToRegister addIfItsADeposit: deposits.
	aTransactionToRegister addIfItsAWithdraw: withdraws.!

!methodRemoval: ReceptiveAccount #sumTotalTransactionsFrom: stamp: 'CR 11/5/2020 18:50:22'!
sumTotalTransactionsFrom: aSetOfTransactions

	^ aSetOfTransactions sum: [ :aTransactionToSumItsValue | aTransactionToSumItsValue value ] ifEmpty: [ 0 ].!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50892389!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37' prior: 50892180!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CR 11/5/2020 18:50:56' prior: 50893084!
register: aTransactionToRegister

	transactions add: aTransactionToRegister.
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/17/2019 03:28:43' prior: 50892351!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'CR 11/5/2020 18:51:17' prior: 50893095!
hasRegistered: aTransactionToCheckIfRegistered

	^ transactions includes: aTransactionToCheckIfRegistered. 
! !

!methodRemoval: AccountTransaction #addIfItsADeposit: stamp: 'CR 11/5/2020 18:51:45'!
addIfItsADeposit: aSetOfDepositsToBeAddedTo
	self subclassResponsibility.!

!methodRemoval: AccountTransaction #addIfItsAWithdraw: stamp: 'CR 11/5/2020 18:51:47'!
addIfItsAWithdraw: aSetOfWithdrawsToBeAddedTo
	self subclassResponsibility.!
!AccountTransaction methodsFor: 'nil' stamp: 'CR 11/5/2020 18:52:36'!
collaborateWithBalance: balanceToCollaborateWith

	self subclassResponsibility.! !
!Deposit methodsFor: 'nil' stamp: 'CR 11/5/2020 18:53:03' overrides: 50893117!
collaborateWithBalance: balanceToCollaborateWith
	
	^ balanceToCollaborateWith + value. ! !

!methodRemoval: Deposit #addIfItsADeposit: stamp: 'CR 11/5/2020 18:53:12'!
addIfItsADeposit: aSetOfDepositToBeAddedTo
	aSetOfDepositToBeAddedTo add: self.!

!methodRemoval: Deposit #addIfItsAWithdraw: stamp: 'CR 11/5/2020 18:53:13'!
addIfItsAWithdraw: aSetOfWithdrawsToBeAddedTo
!

!methodRemoval: Withdraw #addIfItsADeposit: stamp: 'CR 11/5/2020 18:53:18'!
addIfItsADeposit: aSetOfDepositsToBeAddedTo!

!methodRemoval: Withdraw #addIfItsAWithdraw: stamp: 'CR 11/5/2020 18:53:20'!
addIfItsAWithdraw: aSetOfWithdrawsToBeAddedTo
	aSetOfWithdrawsToBeAddedTo add: self.!
!Withdraw methodsFor: 'receptive-account interaction' stamp: 'CR 11/5/2020 18:53:24' overrides: 50893117!
collaborateWithBalance: balanceToCollaborateWith
	
	^ balanceToCollaborateWith - value. ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CR 11/5/2020 18:53:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:53:40'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:53:40'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CR 11/5/2020 18:53:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CR 11/5/2020 18:53:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CR 11/5/2020 18:53:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/5/2020 18:53:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:53:49'!
FAILURE!

account balance!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/5/2020 18:58:00' prior: 50893047!
calculateTotalBalanceFromTransactions

	^ transactions inject: 0 into: [:totalBalance :aTransactionToCollaborateWith |
				totalBalance + aTransactionToCollaborateWith collaborateWithBalance: totalBalance].
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CR 11/5/2020 18:58:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:58:04'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:58:04'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CR 11/5/2020 18:58:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CR 11/5/2020 18:58:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CR 11/5/2020 18:58:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/5/2020 18:58:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:58:08'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/5/2020 18:58:31' prior: 50893184!
calculateTotalBalanceFromTransactions

	^ transactions inject: 0 into: [:totalBalance :aTransactionToCollaborateWith |
				totalBalance + (aTransactionToCollaborateWith collaborateWithBalance: totalBalance)].
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CR 11/5/2020 18:58:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:58:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:58:34'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CR 11/5/2020 18:58:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CR 11/5/2020 18:58:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CR 11/5/2020 18:58:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/5/2020 18:58:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:58:34'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'CR 11/5/2020 18:59:24' prior: 50893224!
calculateTotalBalanceFromTransactions

	^ transactions inject: 0 into: [:totalBalance :aTransactionToCollaborateWith |
				aTransactionToCollaborateWith collaborateWithBalance: totalBalance].
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CR 11/5/2020 18:59:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:59:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 18:59:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CR 11/5/2020 18:59:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CR 11/5/2020 18:59:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CR 11/5/2020 18:59:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/5/2020 18:59:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CR 11/5/2020 19:00:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 19:00:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/5/2020 19:00:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CR 11/5/2020 19:00:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CR 11/5/2020 19:00:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CR 11/5/2020 19:00:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/5/2020 19:00:01'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/5/2020 19:00:06'!
PASSED!

!testRun: #PortfolioTest #test02registerReceptiveAccountWithNoTransactionsWorksCorrectly stamp: 'CR 11/5/2020 19:00:06'!
PASSED!

!testRun: #PortfolioTest #test03registerReceptiveAccountWithOnlyDepositWorksCorrectly stamp: 'CR 11/5/2020 19:00:06'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'CR 11/5/2020 19:00:06'!
PASSED!

----QUIT----(5 November 2020 19:00:58) CuisUniversity-4384.image priorSource: 17963252!

----STARTUP---- (5 November 2020 20:36:58) as /Users/celeste/facultad/ing1/si-exercises/CuisUniversity-4384.image!


----QUIT----(5 November 2020 21:10:30) CuisUniversity-4384.image priorSource: 17974026!

----STARTUP---- (7 November 2020 23:17:08) as /Users/celeste/facultad/ing1/si-exercises/CuisUniversity-4384.image!


!classRemoval: #ReceptiveAccount stamp: 'CR 11/7/2020 23:17:25'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'deposits withdraws transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'CR 11/7/2020 23:17:26'!
Object subclass: #Portfolio
	instanceVariableNames: 'receptiveAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'CR 11/7/2020 23:17:26'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'CR 11/7/2020 23:17:27'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'CR 11/7/2020 23:17:27'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'CR 11/7/2020 23:17:27'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'CR 11/7/2020 23:17:28'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /Users/celeste/facultad/ing1/si-exercises/18 - Portfolio/Portfolio-Ejercicio.st----!

!methodRemoval: ReceptiveAccount #registerByAccountType: stamp: 'CR 11/7/2020 23:18:11'!
registerByAccountType: aTransactionToRegister

	aTransactionToRegister addIfItsADeposit: deposits.
	aTransactionToRegister addIfItsAWithdraw: withdraws.!
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:18:59' prior: 50893917!
register: aPortfolioToBeAdded

	self verifyThereIsNoPortfolioEntryLoop: (aPortfolioToBeAdded allPortfolioEntries).
	portfolioEntries add: aPortfolioToBeAdded.
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:21:24' prior: 50894045!
register: aPortfolioEntryToBeAdded

	aPortfolioEntryToBeAdded		verifyThereIsNoPortfolioEntryLoop.
	portfolioEntries add: aPortfolioEntryToBeAdded.
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:18:59' prior: 50894053!
register: aPortfolioToBeAdded

	self verifyThereIsNoPortfolioEntryLoop: (aPortfolioToBeAdded allPortfolioEntries).
	portfolioEntries add: aPortfolioToBeAdded.
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'BT 11/5/2020 21:44:34' prior: 50894061!
register: aReceptiveAccountToBeAdded

	self verifyThereIsNoPortfolioEntryLoop: (aReceptiveAccountToBeAdded allPortfolioEntries).
	portfolioEntries add: aReceptiveAccountToBeAdded.
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'BT 11/5/2020 21:44:34' prior: 50894069!
register: aReceptiveAccountToBeAdded

	self verifyThereIsNoPortfolioEntryLoop: (aReceptiveAccountToBeAdded allPortfolioEntries).
	portfolioEntries add: aReceptiveAccountToBeAdded.
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:24:39' prior: 50894078!
register: aPortfolioEntryToBeAdded

	aPortfolioEntryToBeAdded addIfPossibleToPortfolioEntries: self.
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:27:40'!
addIfPossibleToPortfolioEntries: aPortfolioToBeAddedTo

	aPortfolioToBeAddedTo verifyThereIsNoPortfolioEntryLoop.
	aPortfolioToBeAddedTo addToPorfolio: self.
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:27:54' prior: 50894093!
addIfPossibleToPortfolioEntries: aPortfolioToBeAddedTo

	aPortfolioToBeAddedTo verifyThereIsNoPortfolioEntryLoop: self.
	aPortfolioToBeAddedTo addToPorfolio: self.
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:28:03' prior: 50894101!
addIfPossibleToPortfolioEntries: aPortfolioToBeAddedTo

	aPortfolioToBeAddedTo verifyThereIsNoPortfolioEntryLoopWhenAdding: self.
	aPortfolioToBeAddedTo addToPorfolio: self.
	
	
	! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'CR 11/7/2020 23:28:28'!
addIfPossibleToPortfolioEntries: aPortfolioToBeAddedTo

	aPortfolioToBeAddedTo addToPorfolio: self.! !
!PortfolioEntry methodsFor: 'nil' stamp: 'CR 11/7/2020 23:28:42'!
addIfPossibleToPortfolioEntries: aPortfolioToBeAddedTo

	self subclassResponsibility.! !
!Portfolio methodsFor: 'nil' stamp: 'CR 11/7/2020 23:30:03'!
addToPorfolio: aPortfolioEntryToAdd

	portfolioEntries add: aPortfolioEntryToAdd.! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:31:45'!
verifyThereIsNoPortfolioEntryLoopWhenAdding: lala
	| allEntriesOfPortfolioThatMightCreateLoop |
	
	(portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | allEntriesOfPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop].
	
	portfoliosWhereIncluded do: [:aPortfolioWhereIncluded | 
		aPortfolioWhereIncluded verifyThereIsNoPortfolioEntryLoop: allEntriesOfPortfolioThatMightCreateLoop ].
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:34:09' prior: 50894134!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| allEntriesOfPortfolioThatMightCreateLoop |
	allEntriesOfPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop allEntries.
	(portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | allEntriesOfPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop].
	
	portfoliosWhereIncluded do: [:aPortfolioWhereIncluded | 
		aPortfolioWhereIncluded verifyThereIsNoPortfolioEntryLoop: allEntriesOfPortfolioThatMightCreateLoop ].
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:36:40' prior: 50894152!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| allEntriesOfPortfolioThatMightCreateLoop |
	allEntriesOfPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop entriesReachedByMe.
	(portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | allEntriesOfPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop].
	
	portfoliosWhereIncluded do: [:aPortfolioWhereIncluded | 
		aPortfolioWhereIncluded verifyThereIsNoPortfolioEntryLoop: allEntriesOfPortfolioThatMightCreateLoop ].
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:36:54' prior: 50894173!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| allEntriesOfPortfolioThatMightCreateLoop |
	allEntriesOfPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop entriesReachableByMe.
	(portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | allEntriesOfPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop].
	
	portfoliosWhereIncluded do: [:aPortfolioWhereIncluded | 
		aPortfolioWhereIncluded verifyThereIsNoPortfolioEntryLoop: allEntriesOfPortfolioThatMightCreateLoop ].
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:39:34' prior: 50894194!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| entriesReachableByPortfolioThatMightCreateLoop |
	entriesReachableByPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop entriesReachableIfAdded. 
	(portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | entriesReachableByPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop].
	
	portfoliosWhereIncluded do: [:aPortfolioWhereIncluded | 
		aPortfolioWhereIncluded verifyThereIsNoPortfolioEntryLoop: entriesReachableByPortfolioThatMightCreateLoop ].
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:42:05' prior: 50894216!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| entriesReachableByPortfolioThatMightCreateLoop |
	entriesReachableByPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop entriesReachableIfAdded. 
	(portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | entriesReachableByPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop].
	
	portfoliosWhereIncluded do: [:aPortfolioWhereIncluded | 
		aPortfolioWhereIncluded verifyThereIsNoPortfolioEntryLoop: entriesReachableByPortfolioThatMightCreateLoop ].
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:51:39'!
checkIfAnyPortfolioWhereIncludedAppearsIn: entriesReachableByPortfolioThatMightCreateLoop

	^ (portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | entriesReachableByPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop]! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:51:39' prior: 50894238!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| entriesReachableByPortfolioThatMightCreateLoop |
	entriesReachableByPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop entriesReachableIfAdded. 
	self checkIfAnyPortfolioWhereIncludedAppearsIn: entriesReachableByPortfolioThatMightCreateLoop.
	
	portfoliosWhereIncluded do: [:aPortfolioWhereIncluded | 
		aPortfolioWhereIncluded verifyThereIsNoPortfolioEntryLoop: entriesReachableByPortfolioThatMightCreateLoop ].
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:52:16' prior: 50894272!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| entriesReachableByPortfolioThatMightCreateLoop |
	entriesReachableByPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop entriesReachableIfAdded. 
	self checkIfAnyPortfolioWhereIncludedAppearsIn: entriesReachableByPortfolioThatMightCreateLoop.
	portfoliosWhereIncluded do: [:aPortfolioWhereIncluded | 
		aPortfolioWhereIncluded verifyThereIsNoPortfolioEntryLoop: entriesReachableByPortfolioThatMightCreateLoop ].
	
	
	! !

!methodRemoval: Portfolio #verifyThereIsNoPortfolioEntryLoop: stamp: 'CR 11/7/2020 23:52:23'!
verifyThereIsNoPortfolioEntryLoop: allEntriesOfPortfolioThatMightCreateLoop

	(portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | allEntriesOfPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop].
	
	portfoliosWhereIncluded do: [:aPortfolioWhereIncluded | 
		aPortfolioWhereIncluded verifyThereIsNoPortfolioEntryLoop: allEntriesOfPortfolioThatMightCreateLoop ].
	
	
	!
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:52:48' prior: 50894291!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| entriesReachableByPortfolioThatMightCreateLoop |
	entriesReachableByPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop entriesReachableIfAdded. 
	self checkIfAnyPortfolioWhereIncludedAppearsIn: entriesReachableByPortfolioThatMightCreateLoop.
	portfoliosWhereIncluded do: [:aPortfolioWhereIncluded | 
		aPortfolioWhereIncluded verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop ].
	
	
	! !

!methodRemoval: Portfolio #checkIfParentIsAnyOf: stamp: 'CR 11/7/2020 23:54:15'!
checkIfParentIsAnyOf: allEntriesOfPortfolioThatMightCreateLoop
	allEntriesOfPortfolioThatMightCreateLoop 
	
	
	!
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:57:31' prior: 50894327!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| entriesReachableByPortfolioThatMightCreateLoop |
	entriesReachableByPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop entriesReachableIfAdded. 
	self raiseErrorIfIncludedIn: entriesReachableByPortfolioThatMightCreateLoop.
	self checkIfAnyPortfolioWhereIncludedAppearsIn: entriesReachableByPortfolioThatMightCreateLoop.
	
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:57:38'!
checkIfAnyPortfolioWhereIncludedAppearsInL: entriesReachableByPortfolioThatMightCreateLoop

	^ (portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | entriesReachableByPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop]! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/7/2020 23:58:21' prior: 50894368!
checkIfAnyPortfolioWhereIncludedAppearsInL: entriesReachableByPortfolioThatMightCreateLoop

	^ (portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | entriesReachableByPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop]! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/8/2020 00:03:23' prior: 50894352!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| entriesReachableByPortfolioThatMightCreateLoop |
	entriesReachableByPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop entriesReachableIfAdded. 
	
	self checkIfMeOrPortfolioEntriesWhereIncludedIsIn: entriesReachableByPortfolioThatMightCreateLoop.
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/8/2020 00:05:02'!
checkIfMeOrPortfolioEntriesWhereIncludedIsIn: entriesReachableByPortfolioThatMightCreateLoop

	self raiseErrorIfIncludedIn: entriesReachableByPortfolioThatMightCreateLoop.
	portfoliosWhereIncluded do: [:portfolioWhereIncluded |  portfolioWhereIncluded checkIfMeOrPortfolioEntriesWhereIncludedIsIn: entriesReachableByPortfolioThatMightCreateLoop].

	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/8/2020 00:06:11'!
raiseErrorIfIncludedIn: entriesReachableByPortfolioThatMightCreateLoop

	(entriesReachableByPortfolioThatMightCreateLoop includes: self) ifTrue: [ self signalCantAddEntryBecauseCreatesLoop].
	
	! !

!methodRemoval: Portfolio #checkIfAnyPortfolioWhereIncludedAppearsInL: stamp: 'CR 11/8/2020 00:06:23'!
checkIfAnyPortfolioWhereIncludedAppearsInL: entriesReachableByPortfolioThatMightCreateLoop

	^ (portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | entriesReachableByPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop]!

!methodRemoval: Portfolio #checkIfAnyPortfolioWhereIncludedAppearsIn: stamp: 'CR 11/8/2020 00:06:30'!
checkIfAnyPortfolioWhereIncludedAppearsIn: entriesReachableByPortfolioThatMightCreateLoop

	^ (portfoliosWhereIncluded anySatisfy: [:aPortfolioWhereIncluded | entriesReachableByPortfolioThatMightCreateLoop includes: aPortfolioWhereIncluded]) ifTrue:[ self signalCantAddEntryBecauseCreatesLoop]!
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/8/2020 00:06:54' prior: 50894392!
verifyThereIsNoPortfolioEntryLoopWhenAdding: aPortfolioThatMightCreateLoop
	| entriesReachableByPortfolioThatMightCreateLoop |
	entriesReachableByPortfolioThatMightCreateLoop := aPortfolioThatMightCreateLoop entriesReachableIfAdded. 
	
	self checkIfMeOrPortfolioEntriesWhereIncludedAreIn: entriesReachableByPortfolioThatMightCreateLoop.
	
	! !
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/8/2020 00:07:03'!
checkIfMeOrPortfolioEntriesWhereIncludedAreIn: entriesReachableByPortfolioThatMightCreateLoop

	self raiseErrorIfIncludedIn: entriesReachableByPortfolioThatMightCreateLoop.
	portfoliosWhereIncluded do: [:portfolioWhereIncluded |  portfolioWhereIncluded checkIfMeOrPortfolioEntriesWhereIncludedIsIn: entriesReachableByPortfolioThatMightCreateLoop].

	
	! !

!methodRemoval: Portfolio #checkIfMeOrPortfolioEntriesWhereIncludedIsIn: stamp: 'CR 11/8/2020 00:07:08'!
checkIfMeOrPortfolioEntriesWhereIncludedIsIn: entriesReachableByPortfolioThatMightCreateLoop

	self raiseErrorIfIncludedIn: entriesReachableByPortfolioThatMightCreateLoop.
	portfoliosWhereIncluded do: [:portfolioWhereIncluded |  portfolioWhereIncluded checkIfMeOrPortfolioEntriesWhereIncludedIsIn: entriesReachableByPortfolioThatMightCreateLoop].

	
	!
!Portfolio methodsFor: 'transactions' stamp: 'CR 11/8/2020 00:07:23' prior: 50894466!
checkIfMeOrPortfolioEntriesWhereIncludedAreIn: entriesReachableByPortfolioThatMightCreateLoop

	self raiseErrorIfIncludedIn: entriesReachableByPortfolioThatMightCreateLoop.
	portfoliosWhereIncluded do: [:portfolioWhereIncluded |  portfolioWhereIncluded checkIfMeOrPortfolioEntriesWhereIncludedAreIn: entriesReachableByPortfolioThatMightCreateLoop].

	
	! !
!Portfolio methodsFor: 'nil' stamp: 'CR 11/8/2020 00:12:38'!
entriesReachableIfAdded

	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 00:14:34' prior: 50894509!
entriesReachableIfAdded
	| entriesReachableByMe |
	entriesReachableByMe := OrderedCollection new.
	self collectReachableEntriesAndSaveIn: entriesReachableByMe. 
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 00:32:10'!
collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	(entriesReachableByPortfoliosWhereIncluded includes: self) ifFalse: [
		entriesReachableByPortfoliosWhereIncluded add: self.
		portfolioEntries do: [:aPortfolioEntryWhoKeepsCollecting | 
			aPortfolioEntryWhoKeepsCollecting collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded.
			]
		]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 00:33:18'!
reachableEntriesAlreadyCollected: entriesReachableByPortfoliosWhereIncluded

	^ entriesReachableByPortfoliosWhereIncluded includes: self! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 00:33:18' prior: 50894521!
collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	(self reachableEntriesAlreadyCollected: entriesReachableByPortfoliosWhereIncluded) ifFalse: [
		entriesReachableByPortfoliosWhereIncluded add: self.
		portfolioEntries do: [:aPortfolioEntryWhoKeepsCollecting | 
			aPortfolioEntryWhoKeepsCollecting collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded.
			]
		]
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 00:34:27' prior: 50894544!
collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	(self reachableEntriesAlreadyCollected: entriesReachableByPortfoliosWhereIncluded) ifFalse: [
		entriesReachableByPortfoliosWhereIncluded add: self.
		portfolioEntries do: [:aPortfolioEntryWhoKeepsCollecting | 
			aPortfolioEntryWhoKeepsCollecting collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded.
			]
		].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 00:34:41' prior: 50894560!
collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	(self reachableEntriesAlreadyCollected: entriesReachableByPortfoliosWhereIncluded) ifFalse: [
		entriesReachableByPortfoliosWhereIncluded add: self.
		portfolioEntries do: [:aPortfolioEntryWhoKeepsCollecting | 
			aPortfolioEntryWhoKeepsCollecting collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded.
			].
		].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 00:36:01'!
keepCollectingAndSaveIn: entriesReachableByPortfoliosWhereIncluded
	entriesReachableByPortfoliosWhereIncluded add: self.
	portfolioEntries do: 
					[:aPortfolioEntryWhoKeepsCollecting | aPortfolioEntryWhoKeepsCollecting collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded.].

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 00:36:07' prior: 50894592!
keepCollectingAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	entriesReachableByPortfoliosWhereIncluded add: self.
	portfolioEntries do: 
					[:aPortfolioEntryWhoKeepsCollecting | aPortfolioEntryWhoKeepsCollecting collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded.].

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 00:36:38' prior: 50894576!
collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	(self reachableEntriesAlreadyCollected: entriesReachableByPortfoliosWhereIncluded) ifFalse: [
		self keepCollectingAndSaveIn: entriesReachableByPortfoliosWhereIncluded
		]
	! !

----SNAPSHOT----(8 November 2020 00:37:52) CuisUniversity-4384.image priorSource: 17974232!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 00:38:03'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:38:03'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:38:03'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:38:03'!
ERROR!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 00:38:03'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:38:03'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:38:03'!
ERROR!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 00:38:03'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:38:03'!
PASSED!

!testRun: #PortfolioTest #test09hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:38:03'!
ERROR!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 00:38:03'!
ERROR!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:38:17'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:38:56'!
test03balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aDeposit aReceptiveAccountWithNoTransactions aReceptiveAccountWithTransactions aPortfolio |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: aPortfolio balance = 50.
	! !

!methodRemoval: PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:39:07'!
test03balanceOfPortfolioWithManyReceptiveAccountWorksCorrectly
	| aDeposit aReceptiveAccountWithNoTransactions aReceptiveAccountWithTransactions aPortfolio |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: aPortfolio balance = 50.
	!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:39:25'!
test03bisbalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aDeposit aReceptiveAccountWithNoTransactions aReceptiveAccountWithTransactions aPortfolio |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: aPortfolio balance = 50.
	! !

!methodRemoval: PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 00:39:27'!
test03balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aDeposit aReceptiveAccountWithNoTransactions aReceptiveAccountWithTransactions aPortfolio |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: aPortfolio balance = 50.
	!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:39:31'!
test03bisBalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aDeposit aReceptiveAccountWithNoTransactions aReceptiveAccountWithTransactions aPortfolio |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: aPortfolio balance = 50.
	! !

!methodRemoval: PortfolioTest #test03bisbalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 00:39:33'!
test03bisbalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aDeposit aReceptiveAccountWithNoTransactions aReceptiveAccountWithTransactions aPortfolio |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: aPortfolio balance = 50.
	!

!testRun: #PortfolioTest #test03bisBalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 00:39:39'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 00:39:43'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:39:43'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:39:43'!
ERROR!

!testRun: #PortfolioTest #test03bisBalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 00:39:43'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 00:39:43'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:39:43'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:39:43'!
ERROR!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 00:39:43'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:39:43'!
PASSED!

!testRun: #PortfolioTest #test09hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:39:43'!
ERROR!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 00:39:43'!
ERROR!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:39:52'!
ERROR!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:39:52'!
ERROR!
!ReceptiveAccount methodsFor: 'nil' stamp: 'CR 11/8/2020 00:40:28'!
collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded
! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 00:40:49'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:40:49'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:40:49'!
ERROR!

!testRun: #PortfolioTest #test03bisBalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 00:40:49'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 00:40:49'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:40:49'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:40:49'!
ERROR!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 00:40:49'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:40:49'!
PASSED!

!testRun: #PortfolioTest #test09hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:40:49'!
ERROR!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 00:40:49'!
ERROR!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:40:54'!
ERROR!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:40:54'!
ERROR!
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 00:42:15' prior: 50894513!
entriesReachableIfAdded
	| entriesReachableByMe |
	entriesReachableByMe := OrderedCollection new.
	self collectReachableEntriesAndSaveIn: entriesReachableByMe. 
	^ entriesReachableByMe
	
	! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 00:42:20'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:42:20'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:42:20'!
ERROR!

!testRun: #PortfolioTest #test03bisBalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 00:42:20'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 00:42:20'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:42:20'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:42:20'!
ERROR!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 00:42:20'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:42:20'!
PASSED!

!testRun: #PortfolioTest #test09hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:42:20'!
ERROR!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 00:42:20'!
ERROR!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:42:25'!
ERROR!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:42:25'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'CR 11/8/2020 00:43:06' prior: 50893948 overrides: 16896425!
initialize
	portfolioEntries := OrderedCollection new.
	portfoliosWhereIncluded := OrderedCollection new.! !
!Portfolio methodsFor: 'adding to portfolio' stamp: 'CR 11/8/2020 00:43:57' prior: 50894110 overrides: 50894124!
addIfPossibleToPortfolioEntries: aPortfolioToBeAddedTo

	aPortfolioToBeAddedTo verifyThereIsNoPortfolioEntryLoopWhenAdding: self.
	aPortfolioToBeAddedTo addToPorfolio: self.
	portfoliosWhereIncluded add: aPortfolioToBeAddedTo.
	
	
	! !
!Portfolio methodsFor: 'adding to portfolio' stamp: 'CR 11/8/2020 00:44:51'!
addNewPortfolioWhereIncluded: aPortfolioToBeAddedTo

	^ portfoliosWhereIncluded add: aPortfolioToBeAddedTo! !
!Portfolio methodsFor: 'adding to portfolio' stamp: 'CR 11/8/2020 00:44:51' prior: 50894993 overrides: 50894124!
addIfPossibleToPortfolioEntries: aPortfolioToBeAddedTo

	aPortfolioToBeAddedTo verifyThereIsNoPortfolioEntryLoopWhenAdding: self.
	aPortfolioToBeAddedTo addToPorfolio: self.
	self addNewPortfolioWhereIncluded: aPortfolioToBeAddedTo.
	
	
	! !
!Portfolio methodsFor: 'adding to portfolio' stamp: 'CR 11/8/2020 00:44:58' prior: 50895003!
addNewPortfolioWhereIncluded: aPortfolioToBeAddedTo

	portfoliosWhereIncluded add: aPortfolioToBeAddedTo! !

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:45:08'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 00:45:10'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:45:10'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:45:10'!
PASSED!

!testRun: #PortfolioTest #test03bisBalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 00:45:10'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 00:45:10'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:45:10'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:45:10'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 00:45:10'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:45:10'!
PASSED!

!testRun: #PortfolioTest #test09hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:45:10'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 00:45:10'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:46:53'!
test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aDeposit aReceptiveAccountWithNoTransactions aReceptiveAccountWithTransactions aPortfolio |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: aPortfolio balance = 50.
	! !

!methodRemoval: PortfolioTest #test03bisBalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 00:46:56'!
test03bisBalanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aDeposit aReceptiveAccountWithNoTransactions aReceptiveAccountWithTransactions aPortfolio |
	aDeposit := Deposit for: 50.
	aReceptiveAccountWithTransactions := ReceptiveAccount new.
	aReceptiveAccountWithTransactions register: aDeposit.
	
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: aPortfolio balance = 50.
	!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 00:46:59'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:46:59'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:46:59'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 00:46:59'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 00:46:59'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:46:59'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:46:59'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 00:46:59'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:46:59'!
PASSED!

!testRun: #PortfolioTest #test09hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:46:59'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 00:46:59'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:48:28'!
test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly
	| aPortfolioWithTwoAccounts aPortfolioWithMany |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithMany := Portfolio new. 
	aPortfolioWithMany register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithMany register: aPortfolioWithTwoAccounts.
	
	self assert: (aPortfolioWithMany transactions size) = 2.
	self assert: (aPortfolioWithMany transactions includes: depositOfHundred).	
	self assert: (aPortfolioWithMany transactions includes: depositOfFifty).	! !

!methodRemoval: PortfolioTest #test09hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 00:48:34'!
test09hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly
	| aPortfolioWithTwoAccounts aPortfolioWithMany |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithMany := Portfolio new. 
	aPortfolioWithMany register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithMany register: aPortfolioWithTwoAccounts.
	
	self assert: (aPortfolioWithMany transactions size) = 2.
	self assert: (aPortfolioWithMany transactions includes: depositOfHundred).	
	self assert: (aPortfolioWithMany transactions includes: depositOfFifty).	!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:50:29' prior: 50895076!
test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aReceptiveAccountWithNoTransactions aReceptiveAccountWithTransactions aPortfolio |
	
	aReceptiveAccountWithTransactions register: depositOfFifty.
	
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	aPortfolio register: aReceptiveAccountWithTransactions.
	self assert: aPortfolio balance = 50.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:50:59' prior: 50895215!
test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aReceptiveAccountWithNoTransactions aPortfolio |
	
	aReceptiveAccountWithNoTransactions := ReceptiveAccount new.
	
	aPortfolio := Portfolio new. 
	aPortfolio register: aReceptiveAccountWithNoTransactions.
	aPortfolio register: receptiveAccountWithDepositOfFifty.
	self assert: aPortfolio balance = 50.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:51:23' prior: 50895233!
test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aPortfolio |
	
	aPortfolio := Portfolio new. 
	aPortfolio register: receptiveAccountWithNoTransactions.
	aPortfolio register: receptiveAccountWithDepositOfFifty.
	self assert: aPortfolio balance = 50.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:51:59' prior: 50893444!
test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly
	| aPortfolioWithBalanceZero |
	
	aPortfolioWithBalanceZero := Portfolio new. 
	aPortfolioWithBalanceZero register: receptiveAccountWithNoTransactions.
	self assert: aPortfolioWithBalanceZero balance = 0.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:52:25' prior: 50895260!
test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly
	| aPortfolioWithBalanceZero |
	
	aPortfolioWithBalanceZero := Portfolio new. 
	aPortfolioWithBalanceZero register: receptiveAccountWithNoTransactions.
	self assert: aPortfolioWithBalanceZero balance = 0.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:53:14' prior: 50895272!
test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly
	| aPortfolioWithBalanceZero |
	aPortfolioWithBalanceZero := Portfolio new. 
	
	self assert:  [aPortfolioWithBalanceZero register: receptiveAccountWithNoTransactions] doesNotChange: [aPortfolioWithBalanceZero balance].
	! !

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 00:53:17'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:53:32' prior: 50893473!
test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly
	| aPortfolioWithTwoAccounts aPortfolioWithMany |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.
	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithMany := Portfolio new. 
	aPortfolioWithMany register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithMany register: aPortfolioWithTwoAccounts.
	
	self assert: aPortfolioWithMany balance = 150.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:54:06' prior: 50895300!
test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.
	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	self assert: aPortfolioWithAnAccountAndAPortfolio balance = 150.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:54:33' prior: 50895248!
test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly
	| aPortfolioWithTwoAccounts |
	
	aPortfolioWithTwoAccounts := Portfolio new. 
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.
	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfFifty.
	self assert: aPortfolioWithTwoAccounts balance = 50.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:55:25' prior: 50893501!
test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly
	| aPortfolioWithOneAccount |
	
	aPortfolioWithOneAccount := Portfolio new. 
	aPortfolioWithOneAccount register: receptiveAccountWithDepositOfHundred.
	self assert: (aPortfolioWithOneAccount hasRegistered: depositOfHundred).
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:55:52' prior: 50893511!
test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio hasRegistered: depositOfFifty).
	self assert: (aPortfolioWithAnAccountAndAPortfolio hasRegistered: depositOfHundred).
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:57:16' prior: 50895369!
test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.
	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio hasRegistered: depositOfFifty).
	self assert: (aPortfolioWithAnAccountAndAPortfolio hasRegistered: depositOfHundred).
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:57:57' prior: 50893541!
test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly
	| aPortfolioWithOneAccount |
	
	aPortfolioWithOneAccount := Portfolio new. 
	aPortfolioWithOneAccount register: receptiveAccountWithDepositOfFifty.
	self assert: (aPortfolioWithOneAccount transactions size) = 1.
	self assert: aPortfolioWithOneAccount transactions includes: depositOfFifty.
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:58:53' prior: 50895163!
test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions size) = 2.
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions includes: depositOfHundred).	
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions includes: depositOfFifty).	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 00:59:27' prior: 50895435!
test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.
	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions size) = 2.
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions includes: depositOfHundred).	
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions includes: depositOfFifty).	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:00:14' prior: 50893578!
test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	receptiveAccountWithDepositOfHundred register: withdrawOfTwenty.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio balance) = 130.
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions includes: depositOfHundred).	
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions includes: depositOfFifty).	
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions includes: withdrawOfTwenty).	! !

col := {2,1,2}!

col := #(2 3)!

 #(2 3) !

col := OrderedCollection new. !

col := OrderedCollection new. !

col add: 3!

col add: 3!

col add: 3!

col!

col print.!

col printString!

col printStore!

col printOn: self.!

lala := OrderedCollection with: 2 with: 3.!

lala := OrderedCollection with: 2 with: 3.!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:06:03' prior: 50895493!
test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	receptiveAccountWithDepositOfHundred register: withdrawOfTwenty.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio balance) = 130.
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions =  depositOfHundred).	
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions includes: depositOfFifty).	
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions includes: withdrawOfTwenty).	! !
!Portfolio methodsFor: 'initialization' stamp: 'CR 11/8/2020 01:06:57' prior: 50894986 overrides: 16896425!
initialize
	portfolioEntries := Bag new.
	portfoliosWhereIncluded := OrderedCollection new.! !
!Portfolio methodsFor: 'initialization' stamp: 'CR 11/8/2020 01:07:03' prior: 50895570 overrides: 16896425!
initialize
	portfolioEntries := Bag new.
	portfoliosWhereIncluded := Bag new.! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 01:07:07'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:07:07'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:07:07'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 01:07:07'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 01:07:07'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:07:07'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:07:07'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 01:07:07'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:07:07'!
PASSED!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:07:07'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:07:07'!
FAILURE!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:07:07'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:07:58' prior: 50895536!
test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	receptiveAccountWithDepositOfHundred register: withdrawOfTwenty.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio balance) = 130.
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions =  (Bag with: depositOfHundred with: depositOfFifty with: withdrawOfTwenty)).	
	
	! !

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:08:14'!
FAILURE!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:08:14'!
FAILURE!

lala := Bag with: 1 with:3!

lala2 := OrderedCollection with:3 with:1!

lala = lala2!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:12:38' prior: 50895631!
test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio setWithTransactions|
	
	setWithTransactions := Bag with: depositOfHundred with: depositOfFifty with: withdrawOfTwenty.
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	receptiveAccountWithDepositOfHundred register: withdrawOfTwenty.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio balance) = 130.
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions =  (Bag with: depositOfHundred with: depositOfFifty with: withdrawOfTwenty)).	
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:12:47' prior: 50895671!
test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio setWithTransactions|
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	receptiveAccountWithDepositOfHundred register: withdrawOfTwenty.
	
	setWithTransactions := Bag with: depositOfHundred with: depositOfFifty with: withdrawOfTwenty.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio balance) = 130.
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions =  (Bag with: depositOfHundred with: depositOfFifty with: withdrawOfTwenty)).	
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:13:21' prior: 50895704!
test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio setWithTransactions|
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	receptiveAccountWithDepositOfHundred register: withdrawOfTwenty.
	
	setWithTransactions := Bag with: depositOfHundred with: depositOfFifty with: withdrawOfTwenty.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio balance) = 130.
	self assert: (aPortfolioWithAnAccountAndAPortfolio transactions isSameSetAs: setWithTransactions).
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:14:50' prior: 50895737!
test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio
	| aPortfolioWithTwoAccounts aPortfolioWithAnAccountAndAPortfolio setWithTransactions|
	
	aPortfolioWithTwoAccounts := Portfolio new.
	aPortfolioWithTwoAccounts register: receptiveAccountWithNoTransactions.

	aPortfolioWithTwoAccounts register: receptiveAccountWithDepositOfHundred.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithTwoAccounts.
	
	receptiveAccountWithDepositOfHundred register: withdrawOfTwenty.
	
	setWithTransactions := Bag with: depositOfHundred with: depositOfFifty with: withdrawOfTwenty.
	
	self assert: (aPortfolioWithAnAccountAndAPortfolio balance) = 130.
	self assertThat: (aPortfolioWithAnAccountAndAPortfolio transactions) isSameSetAs: setWithTransactions.
	
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:17:38'!
assertThat: portfolioTransactions isSameSetAs: transactionsThatShouldBeIncluded
	
	self assert: (transactionsThatShouldBeIncluded allSatisfy: [:transactionThatShouldBeIncluded | portfolioTransactions includes: transactionThatShouldBeIncluded]).
	self assert: portfolioTransactions size = transactionsThatShouldBeIncluded size.! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 01:17:42'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:17:42'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:17:42'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 01:17:42'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 01:17:42'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:17:42'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:17:42'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 01:17:42'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:17:42'!
PASSED!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:17:42'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:17:42'!
PASSED!
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 01:18:35' prior: 50894923!
entriesReachableIfAdded
	| entriesReachableByMe |
	entriesReachableByMe := Bag new.
	self collectReachableEntriesAndSaveIn: entriesReachableByMe. 
	^ entriesReachableByMe
	
	! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'CR 11/8/2020 01:18:57' prior: 50893980 overrides: 16896425!
initialize

	transactions := Bag new.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CR 11/8/2020 01:19:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CR 11/8/2020 01:19:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CR 11/8/2020 01:19:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CR 11/8/2020 01:19:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CR 11/8/2020 01:19:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CR 11/8/2020 01:19:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CR 11/8/2020 01:19:05'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 01:19:09'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:19:09'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:19:09'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 01:19:09'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 01:19:09'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:19:09'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:19:09'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 01:19:09'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:19:09'!
PASSED!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:19:09'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:19:09'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:22:17'!
test11addingPortfolioThatCreatesLoopRaisesError
	| aPortfolioWithAPortfolio aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithAPortfolio := Portfolio new.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithAPortfolio.
	
	aPortfolioWithAPortfolio register: aPortfolioWithAnAccountAndAPortfolio. 

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:23:18' prior: 50895942!
test11addingPortfolioThatCreatesLoopRaisesError
	| aPortfolioWithAPortfolio aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithAPortfolio := Portfolio new.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithAPortfolio.
	
	self should: [aPortfolioWithAPortfolio register: aPortfolioWithAnAccountAndAPortfolio] 
	raise: Error   
	withMessageText: Portfolio errorCantAddBecauseCreatesLoop.
	

	! !

----SNAPSHOT----(8 November 2020 01:23:29) CuisUniversity-4384.image priorSource: 18015294!

!testRun: #PortfolioTest #test11addingPortfolioThatCreatesLoopRaisesError stamp: 'CR 11/8/2020 01:23:32'!
FAILURE!

!testRun: #PortfolioTest #test11addingPortfolioThatCreatesLoopRaisesError stamp: 'CR 11/8/2020 01:23:32'!
FAILURE!

aPortfolioEntryToBeAdded!

aPortfolioThatMightCreateLoop!

entriesReachableByPortfolioThatMightCreateLoop!

self at: 1!

self print!

self print!

!testRun: #PortfolioTest #test11addingPortfolioThatCreatesLoopRaisesError stamp: 'CR 11/8/2020 01:28:57'!
FAILURE!

entriesReachableByPortfolioThatMightCreateLoop!

self sortedElements !

Portfolio!
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 01:30:42' prior: 50895857!
entriesReachableIfAdded
	| entriesReachableByMe |
	entriesReachableByMe := OrderedCollection new.
	self collectReachableEntriesAndSaveIn: entriesReachableByMe. 
	^ entriesReachableByMe
	
	! !

!testRun: #PortfolioTest #test11addingPortfolioThatCreatesLoopRaisesError stamp: 'CR 11/8/2020 01:30:49'!
FAILURE!

!testRun: #PortfolioTest #test11addingPortfolioThatCreatesLoopRaisesError stamp: 'CR 11/8/2020 01:30:49'!
FAILURE!

entriesReachableByPortfolioThatMightCreateLoop!

entriesReachableByPortfolioThatMightCreateLoop includes: self!
!Portfolio methodsFor: 'errors' stamp: 'CR 11/8/2020 01:32:50' prior: 50893926!
signalCantAddEntryBecauseCreatesLoop
	^ self error: self class errorCantAddBecauseCreatesLoop.! !

!testRun: #PortfolioTest #test11addingPortfolioThatCreatesLoopRaisesError stamp: 'CR 11/8/2020 01:32:56'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:34:34'!
test11addingPortfolioToPortfolioWhereIncludedRaisesError
	| aPortfolioWithAPortfolio aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithAPortfolio := Portfolio new.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithAPortfolio.
	
	self should: [aPortfolioWithAPortfolio register: aPortfolioWithAnAccountAndAPortfolio] 
	raise: Error   
	withMessageText: Portfolio errorCantAddBecauseCreatesLoop.
	

	! !

!methodRemoval: PortfolioTest #test11addingPortfolioThatCreatesLoopRaisesError stamp: 'CR 11/8/2020 01:34:38'!
test11addingPortfolioThatCreatesLoopRaisesError
	| aPortfolioWithAPortfolio aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithAPortfolio := Portfolio new.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithAPortfolio.
	
	self should: [aPortfolioWithAPortfolio register: aPortfolioWithAnAccountAndAPortfolio] 
	raise: Error   
	withMessageText: Portfolio errorCantAddBecauseCreatesLoop.
	

	!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:37:13'!
test12addingPortfolioToPortfolioWhereIncludedRaisesError
	| rootPorfolio childPortfolio grandchildPorfolio |
	
	childPortfolio := Portfolio new.
	grandchildPorfolio := Portfolio new.
	
	childPortfolio register: grandchildPorfolio.
	
	rootPorfolio := Portfolio new. 
	rootPorfolio register: receptiveAccountWithDepositOfFifty.
	rootPorfolio register: childPortfolio.

	
	self should: [grandchildPorfolio register: rootPorfolio] 
	raise: Error   
	withMessageText: Portfolio errorCantAddBecauseCreatesLoop.
	

	! !

!testRun: #PortfolioTest #test12addingPortfolioToPortfolioWhereIncludedRaisesError stamp: 'CR 11/8/2020 01:37:17'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:38:50'!
test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError
	| rootPorfolio childPortfolio grandchildPorfolio |
	
	childPortfolio := Portfolio new.
	grandchildPorfolio := Portfolio new.
	
	childPortfolio register: grandchildPorfolio.
	
	rootPorfolio := Portfolio new. 
	rootPorfolio register: receptiveAccountWithDepositOfFifty.
	rootPorfolio register: childPortfolio.

	
	self should: [grandchildPorfolio register: rootPorfolio] 
	raise: Error   
	withMessageText: Portfolio errorCantAddBecauseCreatesLoop.
	

	! !

!methodRemoval: PortfolioTest #test12addingPortfolioToPortfolioWhereIncludedRaisesError stamp: 'CR 11/8/2020 01:38:55'!
test12addingPortfolioToPortfolioWhereIncludedRaisesError
	| rootPorfolio childPortfolio grandchildPorfolio |
	
	childPortfolio := Portfolio new.
	grandchildPorfolio := Portfolio new.
	
	childPortfolio register: grandchildPorfolio.
	
	rootPorfolio := Portfolio new. 
	rootPorfolio register: receptiveAccountWithDepositOfFifty.
	rootPorfolio register: childPortfolio.

	
	self should: [grandchildPorfolio register: rootPorfolio] 
	raise: Error   
	withMessageText: Portfolio errorCantAddBecauseCreatesLoop.
	

	!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:39:01'!
test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError
	| aPortfolioWithAPortfolio aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithAPortfolio := Portfolio new.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithAPortfolio.
	
	self should: [aPortfolioWithAPortfolio register: aPortfolioWithAnAccountAndAPortfolio] 
	raise: Error   
	withMessageText: Portfolio errorCantAddBecauseCreatesLoop.
	

	! !

!methodRemoval: PortfolioTest #test11addingPortfolioToPortfolioWhereIncludedRaisesError stamp: 'CR 11/8/2020 01:39:08'!
test11addingPortfolioToPortfolioWhereIncludedRaisesError
	| aPortfolioWithAPortfolio aPortfolioWithAnAccountAndAPortfolio |
	
	aPortfolioWithAPortfolio := Portfolio new.
	
	aPortfolioWithAnAccountAndAPortfolio := Portfolio new. 
	aPortfolioWithAnAccountAndAPortfolio register: receptiveAccountWithDepositOfFifty.
	aPortfolioWithAnAccountAndAPortfolio register: aPortfolioWithAPortfolio.
	
	self should: [aPortfolioWithAPortfolio register: aPortfolioWithAnAccountAndAPortfolio] 
	raise: Error   
	withMessageText: Portfolio errorCantAddBecauseCreatesLoop.
	

	!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:39:33' prior: 50896131!
test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError
	| aPortfolioWithAPortfolio rootPorfolio |
	
	aPortfolioWithAPortfolio := Portfolio new.
	
	rootPorfolio := Portfolio new. 
	rootPorfolio register: receptiveAccountWithDepositOfFifty.
	rootPorfolio register: aPortfolioWithAPortfolio.
	
	self should: [aPortfolioWithAPortfolio register: rootPorfolio] 
	raise: Error   
	withMessageText: Portfolio errorCantAddBecauseCreatesLoop.
	

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:39:54' prior: 50896173!
test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError
	| rootPorfolio childPortfolio |
	
	childPortfolio := Portfolio new.
	
	rootPorfolio := Portfolio new. 
	rootPorfolio register: receptiveAccountWithDepositOfFifty.
	rootPorfolio register: childPortfolio.
	
	self should: [childPortfolio register: rootPorfolio] 
	raise: Error   
	withMessageText: Portfolio errorCantAddBecauseCreatesLoop.
	

	! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:39:59'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:40:12'!
PASSED!

!testRun: #PortfolioTest #test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:40:12'!
PASSED!
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 01:41:11' prior: 50896000!
entriesReachableIfAdded
	| entriesReachableByMe |
	entriesReachableByMe := Bag new.
	self collectReachableEntriesAndSaveIn: entriesReachableByMe. 
	^ entriesReachableByMe
	
	! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:41:16'!
PASSED!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:43:14'!
PASSED!

!testRun: #PortfolioTest #test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:43:14'!
PASSED!
!Portfolio methodsFor: 'errors' stamp: 'CR 11/8/2020 01:44:41' prior: 50894419!
raiseErrorIfIncludedIn: entriesReachableByPortfolioThatMightCreateLoop

	(entriesReachableByPortfolioThatMightCreateLoop includes: self) ifTrue: [ PortfolioEntry signalCantAddEntryBecauseCreatesLoop].
	
	! !
!PortfolioEntry methodsFor: 'nil' stamp: 'CR 11/8/2020 01:44:56'!
signalCantAddEntryBecauseCreatesLoop
	^ self error: self class errorCantAddBecauseCreatesLoop.! !
!PortfolioEntry methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 01:44:58' prior: 50896435!
signalCantAddEntryBecauseCreatesLoop
	self error: self class errorCantAddBecauseCreatesLoop.! !
!PortfolioEntry class methodsFor: 'nil' stamp: 'CR 11/8/2020 01:45:49'!
errorCantAddBecauseCreatesLoop
	^ 'CantAddBecauseCreatesLoop!!'! !

!methodRemoval: Portfolio class #errorCantAddBecauseCreatesLoop stamp: 'CR 11/8/2020 01:45:59'!
errorCantAddBecauseCreatesLoop
	^ 'CantAddBecauseCreatesLoop!!'!
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:46:13' prior: 50896190!
test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError
	| rootPorfolio childPortfolio |
	
	childPortfolio := Portfolio new.
	
	rootPorfolio := Portfolio new. 
	rootPorfolio register: receptiveAccountWithDepositOfFifty.
	rootPorfolio register: childPortfolio.
	
	self should: [childPortfolio register: rootPorfolio] 
	raise: Error   
	withMessageText: PortfolioEntry errorCantAddBecauseCreatesLoop.
	

	! !
!PortfolioTest methodsFor: 'tests' stamp: 'CR 11/8/2020 01:46:18' prior: 50896092!
test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError
	| rootPorfolio childPortfolio grandchildPorfolio |
	
	childPortfolio := Portfolio new.
	grandchildPorfolio := Portfolio new.
	
	childPortfolio register: grandchildPorfolio.
	
	rootPorfolio := Portfolio new. 
	rootPorfolio register: receptiveAccountWithDepositOfFifty.
	rootPorfolio register: childPortfolio.

	
	self should: [grandchildPorfolio register: rootPorfolio] 
	raise: Error   
	withMessageText: PortfolioEntry errorCantAddBecauseCreatesLoop.
	

	! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:46:24'!
PASSED!

!testRun: #PortfolioTest #test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:46:24'!
FAILURE!

!testRun: #PortfolioTest #test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:46:24'!
FAILURE!

!methodRemoval: Portfolio #signalCantAddEntryBecauseCreatesLoop stamp: 'CR 11/8/2020 01:46:58'!
signalCantAddEntryBecauseCreatesLoop
	^ self error: self class errorCantAddBecauseCreatesLoop.!
!Portfolio methodsFor: 'errors' stamp: 'CR 11/8/2020 01:48:08' prior: 50896426!
raiseErrorIfIncludedIn: entriesReachableByPortfolioThatMightCreateLoop

	(entriesReachableByPortfolioThatMightCreateLoop includes: self) ifTrue: [ super signalCantAddEntryBecauseCreatesLoop].
	
	! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:48:13'!
PASSED!

!testRun: #PortfolioTest #test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError stamp: 'CR 11/8/2020 01:48:13'!
PASSED!
!PortfolioEntry methodsFor: 'adding to portfolio' stamp: 'CR 11/8/2020 01:49:30'!
addToPorfolio: aPortfolioEntryToAdd
	self subclassResponsibility.! !
!PortfolioEntry methodsFor: 'nil' stamp: 'CR 11/8/2020 01:50:32'!
collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded
	self subclassResponsibility.! !

!methodRemoval: ReceptiveAccount #sumTotalTransactionsFrom: stamp: 'CR 11/8/2020 01:51:10'!
sumTotalTransactionsFrom: aSetOfTransactions

	^ aSetOfTransactions sum: [ :aTransactionToSumItsValue | aTransactionToSumItsValue value ] ifEmpty: [ 0 ].!
!Deposit methodsFor: 'initialization' stamp: 'CR 11/8/2020 01:51:47' prior: 50893755!
initializeFor: aDepositValue

	value := aDepositValue ! !
!Withdraw methodsFor: 'initialization' stamp: 'CR 11/8/2020 01:52:06' prior: 50893806!
initializeFor: aWithdrawValue

	value := aWithdrawValue ! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 01:55:53' prior: 50893893 overrides: 50893863!
hasRegistered: aTransactionToCheckIfRegistered
	^ portfolioEntries anySatisfy: [:aPortfolioEntry | aPortfolioEntry hasRegistered: aTransactionToCheckIfRegistered].! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 01:58:16' prior: 50893902 overrides: 50893868!
transactions
	| accountsReachableByMe |
	accountsReachableByMe := Bag new.
	self collectReachableAccountsAndSaveIn: accountsReachableByMe. 
	^ accountsReachableByMe.! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 01:58:24'!
collectReachableAccountsAndSaveIn: accountsReachableByMe. 
	! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 02:00:16' prior: 50896662!
collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded

	(self reachableAccountsAlreadyCollected: accountsReachableByPortfoliosWhereIncluded) ifFalse: [
		self keepCollectingAndSaveIn: accountsReachableByPortfoliosWhereIncluded
		]
	! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 02:00:26'!
reachableAccountsAlreadyCollected: accountsReachableByPortfoliosWhereIncluded! !
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:01:05'!
keepCollectingEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	entriesReachableByPortfoliosWhereIncluded add: self.
	portfolioEntries do: 
					[:aPortfolioEntryWhoKeepsCollecting | aPortfolioEntryWhoKeepsCollecting collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded.].

	! !

!methodRemoval: Portfolio #keepCollectingAndSaveIn: stamp: 'CR 11/8/2020 02:01:10'!
keepCollectingAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	entriesReachableByPortfoliosWhereIncluded add: self.
	portfolioEntries do: 
					[:aPortfolioEntryWhoKeepsCollecting | aPortfolioEntryWhoKeepsCollecting collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded.].

	!
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:01:15' prior: 50896667!
collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded

	(self reachableAccountsAlreadyCollected: accountsReachableByPortfoliosWhereIncluded) ifFalse: [
		self keepCollectingEntriesAndSaveIn: accountsReachableByPortfoliosWhereIncluded
		]
	! !
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:01:19' prior: 50894618 overrides: 50896620!
collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	(self reachableEntriesAlreadyCollected: entriesReachableByPortfoliosWhereIncluded) ifFalse: [
		self keepCollectingEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded
		]
	! !
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:01:48'!
keepCollectingAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded

	accountsReachableByPortfoliosWhereIncluded add: self.
	portfolioEntries do: 
					[:aPortfolioEntryWhoKeepsCollecting | aPortfolioEntryWhoKeepsCollecting collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded.].

	! !
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:02:43' prior: 50896678!
reachableAccountsAlreadyCollected: accountsReachableByPortfoliosWhereIncluded! !
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:02:57' prior: 50896744!
reachableAccountsAlreadyCollected: accountsReachableByPortfoliosWhereIncluded

	^ accountsReachableByPortfoliosWhereIncluded includes: self.! !
!PortfolioEntry methodsFor: 'private' stamp: 'CR 11/8/2020 02:03:35'!
collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded
	self subclassResponsibility.! !
!ReceptiveAccount methodsFor: 'private' stamp: 'CR 11/8/2020 02:03:58' overrides: 50896757!
collectReachableAccountsAndSaveIn: entriesReachableByPortfoliosWhereIncluded
! !
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:10:23'!
collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded

	(self reachableEntriesAlreadyCollected: entriesReachableByPortfoliosWhereIncluded) ifFalse: [
		self keepCollectingEntriesAndSaveIn: accountsReachableByPortfoliosWhereIncluded
		]
	! !

!methodRemoval: Portfolio #collectReachableAccountsAndSaveIn: stamp: 'CR 11/8/2020 02:10:28'!
collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded

	(self reachableAccountsAlreadyCollected: accountsReachableByPortfoliosWhereIncluded) ifFalse: [
		self keepCollectingEntriesAndSaveIn: accountsReachableByPortfoliosWhereIncluded
		]
	!
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:11:09' prior: 50896769!
collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded

	(self reachableEntriesAlreadyCollected: entriesReachableByPortfoliosWhereIncluded) ifFalse: [
		self keepCollectingEntriesAndSaveIn: accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded
		]
	! !
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:11:39' prior: 50896683!
keepCollectingEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	entriesReachableByPortfoliosWhereIncluded add: self.
	portfolioEntries do: 
					[:aPortfolioEntryWhoKeepsCollecting | aPortfolioEntryWhoKeepsCollecting collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded.].

	! !
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:11:44'!
keepCollectingAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded

	accountsReachableByPortfoliosWhereIncluded add: self.
	portfolioEntries do: 
					[:aPortfolioEntryWhoKeepsCollecting | aPortfolioEntryWhoKeepsCollecting collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded.].

	! !

!methodRemoval: Portfolio #keepCollectingAccountsAndSaveIn: stamp: 'CR 11/8/2020 02:11:48'!
keepCollectingAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded

	accountsReachableByPortfoliosWhereIncluded add: self.
	portfolioEntries do: 
					[:aPortfolioEntryWhoKeepsCollecting | aPortfolioEntryWhoKeepsCollecting collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded.].

	!
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:12:52' prior: 50896821!
keepCollectingAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded

	entriesReachableByPortfoliosWhereIncluded add: self.
	portfolioEntries do: 
					[:aPortfolioEntryWhoKeepsCollecting | aPortfolioEntryWhoKeepsCollecting collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded.].

	! !
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:14:04' prior: 50896849!
keepCollectingAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded

	entriesReachableByPortfoliosWhereIncluded add: self.
	portfolioEntries do: 
					[:aPortfolioEntryWhoKeepsCollecting | aPortfolioEntryWhoKeepsCollecting collectReachableAccountsAndSaveIn:  accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded].

	! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'CR 11/8/2020 02:14:44'!
collectReachableAccountsAndSaveIn:  accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 02:14:52' prior: 50896880!
collectReachableAccountsAndSaveIn:  accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded
	accountsReachableByPortfoliosWhereIncluded add: self.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CR 11/8/2020 02:14:58' prior: 50896888!
collectReachableAccountsAndSaveIn:  accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded
	accountsReachableByPortfoliosWhereIncluded add: self! !
!PortfolioEntry methodsFor: 'nil' stamp: 'CR 11/8/2020 02:15:11'!
collectReachableAccountsAndSaveIn:  accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded
	self subclassResponsibility ! !

!methodRemoval: PortfolioEntry #collectReachableAccountsAndSaveIn: stamp: 'CR 11/8/2020 02:15:38'!
collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded
	self subclassResponsibility.!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 02:16:37' prior: 50896654 overrides: 50893868!
transactions
	| accountsReachableByMe entriesReachableByMe|
	accountsReachableByMe := Bag new.
	entriesReachableByMe := Bag new.
	self collectReachableAccountsAndSaveIn: accountsReachableByMe andRecursionOn: entriesReachableByMe. 
	^ accountsReachableByMe.! !

!methodRemoval: ReceptiveAccount #collectReachableAccountsAndSaveIn: stamp: 'CR 11/8/2020 02:17:08'!
collectReachableAccountsAndSaveIn: entriesReachableByPortfoliosWhereIncluded
!
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:18:08' prior: 50896794 overrides: 50896907!
collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded

	(self reachableEntriesAlreadyCollected: entriesReachableByPortfoliosWhereIncluded) ifFalse: [
		self keepCollectingAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded
		]
	! !

!methodRemoval: Portfolio #reachableAccountsAlreadyCollected: stamp: 'CR 11/8/2020 02:20:45'!
reachableAccountsAlreadyCollected: accountsReachableByPortfoliosWhereIncluded

	^ accountsReachableByPortfoliosWhereIncluded includes: self.!
!ReceptiveAccount methodsFor: 'nil' stamp: 'CR 11/8/2020 02:20:51'!
reachableAccountsAlreadyCollected: accountsReachableByPortfoliosWhereIncluded

	^ accountsReachableByPortfoliosWhereIncluded includes: self.! !
!ReceptiveAccount methodsFor: 'private' stamp: 'CR 11/8/2020 02:22:28' prior: 50896898 overrides: 50896907!
collectReachableAccountsAndSaveIn:  alreadyCollectedAccounts andRecursionOn: entriesReachableByPortfoliosWhereIncluded
	(self reachableAccountsAlreadyCollected: alreadyCollectedAccounts) ifFalse: [alreadyCollectedAccounts add: self].! !
!ReceptiveAccount methodsFor: 'private' stamp: 'CR 11/8/2020 02:23:07' prior: 50896971 overrides: 50896907!
collectReachableAccountsAndSaveIn:  alreadyCollectedAccounts andRecursionOn: alreadyReachedEntries
	(self reachableAccountsAlreadyCollected: alreadyCollectedAccounts) ifFalse: [alreadyCollectedAccounts add: self].! !
!ReceptiveAccount methodsFor: 'private' stamp: 'CR 11/8/2020 02:24:23' prior: 50896982 overrides: 50896907!
collectReachableAccountsAndSaveIn:  alreadyCollectedAccounts andRecursionOn: alreadyReachedEntries

	(self alreadyCollectedIn: alreadyCollectedAccounts) ifFalse: [alreadyCollectedAccounts add: self]! !
!ReceptiveAccount methodsFor: 'private' stamp: 'CR 11/8/2020 02:24:31'!
alreadyCollectedIn: accountsReachableByPortfoliosWhereIncluded

	^ accountsReachableByPortfoliosWhereIncluded includes: self.! !

!methodRemoval: ReceptiveAccount #reachableAccountsAlreadyCollected: stamp: 'CR 11/8/2020 02:24:33'!
reachableAccountsAlreadyCollected: accountsReachableByPortfoliosWhereIncluded

	^ accountsReachableByPortfoliosWhereIncluded includes: self.!
!ReceptiveAccount methodsFor: 'private' stamp: 'CR 11/8/2020 02:24:56' prior: 50897002!
alreadyCollectedIn: alreadyCollectedAccounts

	^ alreadyCollectedAccounts includes: self.! !
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:25:50' prior: 50896720 overrides: 50896620!
collectReachableEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded

	(self alreadyCollectedIn: entriesReachableByPortfoliosWhereIncluded) ifFalse: [
		self keepCollectingEntriesAndSaveIn: entriesReachableByPortfoliosWhereIncluded
		]
	! !

!methodRemoval: Portfolio #reachableEntriesAlreadyCollected: stamp: 'CR 11/8/2020 02:26:07'!
reachableEntriesAlreadyCollected: entriesReachableByPortfoliosWhereIncluded

	^ entriesReachableByPortfoliosWhereIncluded includes: self!
!Portfolio methodsFor: 'verification' stamp: 'CR 11/8/2020 02:26:21' prior: 50896941 overrides: 50896907!
collectReachableAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded

	(self alreadyCollectedIn: entriesReachableByPortfoliosWhereIncluded) ifFalse: [
		self keepCollectingAccountsAndSaveIn: accountsReachableByPortfoliosWhereIncluded andRecursionOn: entriesReachableByPortfoliosWhereIncluded
		]
	! !
!PortfolioEntry methodsFor: 'private' stamp: 'CR 11/8/2020 02:26:48'!
alreadyCollectedIn: alreadyCollectedAccounts

	^ alreadyCollectedAccounts includes: self.! !

!methodRemoval: ReceptiveAccount #alreadyCollectedIn: stamp: 'CR 11/8/2020 02:27:10'!
alreadyCollectedIn: alreadyCollectedAccounts

	^ alreadyCollectedAccounts includes: self.!

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 02:27:24'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:27:24'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 02:27:24'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 02:27:24'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 02:27:24'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:27:24'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 02:27:24'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 02:27:24'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:27:24'!
FAILURE!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 02:27:24'!
FAILURE!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 02:27:24'!
FAILURE!

!testRun: #PortfolioTest #test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError stamp: 'CR 11/8/2020 02:27:24'!
PASSED!

!testRun: #PortfolioTest #test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError stamp: 'CR 11/8/2020 02:27:24'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:27:41'!
FAILURE!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:27:41'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 02:28:37' prior: 50896923 overrides: 50893868!
transactions
	| accountsReachableByMe entriesReachableByMe|
	accountsReachableByMe := Bag new.
	entriesReachableByMe := Bag new.
	self collectReachableAccountsAndSaveIn: accountsReachableByMe andRecursionOn: entriesReachableByMe. 
	^ self collectTransactionsFromAccounts: accountsReachableByMe.! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 02:28:55'!
collectTransactionsFromAccounts: setOfAccountsReachableByMe
	! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 02:29:48' prior: 50897143!
collectTransactionsFromAccounts: setOfAccountsReachableByMe
	^ setOfAccountsReachableByMe collect: [:accountReachableByMe | accountReachableByMe transactions].! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 02:29:51' prior: 50897148!
collectTransactionsFromAccounts: setOfAccountsReachableByMe

	^ setOfAccountsReachableByMe collect: [:accountReachableByMe | accountReachableByMe transactions]! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 02:29:58'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:29:58'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 02:29:58'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 02:29:58'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 02:29:58'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:29:58'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 02:29:58'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 02:29:58'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:29:58'!
FAILURE!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 02:29:58'!
FAILURE!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 02:29:58'!
FAILURE!

!testRun: #PortfolioTest #test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError stamp: 'CR 11/8/2020 02:29:58'!
PASSED!

!testRun: #PortfolioTest #test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError stamp: 'CR 11/8/2020 02:29:58'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:30:03'!
FAILURE!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:30:03'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 02:30:51' prior: 50897156!
collectTransactionsFromAccounts: setOfAccountsReachableByMe

	^ setOfAccountsReachableByMe collect: [:accountReachableByMe | accountReachableByMe transactions].! !
!Portfolio methodsFor: 'accessing' stamp: 'CR 11/8/2020 02:33:21' prior: 50897226!
collectTransactionsFromAccounts: setOfAccountsReachableByMe

	^ setOfAccountsReachableByMe collect: [:accountReachableByMeToAddItsTransactions | accountReachableByMeToAddItsTransactions transactions] andFold: [:aSetOfTransactions :anotherSetOfTransactions | aSetOfTransactions union: anotherSetOfTransactions] ifEmpty: (Bag new).! !

!testRun: #PortfolioTest #test01balanceOfAnEmptyPortfolioIsZero stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test02balanceOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test03balanceOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test03bis_balanceOfPortfolioWithManyReceptiveAccountsWorksCorrectly stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test04hasRegisteredOfAnEmptyPortfolioIsFalse stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test05hasRegisteredOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test07transactionsOfAnEmptyPortfolioIsEmpty stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test08transactionsOfPortfolioWithOneReceptiveAccountWorksCorrectly stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test09transactionOfPortfolioWithManyReceptiveAccountsAndPortfoliosWorksCorrectly stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test10updatingAnAccountIncludedInPortfolioUpdatesPortfolio stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test11addingPortfolioToPortfolioWhereDirectlyIncludedRaisesError stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

!testRun: #PortfolioTest #test12addingPortfolioToPortfolioWhereIndirectlyIncludedRaisesError stamp: 'CR 11/8/2020 02:34:26'!
PASSED!

----SNAPSHOT----(8 November 2020 02:35:11) CuisUniversity-4384.image priorSource: 18058505!

----QUIT----(8 November 2020 02:35:14) CuisUniversity-4384.image priorSource: 18100779!

----STARTUP---- (9 November 2020 16:36:57) as /Users/celeste/facultad/ing1/si-exercises/CuisUniversity-4384.image!


----SNAPSHOT----(9 November 2020 16:42:09) CuisUniversity-4384.image priorSource: 18100872!