

----SNAPSHOT----(16 November 2020 19:07:30) CuisUniversity-4384.image priorSource: 18264502!

----QUIT----(16 November 2020 19:07:32) CuisUniversity-4384.image priorSource: 18385659!

----STARTUP---- (19 November 2020 15:05:10) as /Users/celeste/facultad/ing1/si-exercises/CuisUniversity-4384.image!


----End fileIn of /Users/celeste/facultad/ing1/si-exercises/20 - TusLibros/TusLibros.st----!
!CartTest methodsFor: 'tests' stamp: 'CR 11/19/2020 15:08:26'!
test07ListEmptyCartGivesEmptyList
	
	! !
!CartTest methodsFor: 'tests' stamp: 'CR 11/19/2020 15:08:58' prior: 50906396!
test07ListEmptyCartGivesEmptyList
	
	aCart list. ! !
!CartTest methodsFor: 'tests' stamp: 'CR 11/19/2020 15:09:41' prior: 50906400!
test07ListEmptyCartGivesEmptyList
	
	self assert: aCart listBooks = 'The cart is empty'.! !

!testRun: #CartTest #test07ListEmptyCartGivesEmptyList stamp: 'CR 11/19/2020 15:11:37'!
FAILURE!

!testRun: #CartTest #test07ListEmptyCartGivesEmptyList stamp: 'CR 11/19/2020 15:11:37'!
FAILURE!

aCart listBooks!
!Cart methodsFor: 'actions' stamp: 'CR 11/19/2020 15:12:20' prior: 50906325!
listBooks 
	booksInCart ifEmpty: [^ 'The cart has no items'].
	^ booksInCart associations.! !
!CartTest methodsFor: 'tests' stamp: 'CR 11/19/2020 15:12:33' prior: 50906405!
test07ListEmptyCartGivesEmptyList
	
	self assert: aCart listBooks = 'The cart has no items'.! !

!testRun: #CartTest #test07ListEmptyCartGivesEmptyList stamp: 'CR 11/19/2020 15:12:34'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'CR 11/19/2020 15:14:36'!
test08ListCartWithOneBookWorksCorrectly
	
	self assert: aCart listBooks = 'The cart has no items'.! !

!testRun: #CartTest #test08ListCartWithOneBookWorksCorrectly stamp: 'CR 11/19/2020 15:14:37'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'CR 11/19/2020 15:14:49' prior: 50906431!
test08ListCartWithOneBookWorksCorrectly
	
	aCart add: anISBN times: 1.
	self assert: aCart listBooks = 'The cart has no items'.! !

!testRun: #CartTest #test08ListCartWithOneBookWorksCorrectly stamp: 'CR 11/19/2020 15:14:51'!
FAILURE!

!testRun: #CartTest #test08ListCartWithOneBookWorksCorrectly stamp: 'CR 11/19/2020 15:14:51'!
FAILURE!

aCart listBooks!
!CartTest methodsFor: 'tests' stamp: 'CR 11/19/2020 15:15:44' prior: 50906440!
test08ListCartWithOneBookWorksCorrectly
	
	aCart add: anISBN times: 1.
	self assert: aCart listBooks asString = 'The cart has no items'.! !

!testRun: #CartTest #test08ListCartWithOneBookWorksCorrectly stamp: 'CR 11/19/2020 15:15:47'!
FAILURE!

!testRun: #CartTest #test08ListCartWithOneBookWorksCorrectly stamp: 'CR 11/19/2020 15:15:47'!
FAILURE!

aCart listBooks asString!
!CartTest methodsFor: 'tests' stamp: 'CR 11/19/2020 15:16:13' prior: 50906454!
test08ListCartWithOneBookWorksCorrectly
	
	aCart add: anISBN times: 1.
	self assert: aCart listBooks asString = '#(''ISBN #123'' -> 1)'.! !

!testRun: #CartTest #test08ListCartWithOneBookWorksCorrectly stamp: 'CR 11/19/2020 15:16:17'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'CR 11/19/2020 15:19:10'!
test09ListCartWithOneBookMultipleTimesWorksCorrectly
	
	aCart add: anISBN times: 1.
	self assert: aCart listBooks asString = '#(''ISBN #123'' -> 1)'.! !
!CartTest methodsFor: 'tests' stamp: 'CR 11/19/2020 15:19:28' prior: 50906479!
test09ListCartWithOneBookMultipleTimesWorksCorrectly
	
	aCart add: anISBN times: 1.
	aCart add: anISBN times: 5.
	self assert: aCart listBooks asString = '#(''ISBN #123'' -> 6)'.! !

!testRun: #CartTest #test09ListCartWithOneBookMultipleTimesWorksCorrectly stamp: 'CR 11/19/2020 15:19:32'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'CR 11/19/2020 15:22:07'!
test10ListCartWithManyBooksMultipleTimesWorksCorrectly
	
	aCart add: anISBN times: 1.
	aCart add: anISBN times: 5.
	self assert: aCart listBooks asString = '#(''ISBN #123'' -> 6)'.! !
!CartTest methodsFor: 'tests' stamp: 'CR 11/19/2020 15:22:30' prior: 50906499!
test10ListCartWithManyBooksMultipleTimesWorksCorrectly
	
	aCart add: anISBN times: 1.	
	aCart add: anotherISBN times: 1.
	
	aCart add: anISBN times: 4.	
	aCart add: anotherISBN times: 5.
	
	self assert: aCart listBooks asString = '#(''ISBN #123'' -> 6)'.! !
!CartTest methodsFor: 'tests' stamp: 'CR 11/19/2020 15:22:33' prior: 50906487!
test09ListCartWithOneBookMultipleTimesWorksCorrectly
	
	aCart add: anISBN times: 1.
	aCart add: anISBN times: 5.
	
	self assert: aCart listBooks asString = '#(''ISBN #123'' -> 6)'.! !
!CartTest methodsFor: 'tests' stamp: 'CR 11/19/2020 15:22:35' prior: 50906469!
test08ListCartWithOneBookWorksCorrectly
	
	aCart add: anISBN times: 1.
	
	self assert: aCart listBooks asString = '#(''ISBN #123'' -> 1)'.! !

!testRun: #CartTest #test10ListCartWithManyBooksMultipleTimesWorksCorrectly stamp: 'CR 11/19/2020 15:22:40'!
FAILURE!

!testRun: #CartTest #test10ListCartWithManyBooksMultipleTimesWorksCorrectly stamp: 'CR 11/19/2020 15:22:40'!
FAILURE!

aCart listBooks asString!
!CartTest methodsFor: 'tests' stamp: 'CR 11/19/2020 15:23:08' prior: 50906508!
test10ListCartWithManyBooksMultipleTimesWorksCorrectly
	
	aCart add: anISBN times: 1.	
	aCart add: anotherISBN times: 1.
	
	aCart add: anISBN times: 4.	
	aCart add: anotherISBN times: 5.
	
	self assert: aCart listBooks asString = '#(''ISBN #127'' -> 6 ''ISBN #123'' -> 5)'.! !
!Cart methodsFor: 'actions' stamp: 'CR 11/19/2020 15:23:26' prior: 50906417!
listBooks 
	booksInCart ifEmpty: [^ 'The cart has no items'].
	^ booksInCart associations asString.! !
!CartTest methodsFor: 'tests' stamp: 'CR 11/19/2020 15:23:33' prior: 50906528!
test08ListCartWithOneBookWorksCorrectly
	
	aCart add: anISBN times: 1.
	
	self assert: aCart listBooks = '#(''ISBN #123'' -> 1)'.! !
!CartTest methodsFor: 'tests' stamp: 'CR 11/19/2020 15:23:40' prior: 50906519!
test09ListCartWithOneBookMultipleTimesWorksCorrectly
	
	aCart add: anISBN times: 1.
	aCart add: anISBN times: 5.
	
	self assert: aCart listBooks = '#(''ISBN #123'' -> 6)'.! !
!CartTest methodsFor: 'tests' stamp: 'CR 11/19/2020 15:23:43' prior: 50906544!
test10ListCartWithManyBooksMultipleTimesWorksCorrectly
	
	aCart add: anISBN times: 1.	
	aCart add: anotherISBN times: 1.
	
	aCart add: anISBN times: 4.	
	aCart add: anotherISBN times: 5.
	
	self assert: aCart listBooks = '#(''ISBN #127'' -> 6 ''ISBN #123'' -> 5)'.! !

!testRun: #CartTest #test01CreateCartWithClientIDAndCartIDWorksCorrectly stamp: 'CR 11/19/2020 15:23:46'!
PASSED!

!testRun: #CartTest #test02AddingOneBookOneTimeToCartWorksCorrectly stamp: 'CR 11/19/2020 15:23:46'!
PASSED!

!testRun: #CartTest #test03AddingManyBooksOneTimeToCartWorksCorrectly stamp: 'CR 11/19/2020 15:23:46'!
PASSED!

!testRun: #CartTest #test04AddingOneBookMultipleTimesToCartWorksCorrectly stamp: 'CR 11/19/2020 15:23:46'!
PASSED!

!testRun: #CartTest #test05AddingManyBooksManyTimesToCartWorksCorrectly stamp: 'CR 11/19/2020 15:23:46'!
PASSED!

!testRun: #CartTest #test06AddingNegativeQuantityOfBooksRaisesError stamp: 'CR 11/19/2020 15:23:46'!
PASSED!

!testRun: #CartTest #test07ListEmptyCartGivesEmptyList stamp: 'CR 11/19/2020 15:23:46'!
PASSED!

!testRun: #CartTest #test08ListCartWithOneBookWorksCorrectly stamp: 'CR 11/19/2020 15:23:46'!
PASSED!

!testRun: #CartTest #test09ListCartWithOneBookMultipleTimesWorksCorrectly stamp: 'CR 11/19/2020 15:23:46'!
PASSED!

!testRun: #CartTest #test10ListCartWithManyBooksMultipleTimesWorksCorrectly stamp: 'CR 11/19/2020 15:23:46'!
PASSED!

----End fileIn of /Users/celeste/facultad/ing1/si-exercises/20 - TusLibrosCashier/TusLibros.st----!

!methodRemoval: CashierTest #test03checkOutCartWithInvalidCreditCardRaisesError stamp: 'CR 11/26/2020 16:56:42'!
test03checkOutCartWithInvalidCreditCardRaisesError

	| cashier ticket creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createInvalidCreditCard.

	self should:  [cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Carlitos Ticona' .]
	raise:  Error
	withMessageText: Cashier errorExpiredCreditCard.

	
!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CR 11/26/2020 16:57:27'!
test01checkOutCartWithOneItemWithValidCardAndInvalidPaymentWorksCorrectly

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: cartWithOneItem usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 3.5).
	self assert: (ticket creditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
! !

!methodRemoval: CashierTest #test01checkOutCartWithOneItemWithValidCardWorksCorrectly stamp: 'CR 11/26/2020 16:57:31'!
test01checkOutCartWithOneItemWithValidCardWorksCorrectly

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: cartWithOneItem usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 3.5).
	self assert: (ticket creditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CR 11/26/2020 16:57:48'!
test02checkOutCartWithManyItemsWithValidCreditCardAndValidPaymentWorksCorrectly

	| cashier ticket creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 18.7).
	self assert: (ticket creditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
! !

!methodRemoval: CashierTest #test02checkOutCartWithManyItemsWithValidCardWorksCorrectly stamp: 'CR 11/26/2020 16:57:52'!
test02checkOutCartWithManyItemsWithValidCardWorksCorrectly

	| cashier ticket creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 18.7).
	self assert: (ticket creditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CR 11/26/2020 16:57:57'!
test01checkOutCartWithOneItemWithValidCreditCardAndInvalidPaymentWorksCorrectly

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: cartWithOneItem usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 3.5).
	self assert: (ticket creditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
! !

!methodRemoval: CashierTest #test01checkOutCartWithOneItemWithValidCardAndInvalidPaymentWorksCorrectly stamp: 'CR 11/26/2020 16:57:59'!
test01checkOutCartWithOneItemWithValidCardAndInvalidPaymentWorksCorrectly

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: cartWithOneItem usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 3.5).
	self assert: (ticket creditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CR 11/26/2020 16:58:18'!
test01checkOutCartWithOneItemWithValidCreditCardAndValidPaymentWorksCorrectly

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: cartWithOneItem usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 3.5).
	self assert: (ticket creditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
! !

!methodRemoval: CashierTest #test01checkOutCartWithOneItemWithValidCreditCardAndInvalidPaymentWorksCorrectly stamp: 'CR 11/26/2020 16:58:20'!
test01checkOutCartWithOneItemWithValidCreditCardAndInvalidPaymentWorksCorrectly

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: cartWithOneItem usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 3.5).
	self assert: (ticket creditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCreditCardAndValidPaymentWorksCorrectly stamp: 'CR 11/26/2020 16:58:29'!
PASSED!

!testRun: #CashierTest #test02checkOutCartWithManyItemsWithValidCreditCardAndValidPaymentWorksCorrectly stamp: 'CR 11/26/2020 16:58:31'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CR 11/26/2020 16:59:05'!
test05checkOutCartWithOneItemWithValidCreditCardButInvalidPaymentRaisesError

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorInvalidPayment. 
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: cartWithOneItem usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 3.5).
	self assert: (ticket creditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CR 11/26/2020 16:59:11' prior: 50907547!
test05checkOutCartWithOneItemWithValidCreditCardButInvalidPaymentRaisesError

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorInvalidPayment. 
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: cartWithOneItem usingCreditCard: creditCart of: 'Carlitos Ticona' .
	

	
	

	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CR 11/26/2020 16:59:19' prior: 50907568!
test05checkOutCartWithOneItemWithValidCreditCardButInvalidPaymentRaisesError

	| cashier cartWithOneItem creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorInvalidPayment. 
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	cashier checkOut: cartWithOneItem usingCreditCard: creditCart of: 'Carlitos Ticona' .
	

	
	

	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CR 11/26/2020 17:00:04' prior: 50907585!
test05checkOutCartWithOneItemWithValidCreditCardButInvalidPaymentRaisesError

	| cashier cartWithOneItem creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorInvalidPayment. 
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	
	self should:  [cashier checkOut: cartWithOneItem usingCreditCard: creditCart of: 'Carlitos Ticona' .]
	raise:  Error
	withMessageText: MPSimulatorInvalidPayment errorUnsuccesfulPayment. 
	
	

	
! !

!testRun: #CashierTest #test05checkOutCartWithOneItemWithValidCreditCardButInvalidPaymentRaisesError stamp: 'CR 11/26/2020 17:00:11'!
FAILURE!

!testRun: #CashierTest #test05checkOutCartWithOneItemWithValidCreditCardButInvalidPaymentRaisesError stamp: 'CR 11/26/2020 17:00:11'!
FAILURE!

!testRun: #CashierTest #test05checkOutCartWithOneItemWithValidCreditCardButInvalidPaymentRaisesError stamp: 'CR 11/26/2020 17:01:08'!
FAILURE!

!testRun: #CashierTest #test05checkOutCartWithOneItemWithValidCreditCardButInvalidPaymentRaisesError stamp: 'CR 11/26/2020 17:01:08'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CR 11/26/2020 17:01:25' prior: 50907601!
test05checkOutCartWithOneItemWithValidCreditCardButInvalidPaymentRaisesError

	| cashier cartWithOneItem creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorInvalidPayment new. 
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	
	self should:  [cashier checkOut: cartWithOneItem usingCreditCard: creditCart of: 'Carlitos Ticona' .]
	raise:  Error
	withMessageText: MPSimulatorInvalidPayment errorUnsuccesfulPayment. 
	
	

	
! !

!testRun: #CashierTest #test05checkOutCartWithOneItemWithValidCreditCardButInvalidPaymentRaisesError stamp: 'CR 11/26/2020 17:01:27'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CR 11/26/2020 17:01:45'!
test06checkOutCartWithManyItemsWithValidCreditCardAndValidPaymentWorksCorrectly

	| cashier ticket creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 18.7).
	self assert: (ticket creditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CR 11/26/2020 17:01:57'!
test06checkOutCartWithManyItemsWithValidCreditCardButInvalidPaymentRaisesError

	| cashier ticket creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 18.7).
	self assert: (ticket creditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
! !

!methodRemoval: CashierTest #test06checkOutCartWithManyItemsWithValidCreditCardAndValidPaymentWorksCorrectly stamp: 'CR 11/26/2020 17:01:59'!
test06checkOutCartWithManyItemsWithValidCreditCardAndValidPaymentWorksCorrectly

	| cashier ticket creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 18.7).
	self assert: (ticket creditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona')
	
	

	
!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'CR 11/26/2020 17:02:31' prior: 50907682!
test06checkOutCartWithManyItemsWithValidCreditCardButInvalidPaymentRaisesError

	| cashier creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorInvalidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createValidCreditCard.
	
	self should:  [cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Carlitos Ticona' .]
	raise:  Error
	withMessageText: MPSimulatorInvalidPayment errorUnsuccesfulPayment. 
	
	
	

	
! !

!testRun: #CashierTest #test06checkOutCartWithManyItemsWithValidCreditCardButInvalidPaymentRaisesError stamp: 'CR 11/26/2020 17:02:35'!
PASSED!
!Cashier methodsFor: 'actions' stamp: 'CR 11/26/2020 17:05:21' prior: 50907113!
checkOut: aCart usingCreditCard: aCreditCard of: buyingClient
	| cartTotal idTransaction |
	self verifyOwnerOf: aCreditCard is: buyingClient.
	self verifyItIsaValidCreditCard: aCreditCard.
	self verifyCartIsNotAlreadyCheckedOut: aCart.
	cartTotal :=  aCart total.
	idTransaction := merchantProcessor charge: cartTotal to: aCreditCard.
	aCart alreadyCheckedOut. 
	^Ticket forTransaction: idTransaction doneBy: aCreditCard of: cartTotal.
	
	
	! !
!Cashier methodsFor: 'actions' stamp: 'CR 11/26/2020 17:06:06'!
verifyCartIsNotAlreadyCheckedOut: aCart
	(aCart alreadyCheckedOut) ifTrue: [self signalCartAlreadyCheckedOut].
	! !
!Cashier methodsFor: 'actions' stamp: 'CR 11/26/2020 17:06:41'!
signalCartAlreadyCheckedOut
	self error: self class cartAlreadyCheckedOut.
	! !
!Cashier methodsFor: 'signals' stamp: 'CR 11/26/2020 17:07:19' prior: 50907772!
signalCartAlreadyCheckedOut
	self error: self class errorCartAlreadyCheckedOut.
	! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'CR 11/26/2020 17:07:38'!
errorCartAlreadyCheckedOut
	^ 'The cart is already checked out'! !

!methodRemoval: Cashier class #withMerchantProcessor: stamp: 'CR 11/26/2020 17:08:01'!
withMerchantProcessor: merchantProcessorToCollaborateWith
	^ self new withMerchantProcessor: merchantProcessorToCollaborateWith.

	!
!Cashier methodsFor: 'actions' stamp: 'CR 11/26/2020 17:08:34' prior: 50907750!
checkOut: aCart usingCreditCard: aCreditCard of: buyingClient
	| cartTotal idTransaction |
	self verifyOwnerOf: aCreditCard is: buyingClient.
	self verifyItIsaValidCreditCard: aCreditCard.
	self verifyCartIsNotAlreadyCheckedOut: aCart.
	cartTotal :=  aCart total.
	idTransaction := merchantProcessor charge: cartTotal to: aCreditCard.
	aCart notifyCheckOut. 
	^Ticket forTransaction: idTransaction doneBy: aCreditCard of: cartTotal.
	
	
	! !
!Cart methodsFor: 'initialization' stamp: 'CR 11/26/2020 17:08:57' prior: 50907045!
initializeAcceptingItemsOf: aCatalog

	| checkout |
	catalog := aCatalog.
	items := OrderedCollection new.
	checkout := false.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'CR 11/26/2020 17:09:13'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items checkedout'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'CR 11/26/2020 17:09:11' prior: 50907812!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.
	checkedout := false.! !
!Cart methodsFor: 'nil' stamp: 'CR 11/26/2020 17:09:28'!
notifyCheckOut
	checkedout := true.! !
!Cart methodsFor: 'cashier collaboration' stamp: 'CR 11/26/2020 17:10:03'!
alreadyCheckedOut
	^checkedout.! !
!Cart methodsFor: 'assertions' stamp: 'CR 11/26/2020 17:10:43' prior: 50907032!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self class invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'CR 11/26/2020 17:10:51' prior: 50907038!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self class invalidQuantityErrorMessage ]! !

!methodRemoval: Cart #invalidItemErrorMessage stamp: 'CR 11/26/2020 17:11:01'!
invalidItemErrorMessage
	
	^'Item is not in catalog'!
!CartTest methodsFor: 'tests' stamp: 'CR 11/26/2020 17:11:15' prior: 50906765!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'CR 11/26/2020 17:11:21' prior: 50906799!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!Cart class methodsFor: 'error messages' stamp: 'CR 11/26/2020 17:11:44'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !

!methodRemoval: Cart #invalidQuantityErrorMessage stamp: 'CR 11/26/2020 17:11:54'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'!
!CartTest methodsFor: 'tests' stamp: 'CR 11/26/2020 17:12:04' prior: 50906786!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!Cart class methodsFor: 'error messages' stamp: 'CR 11/26/2020 17:12:11'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CR 11/26/2020 17:12:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CR 11/26/2020 17:12:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CR 11/26/2020 17:12:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CR 11/26/2020 17:12:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CR 11/26/2020 17:12:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CR 11/26/2020 17:12:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CR 11/26/2020 17:12:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CR 11/26/2020 17:12:15'!
PASSED!

!methodRemoval: CashierTest #createCashierWithMerchatProcessorSimulatorOfValidOperations stamp: 'CR 11/26/2020 17:13:24'!
createCashierWithMerchatProcessorSimulatorOfValidOperations
	^ Cashier withMerchantProcessor: MPSimulatorValidPayment new.!
!CashierTest methodsFor: 'checkout tests' stamp: 'CR 11/26/2020 17:15:02' prior: 50906995!
test04checkOutCartWhenNotOwnerIsPayingRaisesError

	| cashier creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createValidCreditCard .

	self should:  [cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Fulano' .]
	raise:  Error
	withMessageText: Cashier errorInvalidClientIsBuying.

	
! !
!CashierTest methodsFor: 'checkout tests' stamp: 'CR 11/26/2020 17:18:08' prior: 50907726!
test06checkOutCartWithManyItemsWithValidCreditCardButInvalidPaymentRaisesError

	| cashier creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorInvalidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createValidCreditCard.
	
	self should: [] raise: Error withExceptionDo: [].
	self should:  [cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Carlitos Ticona' .]
	raise:  Error
	withMessageText: MPSimulatorInvalidPayment errorUnsuccesfulPayment. 
	
	
	

	
! !
!CashierTest methodsFor: 'checkout tests' stamp: 'CR 11/26/2020 17:20:09' prior: 50907962!
test06checkOutCartWithManyItemsWithValidCreditCardButInvalidPaymentRaisesError

	| cashier creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorInvalidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createValidCreditCard.
	
	self should: [cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Carlitos Ticona' .] 
	raise: Error 
	withExceptionDo: [: anError| 
		anError messageText = MPSimulatorInvalidPayment errorUnsuccesfulPayment.
		self deny: cartWithManyItems alreadyCheckedOut.
		].
	

	
! !

!testRun: #CashierTest #test06checkOutCartWithManyItemsWithValidCreditCardButInvalidPaymentRaisesError stamp: 'CR 11/26/2020 17:20:11'!
PASSED!
!CashierTest methodsFor: 'checkout tests' stamp: 'CR 11/26/2020 17:20:30' prior: 50907638!
test05checkOutCartWithOneItemWithValidCreditCardButInvalidPaymentRaisesError

	| cashier cartWithOneItem creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorInvalidPayment new. 
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	
	self should: [cashier checkOut: cartWithOneItem usingCreditCard: creditCart of: 'Carlitos Ticona' .] 
	raise: Error 
	withExceptionDo: [: anError| 
		anError messageText = MPSimulatorInvalidPayment errorUnsuccesfulPayment.
		self deny: cartWithOneItem alreadyCheckedOut.
		].

	
! !
!CashierTest methodsFor: 'checkout tests' stamp: 'CR 11/26/2020 17:21:19' prior: 50906960!
test03checkOutCartWithExpiredCreditCardRaisesError

	| cashier creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createInvalidCreditCard.

	self should: [cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Carlitos Ticona' .] 
	raise: Error 
	withExceptionDo: [: anError| 
		self assert: anError messageText = Cashier errorExpiredCreditCard.
		self deny: cartWithManyItems alreadyCheckedOut.
		].

	
! !

!testRun: #CashierTest #test03checkOutCartWithExpiredCreditCardRaisesError stamp: 'CR 11/26/2020 17:21:20'!
PASSED!
!CashierTest methodsFor: 'checkout tests' stamp: 'CR 11/26/2020 17:21:28' prior: 50908010!
test05checkOutCartWithOneItemWithValidCreditCardButInvalidPaymentRaisesError

	| cashier cartWithOneItem creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorInvalidPayment new. 
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	
	self should: [cashier checkOut: cartWithOneItem usingCreditCard: creditCart of: 'Carlitos Ticona' .] 
	raise: Error 
	withExceptionDo: [: anError| 
		self assert: anError messageText = MPSimulatorInvalidPayment errorUnsuccesfulPayment.
		self deny: cartWithOneItem alreadyCheckedOut.
		].

	
! !
!CashierTest methodsFor: 'checkout tests' stamp: 'CR 11/26/2020 17:21:33' prior: 50907983!
test06checkOutCartWithManyItemsWithValidCreditCardButInvalidPaymentRaisesError

	| cashier creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorInvalidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createValidCreditCard.
	
	self should: [cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Carlitos Ticona' .] 
	raise: Error 
	withExceptionDo: [: anError| 
		self assert: anError messageText = MPSimulatorInvalidPayment errorUnsuccesfulPayment.
		self deny: cartWithManyItems alreadyCheckedOut.
		].
	

	
! !
!CashierTest methodsFor: 'checkout tests' stamp: 'CR 11/26/2020 17:22:06' prior: 50907945!
test04checkOutCartWhenNotOwnerIsPayingRaisesError

	| cashier creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createValidCreditCard .

	self should: [cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Fulano' .] 
	raise: Error 
	withExceptionDo: [: anError| 
		self assert: anError messageText = Cashier errorInvalidClientIsBuying.
		self deny: cartWithManyItems alreadyCheckedOut.
		].
	
! !

!testRun: #CashierTest #test04checkOutCartWhenNotOwnerIsPayingRaisesError stamp: 'CR 11/26/2020 17:22:08'!
PASSED!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCreditCardAndValidPaymentWorksCorrectly stamp: 'CR 11/26/2020 17:22:21'!
PASSED!

!testRun: #CashierTest #test02checkOutCartWithManyItemsWithValidCreditCardAndValidPaymentWorksCorrectly stamp: 'CR 11/26/2020 17:22:22'!
PASSED!

!testRun: #CashierTest #test03checkOutCartWithExpiredCreditCardRaisesError stamp: 'CR 11/26/2020 17:22:22'!
PASSED!

!testRun: #CashierTest #test04checkOutCartWhenNotOwnerIsPayingRaisesError stamp: 'CR 11/26/2020 17:22:22'!
PASSED!

!testRun: #CashierTest #test05checkOutCartWithOneItemWithValidCreditCardButInvalidPaymentRaisesError stamp: 'CR 11/26/2020 17:22:22'!
PASSED!

!testRun: #CashierTest #test06checkOutCartWithManyItemsWithValidCreditCardButInvalidPaymentRaisesError stamp: 'CR 11/26/2020 17:22:22'!
PASSED!
!CashierTest methodsFor: 'checkout tests' stamp: 'CR 11/26/2020 17:23:04' prior: 50907495!
test01checkOutCartWithOneItemWithValidCreditCardAndValidPaymentWorksCorrectly

	| cashier cartWithOneItem ticket creditCart |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithOneItem := self createCartWithOneItem.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: cartWithOneItem usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 3.5).
	self assert: (ticket creditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona').
	self assert: cartWithOneItem alreadyCheckedOut.
	
	

	
! !
!CashierTest methodsFor: 'checkout tests' stamp: 'CR 11/26/2020 17:23:14' prior: 50907409!
test02checkOutCartWithManyItemsWithValidCreditCardAndValidPaymentWorksCorrectly

	| cashier ticket creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createValidCreditCard.
	ticket := cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self assert: (ticket amountCharged = 18.7).
	self assert: (ticket creditCardNumber = creditCart number).
	self assert: (ticket paidBy = 'Carlitos Ticona').
	self assert: cartWithManyItems alreadyCheckedOut.
	
	

	
! !

!methodRemoval: Cashier #withMerchantProcessor: stamp: 'CR 11/26/2020 17:23:46'!
withMerchantProcessor: merchantProcessorToCollaborateWith
	merchantProcessor := merchantProcessorToCollaborateWith.!

!testRun: #CashierTest #test01checkOutCartWithOneItemWithValidCreditCardAndValidPaymentWorksCorrectly stamp: 'CR 11/26/2020 17:25:56'!
PASSED!

!testRun: #CashierTest #test02checkOutCartWithManyItemsWithValidCreditCardAndValidPaymentWorksCorrectly stamp: 'CR 11/26/2020 17:25:56'!
PASSED!

!testRun: #CashierTest #test03checkOutCartWithExpiredCreditCardRaisesError stamp: 'CR 11/26/2020 17:25:56'!
PASSED!

!testRun: #CashierTest #test04checkOutCartWhenNotOwnerIsPayingRaisesError stamp: 'CR 11/26/2020 17:25:56'!
PASSED!

!testRun: #CashierTest #test05checkOutCartWithOneItemWithValidCreditCardButInvalidPaymentRaisesError stamp: 'CR 11/26/2020 17:25:56'!
PASSED!

!testRun: #CashierTest #test06checkOutCartWithManyItemsWithValidCreditCardButInvalidPaymentRaisesError stamp: 'CR 11/26/2020 17:25:56'!
PASSED!
!CashierTest methodsFor: 'checkout tests' stamp: 'CR 11/26/2020 17:27:57'!
test07checkOutCartAlreadyCheckedOutRaisesError

	| cashier creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorInvalidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createValidCreditCard.
	cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self should: [cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Carlitos Ticona' .] 
	raise: Error 
	withExceptionDo: [: anError| 
		self assert: anError messageText = Cashier errorCartAlreadyCheckedOut.
		].
	

	
! !

!testRun: #CashierTest #test07checkOutCartAlreadyCheckedOutRaisesError stamp: 'CR 11/26/2020 17:28:01'!
ERROR!

!testRun: #CashierTest #test07checkOutCartAlreadyCheckedOutRaisesError stamp: 'CR 11/26/2020 17:28:01'!
ERROR!

!testRun: #CashierTest #test07checkOutCartAlreadyCheckedOutRaisesError stamp: 'CR 11/26/2020 17:28:10'!
ERROR!

!testRun: #CashierTest #test07checkOutCartAlreadyCheckedOutRaisesError stamp: 'CR 11/26/2020 17:28:10'!
ERROR!
!CashierTest methodsFor: 'checkout tests' stamp: 'CR 11/26/2020 17:28:18' prior: 50908229!
test07checkOutCartAlreadyCheckedOutRaisesError

	| cashier creditCart cartWithManyItems |
	cashier := self createCashier.
	cashier perfomCheckOutsWith: MPSimulatorValidPayment new.
	cartWithManyItems := self createCartWithManyItems.
	creditCart := self createValidCreditCard.
	cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Carlitos Ticona' .
	
	self should: [cashier checkOut: cartWithManyItems usingCreditCard: creditCart of: 'Carlitos Ticona' .] 
	raise: Error 
	withExceptionDo: [: anError| 
		self assert: anError messageText = Cashier errorCartAlreadyCheckedOut.
		].
	

	
! !

!testRun: #CashierTest #test07checkOutCartAlreadyCheckedOutRaisesError stamp: 'CR 11/26/2020 17:28:24'!
PASSED!

----QUIT----(26 November 2020 17:29:34) CuisUniversity-4384.image priorSource: 18399314!

----STARTUP---- (2 December 2020 19:01:12) as /Users/celeste/facultad/ing1/si-exercises/CuisUniversity-4384.image!


!classRemoval: #Ticket stamp: 'CR 12/2/2020 19:01:23'!
Object subclass: #Ticket
	instanceVariableNames: 'client amountPaid creditCardNumber transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MPSimulatorValidPayment stamp: 'CR 12/2/2020 19:01:24'!
MerchantProcessorSimulator subclass: #MPSimulatorValidPayment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MPSimulatorInvalidPayment stamp: 'CR 12/2/2020 19:01:24'!
MerchantProcessorSimulator subclass: #MPSimulatorInvalidPayment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorSimulator stamp: 'CR 12/2/2020 19:01:24'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'CR 12/2/2020 19:01:25'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'CR 12/2/2020 19:01:25'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'CR 12/2/2020 19:01:25'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items checkedout'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'CR 12/2/2020 19:01:26'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'CR 12/2/2020 19:01:26'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /Users/celeste/facultad/ing1/si-exercises/20 - TusLibrosInterface/TusLibros.st----!

!testRun: #RestInterfaceTest #test01newCartsCreatedAreEmpty stamp: 'CR 12/2/2020 22:10:45'!
PASSED!

!testRun: #RestInterfaceTest #test02UserIsAuthenticatedWhenCreatesANewCart stamp: 'CR 12/2/2020 22:10:45'!
PASSED!

!testRun: #RestInterfaceTest #test03CannotAddABookToAnUnknownCart stamp: 'CR 12/2/2020 22:10:45'!
PASSED!

!testRun: #RestInterfaceTest #test04AddingABookToACreatedCartWorksCorrectly stamp: 'CR 12/2/2020 22:10:45'!
PASSED!

!testRun: #RestInterfaceTest #test05CannotListItemsOfAnInvalidCart stamp: 'CR 12/2/2020 22:10:45'!
PASSED!

!testRun: #RestInterfaceTest #test06CannotCheckOutAnInvalidCart stamp: 'CR 12/2/2020 22:10:45'!
FAILURE!

!testRun: #RestInterfaceTest #test06CannotCheckOutAnInvalidCart stamp: 'CR 12/2/2020 22:10:45'!
FAILURE!

!testRun: #RestInterfaceTest #test01newCartsCreatedAreEmpty stamp: 'CR 12/2/2020 22:13:12'!
PASSED!

!testRun: #RestInterfaceTest #test02UserIsAuthenticatedWhenCreatesANewCart stamp: 'CR 12/2/2020 22:13:13'!
PASSED!

!testRun: #RestInterfaceTest #test03CannotAddABookToAnUnknownCart stamp: 'CR 12/2/2020 22:13:16'!
PASSED!

!testRun: #RestInterfaceTest #test04AddingABookToACreatedCartWorksCorrectly stamp: 'CR 12/2/2020 22:13:19'!
PASSED!

!testRun: #RestInterfaceTest #test05CannotListItemsOfAnInvalidCart stamp: 'CR 12/2/2020 22:13:22'!
PASSED!
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 22:36:19'!
checkout: aCartToCheckOut withCreditCard: cardNumberToPayWith expiratingOn: cardExpirationDate for: clientID ! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'CR 12/2/2020 22:50:13'!
defaultCardNumber
	^'245323'! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'CR 12/2/2020 22:50:44'!
defaultExpirationDay
	
	^ today! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'CR 12/2/2020 22:50:53' prior: 50909292!
defaultExpirationDay
	
	^ today + 1! !
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'CR 12/2/2020 22:51:27'!
defaultCardOwner
	^ 'BelenT'! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'CR 12/2/2020 22:51:57'!
defaultExpirationDate
	
	^ today + 1! !

!methodRemoval: StoreTestObjectsFactory #defaultExpirationDay stamp: 'CR 12/2/2020 22:52:00'!
defaultExpirationDay
	
	^ today + 1!
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 22:57:38' prior: 50909281!
checkout: aCartToCheckOut withCreditCard: cardToPayWith expiratingOn: cardExpirationDate for: clientID ! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 22:57:53'!
checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID ! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/2/2020 22:58:21' prior: 50908698!
test06CannotCheckOutAnInvalidCart

	| interface |
	interface := RestInterface for: (Supermarket 
				withCatalog: testObjectFactory defaultCatalog) withAuthenticator: testObjectFactory defaultAuthenticator.
	
	self should: [ interface checkout: (testObjectFactory createCart) withCreditCard: (testObjectFactory notExpiredCreditCard ) for: (testObjectFactory defaultCardOwner) ]
	raise: Error 
	withMessageText: RestInterface unknownCartErrorMessage.
	
	
				! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 23:02:25' prior: 50909318!
checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID 
	
	| aMerchantProcessor aSalesBook today |
	Cashier toCheckout: aCartToCheckOut charging: cardToPayWith throught: aMerchantProcessor on: today registeringOn: aSalesBook. 
! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 23:04:47' prior: 50909341!
checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID 
	
	| aMerchantProcessor aSalesBook now |
	now := DateAndTime now.
	Cashier toCheckout: aCartToCheckOut charging: cardToPayWith throught: aMerchantProcessor on: now registeringOn: aSalesBook. 
! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 23:05:09' prior: 50909352!
checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID 
	
	| aMerchantProcessor aSalesBook now |
	now := DateAndTime now.
	Cashier toCheckout: aCartToCheckOut charging: cardToPayWith throught: aMerchantProcessor on: self timeNow registeringOn: aSalesBook. 
! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 23:05:24' prior: 50909363!
checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID 
	
	| aMerchantProcessor aSalesBook |
	Cashier toCheckout: aCartToCheckOut charging: cardToPayWith throught: aMerchantProcessor on: self timeNow registeringOn: aSalesBook. 
! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 23:05:38'!
timeNow
	^DateAndTime now.! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/2/2020 23:07:49'!
test06ListItemsOfValidCartWorksCorrectly

	| interface |
	interface := RestInterface for: (Supermarket 
				withCatalog: testObjectFactory defaultCatalog) withAuthenticator: testObjectFactory defaultAuthenticator.
	
	self should: [ interface listCart: (testObjectFactory createCart)]
	raise: Error 
	withMessageText: RestInterface unknownCartErrorMessage.
	
	
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/2/2020 23:07:58'!
test07CannotCheckOutAnInvalidCart

	| interface |
	interface := RestInterface for: (Supermarket 
				withCatalog: testObjectFactory defaultCatalog) withAuthenticator: testObjectFactory defaultAuthenticator.
	
	self should: [ interface checkout: (testObjectFactory createCart) withCreditCard: (testObjectFactory notExpiredCreditCard ) for: (testObjectFactory defaultCardOwner) ]
	raise: Error 
	withMessageText: RestInterface unknownCartErrorMessage.
	
	
				! !

!methodRemoval: RestInterfaceTest #test06CannotCheckOutAnInvalidCart stamp: 'CR 12/2/2020 23:08:00'!
test06CannotCheckOutAnInvalidCart

	| interface |
	interface := RestInterface for: (Supermarket 
				withCatalog: testObjectFactory defaultCatalog) withAuthenticator: testObjectFactory defaultAuthenticator.
	
	self should: [ interface checkout: (testObjectFactory createCart) withCreditCard: (testObjectFactory notExpiredCreditCard ) for: (testObjectFactory defaultCardOwner) ]
	raise: Error 
	withMessageText: RestInterface unknownCartErrorMessage.
	
	
				!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/2/2020 23:08:33' prior: 50909389!
test06ListItemsOfValidCartWorksCorrectly

	| interface |
	interface := RestInterface for: (Supermarket 
				withCatalog: testObjectFactory defaultCatalog) withAuthenticator: testObjectFactory defaultAuthenticator.
	
	self assert: (interface listCart: (testObjectFactory createCart) isEmpty).
				! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 23:09:03' prior: 50909033!
listCart: aCartID 
	^ supermarket listCartsItemsOf: aCartID  ifAbsent: [ self error: self class unknownCartErrorMessage ]. ! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 23:09:09' prior: 50909450!
listCart: aCartID 
	^ supermarket listCartsItemsOf: aCartID listItems ifAbsent: [ self error: self class unknownCartErrorMessage ]. ! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 23:09:17' prior: 50909457!
listCart: aCartID 
	^ supermarket listCartsItemsOf: aCartID ifAbsent: [ self error: self class unknownCartErrorMessage ]. ! !

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/2/2020 23:11:57'!
ERROR!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/2/2020 23:11:57'!
ERROR!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/2/2020 23:11:58'!
ERROR!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/2/2020 23:12:39'!
ERROR!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/2/2020 23:12:54' prior: 50909438!
test06ListItemsOfValidCartWorksCorrectly

	| interface |
	interface := RestInterface for: (Supermarket 
				withCatalog: testObjectFactory defaultCatalog) withAuthenticator: testObjectFactory defaultAuthenticator.
	
	self assert: ((interface listCart: (testObjectFactory createCart)) isEmpty).
				! !

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/2/2020 23:12:55'!
ERROR!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/2/2020 23:12:55'!
ERROR!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/2/2020 23:12:55'!
ERROR!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/2/2020 23:13:27' prior: 50909485!
test06ListItemsOfValidCartWorksCorrectly

	| interface |
	interface := RestInterface for: (Supermarket 
				withCatalog: testObjectFactory defaultCatalog) withAuthenticator: testObjectFactory defaultAuthenticator.
	
	self assert: (interface listCart: (testObjectFactory createCart)) isEmpty.
				! !

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/2/2020 23:13:29'!
ERROR!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/2/2020 23:13:29'!
ERROR!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/2/2020 23:13:29'!
ERROR!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/2/2020 23:13:45'!
ERROR!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/2/2020 23:15:07' prior: 50909508!
test06ListItemsOfValidCartWorksCorrectly

	| interface supermarket supermarketWithCart |
	supermarketWithCart := Supermarket		withCatalog: testObjectFactory defaultCatalog.
	interface := RestInterface for: (Supermarket 
				withCatalog: testObjectFactory defaultCatalog) withAuthenticator: testObjectFactory defaultAuthenticator.
	
	self assert: (interface listCart: (testObjectFactory createCart)) isEmpty.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/2/2020 23:15:49' prior: 50909534!
test06ListItemsOfValidCartWorksCorrectly

	| interface supermarketWithCart cartID |
	supermarketWithCart := Supermarket		withCatalog: testObjectFactory defaultCatalog.
	cartID := supermarketWithCart createCart.
	interface := RestInterface for: supermarketWithCart withAuthenticator: testObjectFactory defaultAuthenticator.
	
	self assert: (interface listCart: (testObjectFactory createCart)) isEmpty.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/2/2020 23:16:02' prior: 50909550!
test06ListItemsOfValidCartWorksCorrectly

	| interface supermarketWithCart cartID |
	supermarketWithCart := Supermarket		withCatalog: testObjectFactory defaultCatalog.
	cartID := supermarketWithCart createCart.
	interface := RestInterface for: supermarketWithCart withAuthenticator: testObjectFactory defaultAuthenticator.
	
	self assert: (interface listCart: cartID) isEmpty.
				! !

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/2/2020 23:16:04'!
ERROR!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/2/2020 23:16:04'!
ERROR!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/2/2020 23:16:19' prior: 50909566!
test06ListItemsOfValidCartWorksCorrectly

	| interface supermarketWithCart cartID |
	supermarketWithCart := Supermarket		withCatalog: testObjectFactory defaultCatalog.
	cartID := supermarketWithCart newCart.
	interface := RestInterface for: supermarketWithCart withAuthenticator: testObjectFactory defaultAuthenticator.
	
	self assert: (interface listCart: cartID) isEmpty.
				! !

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/2/2020 23:16:21'!
PASSED!

!testRun: #RestInterfaceTest #test04AddingABookToACreatedCartWorksCorrectly stamp: 'CR 12/2/2020 23:17:49'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/2/2020 23:18:22' prior: 50909588!
test06ListItemsOfValidCartWorksCorrectly

	| interface supermarketWithCart cartID itemToAdd |
	supermarketWithCart := Supermarket		withCatalog: testObjectFactory defaultCatalog.
	cartID := supermarketWithCart newCart.
	interface := RestInterface for: supermarketWithCart withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	self assert: (interface listCart: cartID) isEmpty.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/2/2020 23:19:12' prior: 50909610!
test06ListItemsOfValidCartWorksCorrectly

	| interface cartID itemToAdd |
	interface := RestInterface for: (Supermarket		withCatalog: testObjectFactory defaultCatalog) withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	self assert: (interface listCart: cartID) = (Bag with: itemToAdd).
				! !

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/2/2020 23:19:14'!
PASSED!

!testRun: #RestInterfaceTest #test01newCartsCreatedAreEmpty stamp: 'CR 12/2/2020 23:19:26'!
PASSED!

!testRun: #RestInterfaceTest #test02UserIsAuthenticatedWhenCreatesANewCart stamp: 'CR 12/2/2020 23:19:26'!
PASSED!

!testRun: #RestInterfaceTest #test03CannotAddABookToAnUnknownCart stamp: 'CR 12/2/2020 23:19:26'!
PASSED!

!testRun: #RestInterfaceTest #test04AddingABookToACreatedCartWorksCorrectly stamp: 'CR 12/2/2020 23:19:26'!
PASSED!

!testRun: #RestInterfaceTest #test05CannotListItemsOfAnInvalidCart stamp: 'CR 12/2/2020 23:19:26'!
PASSED!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/2/2020 23:19:26'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutAnInvalidCart stamp: 'CR 12/2/2020 23:19:26'!
FAILURE!

!testRun: #RestInterfaceTest #test07CannotCheckOutAnInvalidCart stamp: 'CR 12/2/2020 23:19:26'!
FAILURE!
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 23:20:44' prior: 50909312!
checkout: aCartToCheckOut withCreditCard: cardToPayWith expiratingOn: cardExpirationDate for: clientID 
	! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 23:21:12' prior: 50909375!
checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID 
	
	| aMerchantProcessor aSalesBook aCashierToPayWith |
	aCashierToPayWith := Cashier toCheckout: aCartToCheckOut charging: cardToPayWith throught: aMerchantProcessor on: self timeNow registeringOn: aSalesBook. 
	
! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 23:21:32' prior: 50909688!
checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID 
	
	| aMerchantProcessor aSalesBook aCashierToPayWith |
	aCashierToPayWith := Cashier toCheckout: aCartToCheckOut charging: cardToPayWith throught: aMerchantProcessor on: self timeNow registeringOn: aSalesBook. 
	
! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 23:25:45' prior: 50909700!
checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID 
	| aMerchantProcessor aSalesBook aCashierToPayWith |
	self validateCreditCard: cardToPayWith.
	aCashierToPayWith := Cashier toCheckout: aCartToCheckOut charging: cardToPayWith throught: aMerchantProcessor on: self timeNow registeringOn: aSalesBook. 
	
! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 23:27:04'!
cardToPayWith
! !
!RestInterface class methodsFor: 'error messages' stamp: 'CR 12/2/2020 23:27:33'!
expiredCreditCard
	^ 'The credit card is expired'.! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 23:28:30'!
validateCreditCard: cardToPayWith
	(cardToPayWith expiringOn: self timeNow) ifTrue: [self error: self class expiredCreditCard].! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 23:29:03' prior: 50909733!
validateCreditCard: cardToPayWith
	(cardToPayWith isExpiredOn: self timeNow) ifTrue: [self error: self class expiredCreditCard].! !

!methodRemoval: RestInterface #validateCreditCard: stamp: 'CR 12/2/2020 23:42:44'!
validateCreditCard: cardToPayWith
	(cardToPayWith isExpiredOn: self timeNow) ifTrue: [self error: self class expiredCreditCard].!
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 23:43:05' prior: 50909712!
checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID 
	| aMerchantProcessor aSalesBook aCashierToPayWith |
	
	aCashierToPayWith := Cashier toCheckout: aCartToCheckOut charging: cardToPayWith throught: aMerchantProcessor on: self timeNow registeringOn: aSalesBook. 
	
! !

!classDefinition: #Supermarket category: 'TusLibros' stamp: 'CR 12/2/2020 23:44:05'!
Object subclass: #Supermarket
	instanceVariableNames: 'catalog cashier carts salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Supermarket methodsFor: 'initialization' stamp: 'CR 12/2/2020 23:44:03' prior: 50909195!
initializeWithCatalog: aCatalog 
	catalog := aCatalog.
	carts := IdentityDictionary new.
	salesBook := OrderedCollection new.
! !
!Supermarket methodsFor: 'nil' stamp: 'CR 12/2/2020 23:44:46'!
addSale: aSaleToBeAdded
	salesBook add: aSaleToBeAdded.! !

Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'CR 12/2/2020 23:45:41'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

MerchantProcessor subclass: #MPValidTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MPValidTransaction category: 'TusLibros' stamp: 'CR 12/2/2020 23:47:18'!
MerchantProcessor subclass: #MPValidTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

MerchantProcessor subclass: #MPInvalidTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MPInvalidTransaction category: 'TusLibros' stamp: 'CR 12/2/2020 23:47:22'!
MerchantProcessor subclass: #MPInvalidTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 23:49:13' prior: 50909754!
checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID 
	| aMerchantProcessor aSalesBook aCashierToPayWith |
	
	aCashierToPayWith := Cashier toCheckout: aCartToCheckOut charging: cardToPayWith through: aMerchantProcessor on: self timeNow registeringOn: aSalesBook. 
	
! !
!Cashier methodsFor: 'initialization' stamp: 'CR 12/2/2020 23:49:57'!
initializeToCheckout: aCart charging: aCreditCard through: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook! !

!methodRemoval: Cashier #initializeToCheckout:charging:throught:registeringOn: stamp: 'CR 12/2/2020 23:50:01'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook!
!Cashier class methodsFor: 'instance creation' stamp: 'CR 12/2/2020 23:50:10'!
toCheckout: aCart charging: aCreditCard through: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard through: aMerchantProcessor registeringOn: aSalesBook! !

!methodRemoval: Cashier class #toCheckout:charging:throught:on:registeringOn: stamp: 'CR 12/2/2020 23:50:13'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook!
!CashierTest methodsFor: 'tests' stamp: 'CR 12/2/2020 23:50:27' prior: 50908467!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			through: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'CR 12/2/2020 23:50:31' prior: 50908485!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		through: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'CR 12/2/2020 23:50:35' prior: 50908501!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				through: self
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'CR 12/2/2020 23:50:39' prior: 50908522!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		through: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'CR 12/2/2020 23:50:42' prior: 50908540!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		through: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'CR 12/2/2020 23:50:47' prior: 50908564!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		through: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!methodRemoval: RestInterface #checkout:withCreditCard:expiratingOn:for: stamp: 'CR 12/2/2020 23:51:10'!
checkout: aCartToCheckOut withCreditCard: cardToPayWith expiratingOn: cardExpirationDate for: clientID 
	!
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 23:54:08' prior: 50909821!
checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID 

	supermarket checkout: aCartToCheckOut charging: cardToPayWith.! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 23:54:13' prior: 50910010!
checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID 

	^ supermarket checkout: aCartToCheckOut charging: cardToPayWith.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'CR 12/2/2020 23:54:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'CR 12/2/2020 23:54:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'CR 12/2/2020 23:54:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'CR 12/2/2020 23:54:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'CR 12/2/2020 23:54:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'CR 12/2/2020 23:54:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'CR 12/2/2020 23:54:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'CR 12/2/2020 23:54:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'CR 12/2/2020 23:54:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'CR 12/2/2020 23:54:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'CR 12/2/2020 23:54:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'CR 12/2/2020 23:54:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'CR 12/2/2020 23:54:32'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'CR 12/2/2020 23:54:32'!
PASSED!
!RestInterface methodsFor: 'api' stamp: 'CR 12/2/2020 23:57:55' prior: 50910017!
checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID 

	^ supermarket checkout: aCartToCheckOut charging: cardToPayWith ifInvalidCart: [self class unknownCartErrorMessage].! !

!classDefinition: #Supermarket category: 'TusLibros' stamp: 'CR 12/3/2020 00:01:01'!
Object subclass: #Supermarket
	instanceVariableNames: 'catalog cashier carts salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Supermarket methodsFor: 'cart' stamp: 'CR 12/3/2020 00:00:55'!
checkout: cartID charging: creditCardToPayWith ifInvalidCart: errorBlock 
	| aCartToCheckOut aCashierToPayWith |
	aCartToCheckOut := carts at: cartID ifAbsent: errorBlock.
	aCashierToPayWith := Cashier toCheckout: aCartToCheckOut charging: creditCardToPayWith through: merchantProcessor on: self timeNow registeringOn: salesBook. 
	
	

	! !
!Supermarket methodsFor: 'cart' stamp: 'CR 12/3/2020 00:01:23' prior: 50910087!
checkout: cartID charging: creditCardToPayWith ifInvalidCart: errorBlock 
	| aCartToCheckOut aCashierToPayWith |
	aCartToCheckOut := carts at: cartID ifAbsent: errorBlock.
	aCashierToPayWith := Cashier toCheckout: aCartToCheckOut charging: creditCardToPayWith through: merchantProcessor on: self timeNow registeringOn: salesBook. 
	aCashierToPayWith checkOut.
	
	

	! !
!Supermarket methodsFor: 'cart' stamp: 'CR 12/3/2020 00:04:25' prior: 50910101!
checkout: cartID charging: creditCardToPayWith ifInvalidCart: errorBlock 
	| aCartToCheckOut aCashierToPayWith |
	aCartToCheckOut := carts at: cartID ifAbsent: errorBlock.
	aCashierToPayWith := Cashier toCheckout: aCartToCheckOut charging: creditCardToPayWith through: merchantProcessor on: self timeNow registeringOn: salesBook. 
	^ aCashierToPayWith checkOut.
	
	

	! !

!methodRemoval: Supermarket #addSale: stamp: 'CR 12/3/2020 00:05:33'!
addSale: aSaleToBeAdded
	salesBook add: aSaleToBeAdded.!
!MPInvalidTransaction methodsFor: 'nil' stamp: 'CR 12/3/2020 00:06:58'!
debit: amount from: creditCard
	self error: self class invalidTransaction.! !
!MPInvalidTransaction class methodsFor: 'no messages' stamp: 'CR 12/3/2020 00:07:17'!
invalidTransaction
	^'Invalid transaction!!'! !
!MPValidTransaction methodsFor: 'nil' stamp: 'CR 12/3/2020 00:07:28'!
debit: amount from: creditCard
	! !
!MPValidTransaction methodsFor: 'as yet unclassified' stamp: 'CR 12/3/2020 00:08:05' prior: 50910144!
debit: amount from: creditCard
	^'334'! !
!Cashier methodsFor: 'checkout - private' stamp: 'CR 12/3/2020 00:11:50' prior: 50908883!
createSale

	^ Sale of: total
 ! !
!Cashier methodsFor: 'checkout - private' stamp: 'CR 12/3/2020 00:13:02' prior: 50910154!
createSale

	^ Sale of: total with: cart listItems.
 ! !
!Sale class methodsFor: 'instance creation' stamp: 'CR 12/3/2020 00:13:49'!
of: aTotal with: boughtItems

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withElements: boughtItems.! !

!methodRemoval: Sale class #of: stamp: 'CR 12/3/2020 00:14:02'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal !

!classDefinition: #Sale category: 'TusLibros' stamp: 'CR 12/3/2020 00:14:39'!
Object subclass: #Sale
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'CR 12/3/2020 00:14:37'!
initializeTotal: aTotal withItems: boughtItems.

	total := aTotal.
	items := boughtItems.
	! !

!methodRemoval: Sale #initializeTotal: stamp: 'CR 12/3/2020 00:14:41'!
initializeTotal: aTotal

	total := aTotal !
!Sale class methodsFor: 'instance creation' stamp: 'CR 12/3/2020 00:14:50' prior: 50910163!
of: aTotal with: boughtItems

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withItems: boughtItems.! !
!Sale class methodsFor: 'instance creation' stamp: 'CR 12/3/2020 00:17:55' prior: 50910192!
of: aTotal with: boughtItems

	(aTotal <= 0) ifTrue: [self hasToBeNonNegative].
	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withItems: boughtItems.! !
!Sale class methodsFor: 'instance creation' stamp: 'CR 12/3/2020 00:18:51'!
hasToBeNonNegative
	^'Sale amount has to be non negative!!'! !
!Sale class methodsFor: 'instance creation' stamp: 'CR 12/3/2020 00:19:21' prior: 50910200!
of: aTotal with: boughtItems

	(aTotal <= 0) ifTrue: [self hasToBeNonNegative].
	^self new initializeTotal: aTotal withItems: boughtItems.! !
!Cashier methodsFor: 'checkout' stamp: 'CR 12/3/2020 00:20:32' prior: 50908896!
checkOut

	self calculateTotal.
	self registerSale.
	^ self debitTotal.! !
!Cashier methodsFor: 'checkout - private' stamp: 'CR 12/3/2020 00:23:54' prior: 50908887!
debitTotal
	
	^ merchantProcessor debit: total from: creditCard.
	! !

!classDefinition: #MPValidTransaction category: 'TusLibros' stamp: 'CR 12/3/2020 00:26:18'!
MerchantProcessor subclass: #MPValidTransaction
	instanceVariableNames: 'transactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MPValidTransaction methodsFor: 'nil' stamp: 'CR 12/3/2020 00:26:15' overrides: 16896425!
initialize
	transactionID := 0. ! !
!MPValidTransaction methodsFor: 'as yet unclassified' stamp: 'CR 12/3/2020 00:26:30' prior: 50910149!
debit: amount from: creditCard
	^ transactionID. ! !

!testRun: #RestInterfaceTest #test07CannotCheckOutAnInvalidCart stamp: 'CR 12/3/2020 00:26:39'!
FAILURE!

!testRun: #RestInterfaceTest #test07CannotCheckOutAnInvalidCart stamp: 'CR 12/3/2020 00:26:39'!
FAILURE!

!testRun: #RestInterfaceTest #test07CannotCheckOutAnInvalidCart stamp: 'CR 12/3/2020 00:27:27'!
FAILURE!

!testRun: #RestInterfaceTest #test07CannotCheckOutAnInvalidCart stamp: 'CR 12/3/2020 00:27:50'!
FAILURE!

!methodRemoval: RestInterface #timeNow stamp: 'CR 12/3/2020 00:29:30'!
timeNow
	^DateAndTime now.!
!Supermarket methodsFor: 'nil' stamp: 'CR 12/3/2020 00:29:36'!
timeNow
	^DateAndTime now.! !

!testRun: #RestInterfaceTest #test01newCartsCreatedAreEmpty stamp: 'CR 12/3/2020 00:29:40'!
PASSED!

!testRun: #RestInterfaceTest #test02UserIsAuthenticatedWhenCreatesANewCart stamp: 'CR 12/3/2020 00:29:40'!
PASSED!

!testRun: #RestInterfaceTest #test03CannotAddABookToAnUnknownCart stamp: 'CR 12/3/2020 00:29:40'!
PASSED!

!testRun: #RestInterfaceTest #test04AddingABookToACreatedCartWorksCorrectly stamp: 'CR 12/3/2020 00:29:40'!
PASSED!

!testRun: #RestInterfaceTest #test05CannotListItemsOfAnInvalidCart stamp: 'CR 12/3/2020 00:29:40'!
PASSED!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/3/2020 00:29:40'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutAnInvalidCart stamp: 'CR 12/3/2020 00:29:40'!
FAILURE!

!testRun: #RestInterfaceTest #test07CannotCheckOutAnInvalidCart stamp: 'CR 12/3/2020 00:29:40'!
FAILURE!

!testRun: #RestInterfaceTest #test07CannotCheckOutAnInvalidCart stamp: 'CR 12/3/2020 00:29:51'!
FAILURE!

!testRun: #RestInterfaceTest #test07CannotCheckOutAnInvalidCart stamp: 'CR 12/3/2020 00:29:51'!
FAILURE!

!testRun: #RestInterfaceTest #test07CannotCheckOutAnInvalidCart stamp: 'CR 12/3/2020 00:30:20'!
FAILURE!

!testRun: #RestInterfaceTest #test07CannotCheckOutAnInvalidCart stamp: 'CR 12/3/2020 00:30:43'!
FAILURE!

carts at: cartID ifAbsent: errorBlock.!

self value.!
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 00:33:31' prior: 50910070!
checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID 

	^ supermarket checkout: aCartToCheckOut charging: cardToPayWith ifInvalidCart: [self error: self class unknownCartErrorMessage].! !

!testRun: #RestInterfaceTest #test07CannotCheckOutAnInvalidCart stamp: 'CR 12/3/2020 00:33:39'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 00:34:50' prior: 50909403!
test07CannotCheckOutAnInvalidCart

	| interface |
	interface := RestInterface for: (Supermarket 
				withCatalog: testObjectFactory defaultCatalog) withAuthenticator: testObjectFactory defaultAuthenticator.
	
	self should: [ interface checkout: (testObjectFactory createCart) withCreditCard: (testObjectFactory notExpiredCreditCard ) for: (testObjectFactory defaultCardOwner) ]
	raise: Error 
	withMessageText: RestInterface unknownCartErrorMessage.
	
	
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 00:37:08'!
test08CheckOutValidCartWorksCorrectly

	| interface cartID itemToAdd |
	interface := RestInterface for: (Supermarket		withCatalog: testObjectFactory defaultCatalog) withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	
				! !

----SNAPSHOT----(3 December 2020 00:40:24) CuisUniversity-4384.image priorSource: 18452461!

!classDefinition: #RestInterface category: 'TusLibros' stamp: 'CR 12/3/2020 00:48:15'!
Object subclass: #RestInterface
	instanceVariableNames: 'supermarket authenticator cartsByClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RestInterface methodsFor: 'initialization' stamp: 'CR 12/3/2020 00:48:12' prior: 50909040!
initializeWith: aSupermarket withAuthenticator: anAuthenticator 
	supermarket := aSupermarket.
	authenticator := anAuthenticator.
	cartsByClient := Dictionary new.
! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 00:49:52' prior: 50909025!
createCartForClient: aClientID withPassword: passwordOfClientWhoIsCreatingACart
	| newCartID |
	self validateUser: aClientID withPassword: passwordOfClientWhoIsCreatingACart.
	newCartID := supermarket newCart.
	self assignNewCart: newCartID toClient: aClientID.! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 00:54:36'!
assignNewCart: newCartID toClient: aClientID
	cartsByClient at: aClientID ifAbsent: [].! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 00:58:58' prior: 50910391!
assignNewCart: newCartID toClient: aClientID

	(cartsByClient at: aClientID ifAbsentPut: [OrderedCollection new]) add: newCartID.! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 00:59:28' prior: 50910380!
createCartForClient: aClientID withPassword: passwordOfClientWhoIsCreatingACart
	| newCartID |
	self validateUser: aClientID withPassword: passwordOfClientWhoIsCreatingACart.
	newCartID := supermarket newCart.
	self assignNewCart: newCartID toClient: aClientID.
	^newCartID.! !

!testRun: #RestInterfaceTest #test01newCartsCreatedAreEmpty stamp: 'CR 12/3/2020 01:00:06'!
PASSED!

!testRun: #RestInterfaceTest #test02UserIsAuthenticatedWhenCreatesANewCart stamp: 'CR 12/3/2020 01:00:06'!
PASSED!

!testRun: #RestInterfaceTest #test03CannotAddABookToAnUnknownCart stamp: 'CR 12/3/2020 01:00:06'!
PASSED!

!testRun: #RestInterfaceTest #test04AddingABookToACreatedCartWorksCorrectly stamp: 'CR 12/3/2020 01:00:06'!
PASSED!

!testRun: #RestInterfaceTest #test05CannotListItemsOfAnInvalidCart stamp: 'CR 12/3/2020 01:00:06'!
PASSED!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/3/2020 01:00:06'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutAnInvalidCart stamp: 'CR 12/3/2020 01:00:06'!
PASSED!

!testRun: #RestInterfaceTest #test08CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 01:00:06'!
ERROR!

!testRun: #RestInterfaceTest #test08CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 01:00:06'!
ERROR!

!testRun: #RestInterfaceTest #test08CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 01:00:13'!
ERROR!

!testRun: #RestInterfaceTest #test08CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 01:00:13'!
ERROR!
!Supermarket methodsFor: 'initialization' stamp: 'CR 12/3/2020 01:01:07'!
initializeWithCatalog: aCatalog through: aMerchantProcessor
	catalog := aCatalog.
	carts := IdentityDictionary new.
	salesBook := OrderedCollection new.
	merchantProcessor := aMerchantProcessor.! !

!methodRemoval: Supermarket #initializeWithCatalog: stamp: 'CR 12/3/2020 01:02:08'!
initializeWithCatalog: aCatalog 
	catalog := aCatalog.
	carts := IdentityDictionary new.
	salesBook := OrderedCollection new.
!
!Supermarket class methodsFor: 'initialization' stamp: 'CR 12/3/2020 01:02:26' prior: 50909232!
withCatalog: aCatalog 
	^ self new initializeWithCatalog: aCatalog through: MPValidTransaction.! !
!Supermarket class methodsFor: 'initialization' stamp: 'CR 12/3/2020 01:04:42' prior: 50910469!
withCatalog: aCatalog 
	^ self new initializeWithCatalog: aCatalog through: MPValidTransaction new.! !
!Supermarket class methodsFor: 'initialization' stamp: 'CR 12/3/2020 01:05:23'!
withCatalog: aCatalog through: aMerchantProcessor
	^ self new initializeWithCatalog: aCatalog through: aMerchantProcessor.! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 01:06:34' prior: 50908617!
test01newCartsCreatedAreEmpty

	| interface cartID |
	interface := RestInterface for: (testObjectFactory defaultSupermarket) withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	
	self assert: (interface listCart: cartID) isEmpty.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 01:06:41' prior: 50910489!
test01newCartsCreatedAreEmpty

	| interface cartID |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	
	self assert: (interface listCart: cartID) isEmpty.
				! !
!StoreTestObjectsFactory methodsFor: 'interface - authenticator' stamp: 'CR 12/3/2020 01:07:18'!
defaultSupermarket
	^ Supermarket withCatalog: self defaultCatalog through: MPValidTransaction.! !
!StoreTestObjectsFactory methodsFor: 'interface - authenticator' stamp: 'CR 12/3/2020 01:07:27' prior: 50910518!
defaultSupermarket
	^ Supermarket withCatalog: self defaultCatalog through: MPValidTransaction new.! !

!testRun: #RestInterfaceTest #test01newCartsCreatedAreEmpty stamp: 'CR 12/3/2020 01:07:54'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 01:08:06' prior: 50908632!
test02UserIsAuthenticatedWhenCreatesANewCart
	| interface |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: (testObjectFactory invalidClientAuthenticator).

	self should: [interface createCartForClient: 'aClientID'  withPassword: 'anInvalidPassword'.]
	 raise: Error 
	 withMessageText: RestInterface invalidClientErrorDescription.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 01:08:12' prior: 50908647!
test03CannotAddABookToAnUnknownCart

	| interface |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	self should: [ interface addToCart: (testObjectFactory createCart ) book: (testObjectFactory itemSellByTheStore)]
	raise: Error 
	withMessageText: RestInterface unknownCartErrorMessage.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 01:08:19' prior: 50908662!
test04AddingABookToACreatedCartWorksCorrectly

	| interface cartID itemToAdd itemsListOfCart |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	itemsListOfCart := interface listCart: cartID.
	
	self assert: itemsListOfCart size = 1.
	self assert: (itemsListOfCart occurrencesOf: itemToAdd) = 1.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 01:08:26' prior: 50908684!
test05CannotListItemsOfAnInvalidCart

	| interface |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	self should: [ interface listCart: (testObjectFactory createCart)]
	raise: Error 
	withMessageText: RestInterface unknownCartErrorMessage.
	
	
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 01:08:34' prior: 50909632!
test06ListItemsOfValidCartWorksCorrectly

	| interface cartID itemToAdd |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	self assert: (interface listCart: cartID) = (Bag with: itemToAdd).
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 01:08:41' prior: 50910324!
test07CannotCheckOutAnInvalidCart

	| interface |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	self should: [ interface checkout: (testObjectFactory createCart) withCreditCard: (testObjectFactory notExpiredCreditCard ) for: (testObjectFactory defaultCardOwner) ]
	raise: Error 
	withMessageText: RestInterface unknownCartErrorMessage.
	
	
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 01:08:48' prior: 50910341!
test08CheckOutValidCartWorksCorrectly

	| interface cartID itemToAdd |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	
				! !

!testRun: #RestInterfaceTest #test01newCartsCreatedAreEmpty stamp: 'CR 12/3/2020 01:09:25'!
PASSED!

!testRun: #RestInterfaceTest #test02UserIsAuthenticatedWhenCreatesANewCart stamp: 'CR 12/3/2020 01:09:25'!
PASSED!

!testRun: #RestInterfaceTest #test03CannotAddABookToAnUnknownCart stamp: 'CR 12/3/2020 01:09:25'!
PASSED!

!testRun: #RestInterfaceTest #test04AddingABookToACreatedCartWorksCorrectly stamp: 'CR 12/3/2020 01:09:25'!
PASSED!

!testRun: #RestInterfaceTest #test05CannotListItemsOfAnInvalidCart stamp: 'CR 12/3/2020 01:09:25'!
PASSED!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/3/2020 01:09:25'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutAnInvalidCart stamp: 'CR 12/3/2020 01:09:25'!
PASSED!

!testRun: #RestInterfaceTest #test08CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 01:09:25'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 01:11:02' prior: 50910636!
test08CheckOutValidCartWorksCorrectly

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 01:11:23' prior: 50910683!
test08CheckOutValidCartWorksCorrectly

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
				
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 01:12:16' prior: 50910706!
test08CheckOutValidCartWorksCorrectly

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 01:12:46' prior: 50910730!
test08CheckOutValidCartWorksCorrectly

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: (interface listCart: cartID = clientPurchases).
				! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 01:13:42'!
listPurchases:  clientID withPassword: clientPassword! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 01:13:57' prior: 50910778!
listPurchases:  clientID withPassword: clientPassword! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 01:14:16' prior: 50910783!
listPurchases:  clientID withPassword: clientPassword
	self validateUser: clientID withPassword: clientPassword.
	! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 01:14:22' prior: 50910788!
listPurchases: clientID withPassword: clientPassword
	self validateUser: clientID withPassword: clientPassword.
	! !

Object subclass: #Supermarket
	instanceVariableNames: 'catalog cashier carts salesBookByClient merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Supermarket category: 'TusLibros' stamp: 'CR 12/3/2020 01:23:17'!
Object subclass: #Supermarket
	instanceVariableNames: 'catalog cashier carts salesBookByClient merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Supermarket methodsFor: 'initialization' stamp: 'CR 12/3/2020 01:23:42' prior: 50910453!
initializeWithCatalog: aCatalog through: aMerchantProcessor
	catalog := aCatalog.
	carts := IdentityDictionary new.
	salesBookByClient := Dictionary new.
	merchantProcessor := aMerchantProcessor.! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 01:30:02' prior: 50910311!
checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID 

	^ supermarket checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID ifInvalidCart: [self error: self class unknownCartErrorMessage].! !
!Supermarket methodsFor: 'interface - interaction' stamp: 'CR 12/3/2020 01:32:08'!
checkout: cartID withCreditCard: creditCardToPayWith for: clientID ifInvalidCart: errorBlock 
	| aCartToCheckOut aCashierToPayWith |
	aCartToCheckOut := carts at: cartID ifAbsent: errorBlock.
	aCashierToPayWith := Cashier toCheckout: aCartToCheckOut charging: creditCardToPayWith through: merchantProcessor on: self timeNow registeringOn: (salesBookByClient at: clientID). 
	^ aCashierToPayWith checkOut.
	
	

	! !

!methodRemoval: Supermarket #checkout:charging:ifInvalidCart: stamp: 'CR 12/3/2020 01:32:12'!
checkout: cartID charging: creditCardToPayWith ifInvalidCart: errorBlock 
	| aCartToCheckOut aCashierToPayWith |
	aCartToCheckOut := carts at: cartID ifAbsent: errorBlock.
	aCashierToPayWith := Cashier toCheckout: aCartToCheckOut charging: creditCardToPayWith through: merchantProcessor on: self timeNow registeringOn: salesBook. 
	^ aCashierToPayWith checkOut.
	
	

	!
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 01:32:40' prior: 50910404!
createCartForClient: aClientID withPassword: passwordOfClientWhoIsCreatingACart
	| newCartID |
	self validateUser: aClientID withPassword: passwordOfClientWhoIsCreatingACart.
	newCartID := supermarket newCartForClient: aClientID.
	self assignNewCart: newCartID toClient: aClientID.
	^newCartID.! !
!Supermarket methodsFor: 'initialization' stamp: 'CR 12/3/2020 01:34:26'!
newCartForClient: aClientID
	| newCart IDForNewCart |
	newCart := Cart acceptingItemsOf: catalog.
	IDForNewCart := self createIDforCart: newCart.
	carts at: IDForNewCart put: newCart.
	salesBookByClient at: aClientID.
	^ IDForNewCart.
	! !
!Supermarket methodsFor: 'initialization' stamp: 'CR 12/3/2020 01:37:16' prior: 50910878!
newCartForClient: aClientID
	| newCart IDForNewCart |
	newCart := Cart acceptingItemsOf: catalog.
	IDForNewCart := self createIDforCart: newCart.
	carts at: IDForNewCart put: newCart.
	self createSaleBookForClient: aClientID.
	^ IDForNewCart.
	! !
!Supermarket methodsFor: 'initialization' stamp: 'CR 12/3/2020 01:37:49' prior: 50910889!
newCartForClient: aClientID
	| newCart IDForNewCart |
	newCart := Cart acceptingItemsOf: catalog.
	IDForNewCart := self createIDforCart: newCart.
	carts at: IDForNewCart put: newCart.
	self createSaleBookForClientIfAbsent: aClientID.
	^ IDForNewCart.
	! !
!Supermarket methodsFor: 'initialization' stamp: 'CR 12/3/2020 01:39:53'!
createSaleBookForClientIfAbsent: aClientID
	salesBookByClient at: aClientID ifAbsent: [Bag new].
	! !
!Supermarket methodsFor: 'initialization' stamp: 'CR 12/3/2020 01:41:47' prior: 50910911!
createSaleBookForClientIfAbsent: aClientID
	salesBookByClient at: aClientID ifAbsentPut: [Bag new].
	! !

!methodRemoval: Supermarket #newCart stamp: 'CR 12/3/2020 01:41:49'!
newCart
	| newCart IDForNewCart |
	newCart := Cart acceptingItemsOf: catalog.
	IDForNewCart := self createIDforCart: newCart.
	carts at: IDForNewCart put: newCart.
	^ IDForNewCart.
	!

----SNAPSHOT----(3 December 2020 01:42:34) CuisUniversity-4384.image priorSource: 18518723!
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 01:48:18' prior: 50910795!
listPurchases: clientID withPassword: clientPassword
	| clientSalesBook |
	self validateUser: clientID withPassword: clientPassword.
	clientSalesBook := supermarket salesBookFor: clientID.
	! !
!Sale methodsFor: 'total' stamp: 'CR 12/3/2020 01:48:43'!
items
	
	^ items ! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 01:51:46' prior: 50910934!
listPurchases: clientID withPassword: clientPassword
	| clientSalesBook totalSpent |
	self validateUser: clientID withPassword: clientPassword.
	clientSalesBook := supermarket salesBookFor: clientID.
	totalSpent := clientSalesBook sum: [:sale | sale total ] ifEmpty: [0].
	! !

Bag with: 2 with: 2!

asd := Bag with: 2 with: 2!

asd print!

asd asString !

asd!

asd := Bag with: 2 with: 5 with: 2!

asd!

self contents !

self contents !

self contents asString !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 01:59:52' prior: 50910946!
listPurchases: clientID withPassword: clientPassword
	| clientSalesBook totalSpent allItems |
	self validateUser: clientID withPassword: clientPassword.
	clientSalesBook := supermarket salesBookFor: clientID.
	totalSpent := clientSalesBook sum: [: sale | sale total ] ifEmpty: [0].
	allItems := Bag new.
	clientSalesBook do: [: sale | allItems addAll: (sale items) ].
	^ allItems contents asString withoutPrefix: 'a Dictionary', 'Total spent = ', totalSpent asString.! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 02:00:56'!
purchasesGivenSalesBook: clientSalesBook
	|  totalSpent allItems |
	totalSpent := clientSalesBook sum: [: sale | sale total ] ifEmpty: [0].
	allItems := Bag new.
	clientSalesBook do: [: sale | allItems addAll: (sale items) ].
	^ allItems contents asString withoutPrefix: 'a Dictionary', 'Total spent = ', totalSpent asString.! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 02:01:20' prior: 50910964!
listPurchases: clientID withPassword: clientPassword
	| clientSalesBook |
	self validateUser: clientID withPassword: clientPassword.
	clientSalesBook := supermarket salesBookFor: clientID.
	^ self purchasesGivenSalesBook: clientSalesBook.! !
!Supermarket methodsFor: 'interface - interaction' stamp: 'CR 12/3/2020 02:01:47'!
salesBookFor: clientID
	^ salesBookByClient at: clientID.! !

!testRun: #RestInterfaceTest #test01newCartsCreatedAreEmpty stamp: 'CR 12/3/2020 02:02:03'!
PASSED!

!testRun: #RestInterfaceTest #test02UserIsAuthenticatedWhenCreatesANewCart stamp: 'CR 12/3/2020 02:02:03'!
PASSED!

!testRun: #RestInterfaceTest #test03CannotAddABookToAnUnknownCart stamp: 'CR 12/3/2020 02:02:03'!
PASSED!

!testRun: #RestInterfaceTest #test04AddingABookToACreatedCartWorksCorrectly stamp: 'CR 12/3/2020 02:02:03'!
PASSED!

!testRun: #RestInterfaceTest #test05CannotListItemsOfAnInvalidCart stamp: 'CR 12/3/2020 02:02:03'!
PASSED!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/3/2020 02:02:03'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutAnInvalidCart stamp: 'CR 12/3/2020 02:02:03'!
PASSED!

!testRun: #RestInterfaceTest #test08CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 02:02:03'!
ERROR!

!testRun: #RestInterfaceTest #test08CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 02:02:03'!
ERROR!

!testRun: #RestInterfaceTest #test08CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 02:02:03'!
ERROR!

salesBookByClient at: clientID!

clientSalesBook sum: [: sale | sale total ] ifEmpty: [0].!

Sale!

self at: 1!

self contents at: 1!

allItems contents asString withoutPrefix: 'a Dictionary', 'Total spent = ', totalSpent asString.!

allItems contents asString withoutPrefix: 'a Dictionary'!

totalSpent asString!

^ self purchasesGivenSalesBook: clientSalesBook!
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 02:06:53' prior: 50910981!
purchasesGivenSalesBook: clientSalesBook
	|  totalSpent allItems |
	totalSpent := clientSalesBook sum: [: sale | sale total ] ifEmpty: [0].
	allItems := Bag new.
	clientSalesBook do: [: sale | allItems addAll: (sale items) ].
	^ (allItems contents asString withoutPrefix: 'a Dictionary'), 'Total spent = ', totalSpent asString.! !

!testRun: #RestInterfaceTest #test08CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 02:06:59'!
ERROR!

!testRun: #RestInterfaceTest #test08CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 02:06:59'!
ERROR!

!testRun: #RestInterfaceTest #test08CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 02:06:59'!
ERROR!
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 02:07:25' prior: 50911055!
purchasesGivenSalesBook: clientSalesBook
	|  totalSpent allItems |
	totalSpent := clientSalesBook sum: [: sale | sale total ] ifEmpty: [0].
	allItems := Bag new.
	clientSalesBook do: [: sale | allItems addAll: (sale items) ].
	^ (allItems contents asString withoutPrefix: 'a Dictionary', 'Total spent = ', totalSpent asString).! !

!testRun: #RestInterfaceTest #test08CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 02:07:30'!
ERROR!

!testRun: #RestInterfaceTest #test08CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 02:07:30'!
ERROR!

!testRun: #RestInterfaceTest #test08CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 02:07:30'!
ERROR!
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 02:08:02' prior: 50911078!
purchasesGivenSalesBook: clientSalesBook
	|  totalSpent allItems |
	totalSpent := clientSalesBook sum: [: sale | sale total ] ifEmpty: [0].
	allItems := Bag new.
	clientSalesBook do: [: sale | allItems addAll: (sale items) ].
	^ (allItems contents asString withoutPrefix: 'a Dictionary'), ('Total spent = ', totalSpent asString).! !

!testRun: #RestInterfaceTest #test08CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 02:08:06'!
ERROR!

!testRun: #RestInterfaceTest #test08CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 02:08:06'!
ERROR!

!testRun: #RestInterfaceTest #test08CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 02:08:06'!
ERROR!

(allItems contents asString withoutPrefix: 'a Dictionary')!

('Total spent = ', totalSpent asString)!

	^ (allItems contents asString withoutPrefix: 'a Dictionary'), ('Total spent = ', totalSpent asString).!

 (allItems contents asString withoutPrefix: 'a Dictionary'), ('Total spent = ', totalSpent asString).!

^ self purchasesGivenSalesBook: clientSalesBook!

interface listCart: cartID!
!Supermarket methodsFor: 'interface - interaction' stamp: 'CR 12/3/2020 02:12:38' prior: 50910835!
checkout: cartID withCreditCard: creditCardToPayWith for: clientID ifInvalidCart: errorBlock 
	| aCartToCheckOut aCashierToPayWith |
	aCartToCheckOut := carts at: cartID ifAbsent: errorBlock.
	"fijarse que no este vacio el carrito"
	aCashierToPayWith := Cashier toCheckout: aCartToCheckOut charging: creditCardToPayWith through: merchantProcessor on: self timeNow registeringOn: (salesBookByClient at: clientID). 
	^ aCashierToPayWith checkOut.
	
	

	! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 02:17:34'!
test10CheckOutValidCartWorksCorrectly

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: (interface listCart: cartID = clientPurchases).
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 02:22:58'!
test10UserIsAuthenticatedWhenWorksCorrectly
	| interface cartID itemToAdd clientPurchases |
	
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: (testObjectFactory invalidClientAuthenticator).

	self should: [interface createCartForClient: 'aClientID'  withPassword: 'anInvalidPassword'.]
	 raise: Error 
	 withMessageText: RestInterface invalidClientErrorDescription.
				
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: (interface listCart: cartID = clientPurchases).
				! !

----SNAPSHOT----(3 December 2020 02:25:48) CuisUniversity-4384.image priorSource: 18536966!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:11:51'!
test07CannotCheckOutUnknownCart

	| interface |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	self should: [ interface checkout: (testObjectFactory createCart) withCreditCard: (testObjectFactory notExpiredCreditCard ) for: (testObjectFactory defaultCardOwner) ]
	raise: Error 
	withMessageText: RestInterface unknownCartErrorMessage.
	
	
				! !

!methodRemoval: RestInterfaceTest #test07CannotCheckOutAnInvalidCart stamp: 'CR 12/3/2020 06:11:53'!
test07CannotCheckOutAnInvalidCart

	| interface |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	self should: [ interface checkout: (testObjectFactory createCart) withCreditCard: (testObjectFactory notExpiredCreditCard ) for: (testObjectFactory defaultCardOwner) ]
	raise: Error 
	withMessageText: RestInterface unknownCartErrorMessage.
	
	
				!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:12:34'!
test09CheckOutValidCartWorksCorrectly

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: (interface listCart: cartID = clientPurchases).
				! !

!methodRemoval: RestInterfaceTest #test08CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:12:36'!
test08CheckOutValidCartWorksCorrectly

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: (interface listCart: cartID = clientPurchases).
				!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:13:09'!
test8CannotCheckOutEmptyCart

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: (interface listCart: cartID = clientPurchases).
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:13:13'!
test08CannotCheckOutEmptyCart

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: (interface listCart: cartID = clientPurchases).
				! !

!methodRemoval: RestInterfaceTest #test8CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 06:13:15'!
test8CannotCheckOutEmptyCart

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: (interface listCart: cartID = clientPurchases).
				!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:13:56' prior: 50911325!
test08CannotCheckOutEmptyCart

	| interface cartID clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: (interface listCart: cartID = clientPurchases).
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:17:47' prior: 50911375!
test08CannotCheckOutEmptyCart

	| interface cartID  |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	
	self should: [interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.] 
	raise: Error
	withExceptionDo: [:anError | | clientPurchases |
		clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
		self assert: clientPurchases isEmpty. 
		self assert: anError messageText = RestInterface cannotCheckOutEmptyCart.
		].! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:21:06' prior: 50911101!
purchasesGivenSalesBook: clientSalesBook
	|  totalSpent allItems |
	(clientSalesBook isEmpty) ifTrue: [^'No purchases'].
	totalSpent := clientSalesBook sum: [: sale | sale total ] ifEmpty: [0].
	allItems := Bag new.
	clientSalesBook do: [: sale | allItems addAll: (sale items) ].
	^ (allItems contents asString withoutPrefix: 'a Dictionary'), ('Total spent = ', totalSpent asString).! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:21:09' prior: 50911422!
purchasesGivenSalesBook: clientSalesBook
	|  totalSpent allItems |
	(clientSalesBook isEmpty) ifTrue: [^'No purchases'].
	
	totalSpent := clientSalesBook sum: [: sale | sale total ] ifEmpty: [0].
	allItems := Bag new.
	clientSalesBook do: [: sale | allItems addAll: (sale items) ].
	^ (allItems contents asString withoutPrefix: 'a Dictionary'), ('Total spent = ', totalSpent asString).! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:21:52' prior: 50911437!
purchasesGivenSalesBook: clientSalesBook
	|  totalSpent allItems |
	(clientSalesBook isEmpty) ifTrue: [^'No purchases'].
	
	totalSpent := clientSalesBook sum: [: sale | sale total ] ifEmpty: [0].
	allItems := Bag new.
	clientSalesBook do: [: sale | allItems addAll: (sale items) ].
	^ (allItems contents asString withoutPrefix: 'a Dictionary'), ('Total spent = ', totalSpent asString).! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:22:18'!
sumTotalSpentFor: clientSalesBook

	^ clientSalesBook sum: [: sale | sale total ] ifEmpty: [0]! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:22:18' prior: 50911452!
purchasesGivenSalesBook: clientSalesBook
	|  totalSpent allItems |
	(clientSalesBook isEmpty) ifTrue: [^'No purchases'].
	
	totalSpent := self sumTotalSpentFor: clientSalesBook.
	allItems := Bag new.
	clientSalesBook do: [: sale | allItems addAll: (sale items) ].
	^ (allItems contents asString withoutPrefix: 'a Dictionary'), ('Total spent = ', totalSpent asString).! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:22:54' prior: 50911473!
purchasesGivenSalesBook: clientSalesBook
	|  totalSpent allItems |
	(clientSalesBook isEmpty) ifTrue: [^'No purchases'].
	
	totalSpent := self sumTotalSpentFor: clientSalesBook.
	allItems := clientSalesBook do: [: sale | allItems addAll: (sale items) ].
	^ (allItems contents asString withoutPrefix: 'a Dictionary'), ('Total spent = ', totalSpent asString).! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:23:06' prior: 50911488!
purchasesGivenSalesBook: clientSalesBook
	|  totalSpent allItems |
	(clientSalesBook isEmpty) ifTrue: [^'No purchases'].
	
	totalSpent := self sumTotalSpentFor: clientSalesBook.
	allItems := Bag new.
	clientSalesBook do: [: sale | allItems addAll: (sale items) ].
	^ (allItems contents asString withoutPrefix: 'a Dictionary'), ('Total spent = ', totalSpent asString).! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:23:48'!
addItemsFrom: allItems To: clientSalesBook

	^ clientSalesBook do: [: sale | allItems addAll: (sale items) ]! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:23:48' prior: 50911502!
purchasesGivenSalesBook: clientSalesBook
	|  totalSpent allItems |
	(clientSalesBook isEmpty) ifTrue: [^'No purchases'].
	
	totalSpent := self sumTotalSpentFor: clientSalesBook.
	allItems := Bag new.
	self addItemsFrom: allItems To: clientSalesBook.
	^ (allItems contents asString withoutPrefix: 'a Dictionary'), ('Total spent = ', totalSpent asString).! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:24:02' prior: 50911523!
purchasesGivenSalesBook: clientSalesBook
	|  totalSpent allItems |
	(clientSalesBook isEmpty) ifTrue: [^'No purchases'].
	
	totalSpent := self sumTotalSpentFor: clientSalesBook.
	allItems := Bag new.
	allItems := self addItemsFrom: allItems To: clientSalesBook.
	^ (allItems contents asString withoutPrefix: 'a Dictionary'), ('Total spent = ', totalSpent asString).! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:24:36'!
asStringItemsFrom: allItems

	^ allItems contents asString withoutPrefix: 'a Dictionary'! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:24:36' prior: 50911537!
purchasesGivenSalesBook: clientSalesBook
	|  totalSpent allItems |
	(clientSalesBook isEmpty) ifTrue: [^'No purchases'].
	
	totalSpent := self sumTotalSpentFor: clientSalesBook.
	allItems := Bag new.
	allItems := self addItemsFrom: allItems To: clientSalesBook.
	^ (self asStringItemsFrom: allItems), ('Total spent = ', totalSpent asString).! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:24:41' prior: 50911557!
purchasesGivenSalesBook: clientSalesBook
	|  totalSpent allItems |
	(clientSalesBook isEmpty) ifTrue: [^'No purchases'].
	
	totalSpent := self sumTotalSpentFor: clientSalesBook.
	allItems := Bag new.
	allItems := self addItemsFrom: allItems To: clientSalesBook.
	^ (allItems contents asString withoutPrefix: 'a Dictionary'), ('Total spent = ', totalSpent asString).! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:25:47'!
itemsAsString: allItems

	^ allItems contents asString withoutPrefix: 'a Dictionary'! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:25:47' prior: 50911571!
purchasesGivenSalesBook: clientSalesBook
	|  totalSpent allItems |
	(clientSalesBook isEmpty) ifTrue: [^'No purchases'].
	
	totalSpent := self sumTotalSpentFor: clientSalesBook.
	allItems := Bag new.
	allItems := self addItemsFrom: allItems To: clientSalesBook.
	^ (self itemsAsString: allItems), ('Total spent = ', totalSpent asString).! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:26:09'!
totalSpentAsString: totalSpent

	^ 'Total spent = ', totalSpent asString! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:26:09' prior: 50911591!
purchasesGivenSalesBook: clientSalesBook
	|  totalSpent allItems |
	(clientSalesBook isEmpty) ifTrue: [^'No purchases'].
	
	totalSpent := self sumTotalSpentFor: clientSalesBook.
	allItems := Bag new.
	allItems := self addItemsFrom: allItems To: clientSalesBook.
	^ (self itemsAsString: allItems), ((self totalSpentAsString: totalSpent)).! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:26:19' prior: 50911609!
purchasesGivenSalesBook: clientSalesBook
	|  totalSpent allItems |
	(clientSalesBook isEmpty) ifTrue: [^'No purchases'].
	
	totalSpent := self sumTotalSpentFor: clientSalesBook.
	allItems := Bag new.
	allItems := self addItemsFrom: allItems To: clientSalesBook.
	^ (self itemsAsString: allItems), (self totalSpentAsString: totalSpent).! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:27:21'!
addItemsFromSalesBook: clientSalesBook To: allItems

	^ clientSalesBook do: [: sale | allItems addAll: (sale items) ]! !

!methodRemoval: RestInterface #addItemsFrom:To: stamp: 'CR 12/3/2020 06:27:26'!
addItemsFrom: allItems To: clientSalesBook

	^ clientSalesBook do: [: sale | allItems addAll: (sale items) ]!
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:27:39' prior: 50911623!
purchasesGivenSalesBook: clientSalesBook
	|  totalSpent allItems |
	(clientSalesBook isEmpty) ifTrue: [^'No purchases'].
	
	totalSpent := self sumTotalSpentFor: clientSalesBook.
	allItems := Bag new.
	allItems := self addItemsFromSalesBook: clientSalesBook To: allItems.
	^ (self itemsAsString: allItems), (self totalSpentAsString: totalSpent).! !

!testRun: #RestInterfaceTest #test01newCartsCreatedAreEmpty stamp: 'CR 12/3/2020 06:27:51'!
PASSED!

!testRun: #RestInterfaceTest #test02UserIsAuthenticatedWhenCreatesANewCart stamp: 'CR 12/3/2020 06:27:51'!
PASSED!

!testRun: #RestInterfaceTest #test03CannotAddABookToAnUnknownCart stamp: 'CR 12/3/2020 06:27:51'!
PASSED!

!testRun: #RestInterfaceTest #test04AddingABookToACreatedCartWorksCorrectly stamp: 'CR 12/3/2020 06:27:51'!
PASSED!

!testRun: #RestInterfaceTest #test05CannotListItemsOfAnInvalidCart stamp: 'CR 12/3/2020 06:27:51'!
PASSED!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:27:51'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 06:27:51'!
PASSED!

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 06:27:51'!
FAILURE!

!testRun: #RestInterfaceTest #test09CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:27:51'!
ERROR!

!testRun: #RestInterfaceTest #test10CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:27:51'!
ERROR!

!testRun: #RestInterfaceTest #test10UserIsAuthenticatedWhenWorksCorrectly stamp: 'CR 12/3/2020 06:27:51'!
ERROR!

!testRun: #RestInterfaceTest #test09CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:28:23'!
ERROR!

!testRun: #RestInterfaceTest #test09CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:28:23'!
ERROR!

!testRun: #RestInterfaceTest #test09CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:28:23'!
ERROR!

clientSalesBook do: [: sale | allItems addAll: (sale items) ]!

	^ clientSalesBook do: [: sale | allItems addAll: (sale items) ]!

clientSalesBook do: [: sale | allItems addAll: (sale items) ]!
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:31:29' prior: 50911636!
addItemsFromSalesBook: clientSalesBook To: allItems

	clientSalesBook do: [: sale | allItems addAll: (sale items) ]! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 06:31:39' prior: 50911649!
purchasesGivenSalesBook: clientSalesBook
	|  totalSpent allItems |
	(clientSalesBook isEmpty) ifTrue: [^'No purchases'].
	
	totalSpent := self sumTotalSpentFor: clientSalesBook.
	allItems := Bag new.
	self addItemsFromSalesBook: clientSalesBook To: allItems.
	^ (self itemsAsString: allItems), (self totalSpentAsString: totalSpent).! !

!testRun: #RestInterfaceTest #test09CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:31:58'!
ERROR!

!testRun: #RestInterfaceTest #test09CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:31:58'!
ERROR!

!testRun: #RestInterfaceTest #test09CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:31:58'!
ERROR!

interface listCart: cartID !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:32:43' prior: 50911250!
test09CheckOutValidCartWorksCorrectly

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: (interface listCart: cartID asString = clientPurchases).
				! !

!testRun: #RestInterfaceTest #test09CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:32:47'!
ERROR!

!testRun: #RestInterfaceTest #test09CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:32:47'!
ERROR!

!testRun: #RestInterfaceTest #test09CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:32:47'!
ERROR!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:33:08' prior: 50911748!
test09CheckOutValidCartWorksCorrectly

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: (interface listCart: cartID) asString = clientPurchases.
				! !

!testRun: #RestInterfaceTest #test09CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:33:10'!
FAILURE!

!testRun: #RestInterfaceTest #test09CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:33:10'!
FAILURE!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:34:31' prior: 50911784!
test09CheckOutValidCartWorksCorrectly

	| interface cartID itemToAdd clientPurchases purchase |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	purchase := ''.
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: purchase = clientPurchases.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:35:03' prior: 50911817!
test09CheckOutValidCartWorksCorrectly

	| interface cartID itemToAdd clientPurchases purchase |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	purchase := '(''validBook''->1 ) Total spent = 10'.
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: purchase = clientPurchases.
				! !

!methodRemoval: RestInterface #cardToPayWith stamp: 'CR 12/3/2020 06:36:00'!
cardToPayWith
!

!testRun: #RestInterfaceTest #test01newCartsCreatedAreEmpty stamp: 'CR 12/3/2020 06:36:47'!
PASSED!

!testRun: #RestInterfaceTest #test02UserIsAuthenticatedWhenCreatesANewCart stamp: 'CR 12/3/2020 06:36:47'!
PASSED!

!testRun: #RestInterfaceTest #test03CannotAddABookToAnUnknownCart stamp: 'CR 12/3/2020 06:36:47'!
PASSED!

!testRun: #RestInterfaceTest #test04AddingABookToACreatedCartWorksCorrectly stamp: 'CR 12/3/2020 06:36:47'!
PASSED!

!testRun: #RestInterfaceTest #test05CannotListItemsOfAnInvalidCart stamp: 'CR 12/3/2020 06:36:47'!
PASSED!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:36:47'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 06:36:47'!
PASSED!

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 06:36:47'!
FAILURE!

!testRun: #RestInterfaceTest #test09CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:36:47'!
FAILURE!

!testRun: #RestInterfaceTest #test10CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:36:47'!
ERROR!

!testRun: #RestInterfaceTest #test10UserIsAuthenticatedWhenWorksCorrectly stamp: 'CR 12/3/2020 06:36:47'!
ERROR!
!RestInterface methodsFor: 'list purchases private' stamp: 'CR 12/3/2020 06:37:32' prior: 50911604!
totalSpentAsString: totalSpent

	^ ' Total spent = ', totalSpent asString! !

!testRun: #RestInterfaceTest #test01newCartsCreatedAreEmpty stamp: 'CR 12/3/2020 06:37:40'!
PASSED!

!testRun: #RestInterfaceTest #test02UserIsAuthenticatedWhenCreatesANewCart stamp: 'CR 12/3/2020 06:37:40'!
PASSED!

!testRun: #RestInterfaceTest #test03CannotAddABookToAnUnknownCart stamp: 'CR 12/3/2020 06:37:40'!
PASSED!

!testRun: #RestInterfaceTest #test04AddingABookToACreatedCartWorksCorrectly stamp: 'CR 12/3/2020 06:37:40'!
PASSED!

!testRun: #RestInterfaceTest #test05CannotListItemsOfAnInvalidCart stamp: 'CR 12/3/2020 06:37:40'!
PASSED!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:37:40'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 06:37:40'!
PASSED!

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 06:37:40'!
FAILURE!

!testRun: #RestInterfaceTest #test09CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:37:40'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:37:40'!
ERROR!

!testRun: #RestInterfaceTest #test10UserIsAuthenticatedWhenWorksCorrectly stamp: 'CR 12/3/2020 06:37:40'!
ERROR!

!testRun: #RestInterfaceTest #test09CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:37:49'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:39:16' prior: 50911154!
test10CheckOutValidCartWorksCorrectly

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: 'No purchases' = clientPurchases.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:41:04'!
test10PurchasesForClientWhoDidNotBuyIsEmpty

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: 'No purchases' = clientPurchases.
				! !

!methodRemoval: RestInterfaceTest #test10CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:41:07'!
test10CheckOutValidCartWorksCorrectly

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: 'No purchases' = clientPurchases.
				!

!testRun: #RestInterfaceTest #test10PurchasesForClientWhoDidNotBuyIsEmpty stamp: 'CR 12/3/2020 06:41:29'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:42:17'!
test11PurchasesForClientWhoDidNotBuyIsEmpty

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: 'No purchases' = clientPurchases.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:43:28'!
test09ffff

	| interface |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: (testObjectFactory invalidClientAuthenticator).

	self should: [interface createCartForClient: 'aClientID'  withPassword: 'anInvalidPassword'.]
	 raise: Error 
	 withMessageText: RestInterface invalidClientErrorDescription.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:43:51'!
test09UserIsAuthenticatedWhenCheckingOut
	| interface |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: (testObjectFactory invalidClientAuthenticator).

	self should: [interface createCartForClient: 'aClientID'  withPassword: 'anInvalidPassword'.]
	 raise: Error 
	 withMessageText: RestInterface invalidClientErrorDescription.
				! !

!methodRemoval: RestInterfaceTest #test09ffff stamp: 'CR 12/3/2020 06:43:55'!
test09ffff

	| interface |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: (testObjectFactory invalidClientAuthenticator).

	self should: [interface createCartForClient: 'aClientID'  withPassword: 'anInvalidPassword'.]
	 raise: Error 
	 withMessageText: RestInterface invalidClientErrorDescription.
				!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:43:59'!
test10CheckOutValidCartWorksCorrectly

	| interface cartID itemToAdd clientPurchases purchase |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	purchase := '(''validBook''->1 ) Total spent = 10'.
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: purchase = clientPurchases.
				! !

!methodRemoval: RestInterfaceTest #test09CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:44:06'!
test09CheckOutValidCartWorksCorrectly

	| interface cartID itemToAdd clientPurchases purchase |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	purchase := '(''validBook''->1 ) Total spent = 10'.
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: purchase = clientPurchases.
				!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:44:13' prior: 50912023!
test11PurchasesForClientWhoDidNotBuyIsEmpty

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: 'No purchases' = clientPurchases.
				! !

!methodRemoval: RestInterfaceTest #test10PurchasesForClientWhoDidNotBuyIsEmpty stamp: 'CR 12/3/2020 06:44:16'!
test10PurchasesForClientWhoDidNotBuyIsEmpty

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: 'No purchases' = clientPurchases.
				!

!methodRemoval: RestInterfaceTest #test10UserIsAuthenticatedWhenWorksCorrectly stamp: 'CR 12/3/2020 06:44:19'!
test10UserIsAuthenticatedWhenWorksCorrectly
	| interface cartID itemToAdd clientPurchases |
	
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: (testObjectFactory invalidClientAuthenticator).

	self should: [interface createCartForClient: 'aClientID'  withPassword: 'anInvalidPassword'.]
	 raise: Error 
	 withMessageText: RestInterface invalidClientErrorDescription.
				
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: (interface listCart: cartID = clientPurchases).
				!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:45:38' prior: 50912058!
test09UserIsAuthenticatedWhenCheckingOut
	| interface cartID itemToAdd |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: (testObjectFactory invalidClientAuthenticator).
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	self should: [interface createCartForClient: 'aClientID'  withPassword: 'anInvalidPassword'.]
	 raise: Error 
	 withMessageText: RestInterface invalidClientErrorDescription.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:47:09'!
test09UserIsAuthenticatedWhenListingPurchases
	| interface cartID itemToAdd |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: (testObjectFactory invalidClientAuthenticator).
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	self should: [interface createCartForClient: 'aClientID'  withPassword: 'anInvalidPassword'.]
	 raise: Error 
	 withMessageText: RestInterface invalidClientErrorDescription.
				! !

!methodRemoval: RestInterfaceTest #test09UserIsAuthenticatedWhenCheckingOut stamp: 'CR 12/3/2020 06:47:12'!
test09UserIsAuthenticatedWhenCheckingOut
	| interface cartID itemToAdd |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: (testObjectFactory invalidClientAuthenticator).
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	self should: [interface createCartForClient: 'aClientID'  withPassword: 'anInvalidPassword'.]
	 raise: Error 
	 withMessageText: RestInterface invalidClientErrorDescription.
				!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:47:28' prior: 50912240!
test09UserIsAuthenticatedWhenListingPurchases
	| interface cartID itemToAdd |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: (testObjectFactory invalidClientAuthenticator).
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	self should: []
	 raise: Error 
	 withMessageText: RestInterface invalidClientErrorDescription.
				! !

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 06:48:23'!
FAILURE!

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 06:48:23'!
FAILURE!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:49:06' prior: 50912284!
test09UserIsAuthenticatedWhenListingPurchases
	| interface |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: (testObjectFactory invalidClientAuthenticator).
	
	self should: []
	 raise: Error 
	 withMessageText: RestInterface invalidClientErrorDescription.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:49:31' prior: 50912310!
test09UserIsAuthenticatedWhenListingPurchases
	| interface |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: (testObjectFactory invalidClientAuthenticator).
	
	self should: [interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.]
	 raise: Error 
	 withMessageText: RestInterface invalidClientErrorDescription.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:49:48' prior: 50912323!
test09UserIsAuthenticatedWhenListingPurchases
	| interface |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: (testObjectFactory invalidClientAuthenticator).
	
	self should: [interface listPurchases: 'aClientID' withPassword: 'anInvalidPassword'.]
	 raise: Error 
	 withMessageText: RestInterface invalidClientErrorDescription.
				! !

!testRun: #RestInterfaceTest #test09UserIsAuthenticatedWhenListingPurchases stamp: 'CR 12/3/2020 06:49:50'!
PASSED!
!Supermarket methodsFor: 'interface - interaction' stamp: 'CR 12/3/2020 06:51:09' prior: 50911137!
checkout: cartID withCreditCard: creditCardToPayWith for: clientID ifInvalidCart: errorBlock 
	| aCartToCheckOut aCashierToPayWith |
	aCartToCheckOut := carts at: cartID ifAbsent: errorBlock.
	(aCartToCheckOut isEmpty) ifTrue: [self error: self class cannot].
	aCashierToPayWith := Cashier toCheckout: aCartToCheckOut charging: creditCardToPayWith through: merchantProcessor on: self timeNow registeringOn: (salesBookByClient at: clientID). 
	^ aCashierToPayWith checkOut.
	
	

	! !
!Supermarket methodsFor: 'interface - interaction' stamp: 'CR 12/3/2020 06:51:32'!
verifyCartIsNonEmpty: aCartToCheckOut

	^ (aCartToCheckOut isEmpty) ifTrue: [self error: self class cannot]! !
!Supermarket methodsFor: 'interface - interaction' stamp: 'CR 12/3/2020 06:51:32' prior: 50912357!
checkout: cartID withCreditCard: creditCardToPayWith for: clientID ifInvalidCart: errorBlock 
	| aCartToCheckOut aCashierToPayWith |
	aCartToCheckOut := carts at: cartID ifAbsent: errorBlock.
	self verifyCartIsNonEmpty: aCartToCheckOut.
	aCashierToPayWith := Cashier toCheckout: aCartToCheckOut charging: creditCardToPayWith through: merchantProcessor on: self timeNow registeringOn: (salesBookByClient at: clientID). 
	^ aCashierToPayWith checkOut.
	
	

	! !
!Supermarket methodsFor: 'interface - interaction' stamp: 'CR 12/3/2020 06:52:01' prior: 50912375!
verifyCartIsNonEmpty: aCartToCheckOut

	^ (aCartToCheckOut isEmpty) ifTrue: [self error: self class cannotCheckOutEmptyCart]! !
!RestInterface class methodsFor: 'error messages' stamp: 'CR 12/3/2020 06:52:28'!
cannotCheckOutEmptyCart
	^ 'Can not check out empty cart!!'.! !
!Supermarket methodsFor: 'interface - interaction' stamp: 'CR 12/3/2020 06:52:44' prior: 50912400!
verifyCartIsNonEmpty: aCartToCheckOut

	^ (aCartToCheckOut isEmpty) ifTrue: [self error: RestInterface cannotCheckOutEmptyCart]! !

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 06:52:52'!
FAILURE!

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 06:52:52'!
FAILURE!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:53:39' prior: 50911397!
test08CannotCheckOutEmptyCart

	| interface cartID  |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	
	self should: [interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.] 
	raise: Error
	withExceptionDo: [:anError | | clientPurchases |
		clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
		"self assert: clientPurchases isEmpty." 
		self assert: anError messageText = RestInterface cannotCheckOutEmptyCart.
		].! !

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 06:53:44'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:53:49' prior: 50912427!
test08CannotCheckOutEmptyCart

	| interface cartID  |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	
	self should: [interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.] 
	raise: Error
	withExceptionDo: [:anError | | clientPurchases |
		clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
		self assert: clientPurchases isEmpty. 
		self assert: anError messageText = RestInterface cannotCheckOutEmptyCart.
		].! !

!testRun: #RestInterfaceTest #test01newCartsCreatedAreEmpty stamp: 'CR 12/3/2020 06:54:29'!
PASSED!

!testRun: #RestInterfaceTest #test02UserIsAuthenticatedWhenCreatesANewCart stamp: 'CR 12/3/2020 06:54:29'!
PASSED!

!testRun: #RestInterfaceTest #test03CannotAddABookToAnUnknownCart stamp: 'CR 12/3/2020 06:54:29'!
PASSED!

!testRun: #RestInterfaceTest #test04AddingABookToACreatedCartWorksCorrectly stamp: 'CR 12/3/2020 06:54:29'!
PASSED!

!testRun: #RestInterfaceTest #test05CannotListItemsOfAnInvalidCart stamp: 'CR 12/3/2020 06:54:29'!
PASSED!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:54:29'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 06:54:29'!
PASSED!

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 06:54:29'!
FAILURE!

!testRun: #RestInterfaceTest #test09UserIsAuthenticatedWhenListingPurchases stamp: 'CR 12/3/2020 06:54:29'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:54:29'!
PASSED!

!testRun: #RestInterfaceTest #test11PurchasesForClientWhoDidNotBuyIsEmpty stamp: 'CR 12/3/2020 06:54:29'!
PASSED!

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 06:54:29'!
FAILURE!

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 06:54:40'!
FAILURE!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:55:08' prior: 50912456!
test08CannotCheckOutEmptyCart

	| interface cartID  |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	
	self should: [interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.] 
	raise: Error
	withExceptionDo: [:anError | | clientPurchases |
		clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
		self assert: clientPurchases = 'No purchases'. 
		self assert: anError messageText = RestInterface cannotCheckOutEmptyCart.
		].! !

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 06:55:12'!
PASSED!

!testRun: #RestInterfaceTest #test09UserIsAuthenticatedWhenListingPurchases stamp: 'CR 12/3/2020 06:55:14'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 06:55:23'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 06:55:40'!
test11PurchasesForClientWhoDidNotCheckOutIsEmpty

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: 'No purchases' = clientPurchases.
				! !

!methodRemoval: RestInterfaceTest #test11PurchasesForClientWhoDidNotBuyIsEmpty stamp: 'CR 12/3/2020 06:55:43'!
test11PurchasesForClientWhoDidNotBuyIsEmpty

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: 'No purchases' = clientPurchases.
				!

!methodRemoval: Supermarket class #withCatalog: stamp: 'CR 12/3/2020 06:57:49'!
withCatalog: aCatalog 
	^ self new initializeWithCatalog: aCatalog through: MPValidTransaction new.!

!classDefinition: #StoreTestObjectsFactory category: 'TusLibros' stamp: 'CR 12/3/2020 07:02:23'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today timeNow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'CR 12/3/2020 07:02:21'!
now
	
	^ timeNow! !

!testRun: #RestInterfaceTest #test01newCartsCreatedAreEmpty stamp: 'CR 12/3/2020 08:32:45'!
PASSED!

!testRun: #RestInterfaceTest #test02UserIsAuthenticatedWhenCreatesANewCart stamp: 'CR 12/3/2020 08:32:45'!
PASSED!

!testRun: #RestInterfaceTest #test03CannotAddABookToAnUnknownCart stamp: 'CR 12/3/2020 08:32:45'!
PASSED!

!testRun: #RestInterfaceTest #test04AddingABookToACreatedCartWorksCorrectly stamp: 'CR 12/3/2020 08:32:45'!
PASSED!

!testRun: #RestInterfaceTest #test05CannotListItemsOfAnInvalidCart stamp: 'CR 12/3/2020 08:32:45'!
PASSED!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/3/2020 08:32:45'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 08:32:45'!
PASSED!

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 08:32:45'!
PASSED!

!testRun: #RestInterfaceTest #test09UserIsAuthenticatedWhenListingPurchases stamp: 'CR 12/3/2020 08:32:45'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 08:32:45'!
PASSED!

!testRun: #RestInterfaceTest #test11PurchasesForClientWhoDidNotCheckOutIsEmpty stamp: 'CR 12/3/2020 08:32:45'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 08:35:26'!
test12PurchasesForClientWhoDidNotCheckOutIsEmpty

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: 'No purchases' = clientPurchases.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 08:41:42'!
test11TransactionIDForCheckOutIsUnique

	| interface itemToAdd clientPurchases purchase cartIDOwnedByBelen cartIDOwnedByCeleste transactionIDCeleste |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	purchase := '(''validBook''->1 ) Total spent = 10'.
	cartIDOwnedByCeleste := interface createCartForClient: 'Celeste'  withPassword: 'celeste123'.
	cartIDOwnedByBelen := interface createCartForClient: 'Belen'  withPassword: 'belen123'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartIDOwnedByCeleste book: itemToAdd. 
	interface addToCart: cartIDOwnedByCeleste book: itemToAdd. 
	
	transactionIDCeleste := interface checkout: cartIDOwnedByCeleste withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'Celeste'.
	
	self assert: purchase = clientPurchases.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 08:42:26' prior: 50912681!
test11TransactionIDForCheckOutIsUnique

	| interface itemToAdd clientPurchases purchase cartIDOwnedByBelen cartIDOwnedByCeleste transactionIDCeleste transactionIDBelen |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	purchase := '(''validBook''->1 ) Total spent = 10'.
	cartIDOwnedByCeleste := interface createCartForClient: 'Celeste'  withPassword: 'celeste123'.
	cartIDOwnedByBelen := interface createCartForClient: 'Belen'  withPassword: 'belen123'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartIDOwnedByCeleste book: itemToAdd. 
	interface addToCart: cartIDOwnedByCeleste book: itemToAdd. 
	
	transactionIDCeleste := interface checkout: cartIDOwnedByCeleste withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'Celeste'.
	transactionIDBelen := interface checkout: cartIDOwnedByBelen withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'Belen'.
	
	self assert: purchase = clientPurchases.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 08:43:45' prior: 50912712!
test11TransactionIDForCheckOutIsUnique

	| interface itemToAdd cartIDOwnedByBelen cartIDOwnedByCeleste transactionIDCeleste transactionIDBelen |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	cartIDOwnedByCeleste := interface createCartForClient: 'Celeste'  withPassword: 'celeste123'.
	cartIDOwnedByBelen := interface createCartForClient: 'Belen'  withPassword: 'belen123'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartIDOwnedByCeleste book: itemToAdd. 
	interface addToCart: cartIDOwnedByCeleste book: itemToAdd. 
	
	transactionIDCeleste := interface checkout: cartIDOwnedByCeleste withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'Celeste'.
	transactionIDBelen := interface checkout: cartIDOwnedByBelen withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'Belen'.
	
	self deny: transactionIDCeleste = transactionIDBelen. 
	
	
	
	
				! !

!methodRemoval: RestInterfaceTest #test11PurchasesForClientWhoDidNotCheckOutIsEmpty stamp: 'CR 12/3/2020 08:44:32'!
test11PurchasesForClientWhoDidNotCheckOutIsEmpty

	| interface cartID itemToAdd clientPurchases |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: 'No purchases' = clientPurchases.
				!
!MerchantProcessor methodsFor: 'credit card transaction' stamp: 'CR 12/3/2020 08:46:08'!
debit: amount from: creditCard
	self subclassResponsibility.! !
!MPValidTransaction methodsFor: 'credit card transaction' stamp: 'CR 12/3/2020 08:47:37' prior: 50910245 overrides: 50912804!
debit: amount from: creditCard
	transactionID := transactionID + 1.
	^ transactionID. ! !

!testRun: #RestInterfaceTest #test12PurchasesForClientWhoDidNotCheckOutIsEmpty stamp: 'CR 12/3/2020 08:47:42'!
PASSED!

!testRun: #RestInterfaceTest #test01newCartsCreatedAreEmpty stamp: 'CR 12/3/2020 08:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test02UserIsAuthenticatedWhenCreatesANewCart stamp: 'CR 12/3/2020 08:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test03CannotAddABookToAnUnknownCart stamp: 'CR 12/3/2020 08:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test04AddingABookToACreatedCartWorksCorrectly stamp: 'CR 12/3/2020 08:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test05CannotListItemsOfAnInvalidCart stamp: 'CR 12/3/2020 08:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/3/2020 08:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 08:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 08:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test09UserIsAuthenticatedWhenListingPurchases stamp: 'CR 12/3/2020 08:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 08:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test11TransactionIDForCheckOutIsUnique stamp: 'CR 12/3/2020 08:47:45'!
ERROR!

!testRun: #RestInterfaceTest #test12PurchasesForClientWhoDidNotCheckOutIsEmpty stamp: 'CR 12/3/2020 08:47:45'!
PASSED!

!testRun: #RestInterfaceTest #test11TransactionIDForCheckOutIsUnique stamp: 'CR 12/3/2020 08:47:45'!
ERROR!

!testRun: #RestInterfaceTest #test12PurchasesForClientWhoDidNotCheckOutIsEmpty stamp: 'CR 12/3/2020 08:47:53'!
PASSED!

!testRun: #RestInterfaceTest #test11TransactionIDForCheckOutIsUnique stamp: 'CR 12/3/2020 08:47:55'!
ERROR!

!testRun: #RestInterfaceTest #test11TransactionIDForCheckOutIsUnique stamp: 'CR 12/3/2020 08:47:55'!
ERROR!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 08:48:09' prior: 50912748!
test11TransactionIDForCheckOutIsUnique

	| interface itemToAdd cartIDOwnedByBelen cartIDOwnedByCeleste transactionIDCeleste transactionIDBelen |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	cartIDOwnedByCeleste := interface createCartForClient: 'Celeste'  withPassword: 'celeste123'.
	cartIDOwnedByBelen := interface createCartForClient: 'Belen'  withPassword: 'belen123'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartIDOwnedByCeleste book: itemToAdd. 
	interface addToCart: cartIDOwnedByBelen book: itemToAdd. 
	
	transactionIDCeleste := interface checkout: cartIDOwnedByCeleste withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'Celeste'.
	transactionIDBelen := interface checkout: cartIDOwnedByBelen withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'Belen'.
	
	self deny: transactionIDCeleste = transactionIDBelen. 
	
	
	
	
				! !

!testRun: #RestInterfaceTest #test11TransactionIDForCheckOutIsUnique stamp: 'CR 12/3/2020 08:48:10'!
PASSED!

!testRun: #RestInterfaceTest #test01newCartsCreatedAreEmpty stamp: 'CR 12/3/2020 08:48:13'!
PASSED!

!testRun: #RestInterfaceTest #test02UserIsAuthenticatedWhenCreatesANewCart stamp: 'CR 12/3/2020 08:48:13'!
PASSED!

!testRun: #RestInterfaceTest #test03CannotAddABookToAnUnknownCart stamp: 'CR 12/3/2020 08:48:13'!
PASSED!

!testRun: #RestInterfaceTest #test04AddingABookToACreatedCartWorksCorrectly stamp: 'CR 12/3/2020 08:48:13'!
PASSED!

!testRun: #RestInterfaceTest #test05CannotListItemsOfAnInvalidCart stamp: 'CR 12/3/2020 08:48:13'!
PASSED!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/3/2020 08:48:13'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 08:48:13'!
PASSED!

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 08:48:13'!
PASSED!

!testRun: #RestInterfaceTest #test09UserIsAuthenticatedWhenListingPurchases stamp: 'CR 12/3/2020 08:48:13'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 08:48:13'!
PASSED!

!testRun: #RestInterfaceTest #test11TransactionIDForCheckOutIsUnique stamp: 'CR 12/3/2020 08:48:13'!
PASSED!

!testRun: #RestInterfaceTest #test12PurchasesForClientWhoDidNotCheckOutIsEmpty stamp: 'CR 12/3/2020 08:48:13'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 08:48:39'!
test11TransactionIDOfCheckOutIsUnique

	| interface itemToAdd cartIDOwnedByBelen cartIDOwnedByCeleste transactionIDCeleste transactionIDBelen |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	cartIDOwnedByCeleste := interface createCartForClient: 'Celeste'  withPassword: 'celeste123'.
	cartIDOwnedByBelen := interface createCartForClient: 'Belen'  withPassword: 'belen123'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartIDOwnedByCeleste book: itemToAdd. 
	interface addToCart: cartIDOwnedByBelen book: itemToAdd. 
	
	transactionIDCeleste := interface checkout: cartIDOwnedByCeleste withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'Celeste'.
	transactionIDBelen := interface checkout: cartIDOwnedByBelen withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'Belen'.
	
	self deny: transactionIDCeleste = transactionIDBelen. 
	
	
	
	
				! !

!methodRemoval: RestInterfaceTest #test11TransactionIDForCheckOutIsUnique stamp: 'CR 12/3/2020 08:48:41'!
test11TransactionIDForCheckOutIsUnique

	| interface itemToAdd cartIDOwnedByBelen cartIDOwnedByCeleste transactionIDCeleste transactionIDBelen |
	interface := RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	cartIDOwnedByCeleste := interface createCartForClient: 'Celeste'  withPassword: 'celeste123'.
	cartIDOwnedByBelen := interface createCartForClient: 'Belen'  withPassword: 'belen123'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartIDOwnedByCeleste book: itemToAdd. 
	interface addToCart: cartIDOwnedByBelen book: itemToAdd. 
	
	transactionIDCeleste := interface checkout: cartIDOwnedByCeleste withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'Celeste'.
	transactionIDBelen := interface checkout: cartIDOwnedByBelen withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'Belen'.
	
	self deny: transactionIDCeleste = transactionIDBelen. 
	
	
	
	
				!

Time dateAndTimeNow !

Time now!

Time now + 1!

Time now!

 8:50:09.825835 am !

8:50:09.825835!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'CR 12/3/2020 09:00:44'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'CR 12/3/2020 09:00:45'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration owner number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'CR 12/3/2020 09:00:41'!
initializeExpiringOn: aMonth owner: ownerName number: cardNumber
	
	expiration := aMonth.
	owner := ownerName.
	number := cardNumber.! !

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'CR 12/3/2020 09:01:18'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !
!CreditCard class methodsFor: 'instance creation' stamp: 'CR 12/3/2020 09:01:39' prior: 50908992!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth.! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 09:02:34' prior: 50910601!
test06ListItemsOfValidCartWorksCorrectly

	| interface cartID itemToAdd |
	interface := testObjectFactory defaultRestInterface.
	RestInterface for: testObjectFactory defaultSupermarket withAuthenticator: testObjectFactory defaultAuthenticator.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	self assert: (interface listCart: cartID) = (Bag with: itemToAdd).
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 09:02:40' prior: 50913055!
test06ListItemsOfValidCartWorksCorrectly

	| interface cartID itemToAdd |
	interface := testObjectFactory defaultRestInterface.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	self assert: (interface listCart: cartID) = (Bag with: itemToAdd).
				! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'CR 12/3/2020 09:03:04'!
defaultRestInterface
	^ RestInterface for: self defaultSupermarket withAuthenticator: self defaultAuthenticator.! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 09:04:27' prior: 50910503!
test01newCartsCreatedAreEmpty

	| interface cartID |
	interface := testObjectFactory defaultRestInterface.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	
	self assert: (interface listCart: cartID) isEmpty.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 09:04:57' prior: 50910550!
test03CannotAddABookToAnUnknownCart

	| interface |
	interface := testObjectFactory defaultRestInterface.
	
	self should: [ interface addToCart: (testObjectFactory createCart ) book: (testObjectFactory itemSellByTheStore)]
	raise: Error 
	withMessageText: RestInterface unknownCartErrorMessage.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 09:05:14' prior: 50910565!
test04AddingABookToACreatedCartWorksCorrectly

	| interface cartID itemToAdd itemsListOfCart |
	interface := testObjectFactory defaultRestInterface.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	itemsListOfCart := interface listCart: cartID.
	
	self assert: itemsListOfCart size = 1.
	self assert: (itemsListOfCart occurrencesOf: itemToAdd) = 1.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 09:05:20' prior: 50910587!
test05CannotListItemsOfAnInvalidCart

	| interface |
	interface := testObjectFactory defaultRestInterface.
	
	self should: [ interface listCart: (testObjectFactory createCart)]
	raise: Error 
	withMessageText: RestInterface unknownCartErrorMessage.
	
	
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 09:05:30' prior: 50911217!
test07CannotCheckOutUnknownCart

	| interface |
	interface := testObjectFactory defaultRestInterface.
	
	self should: [ interface checkout: (testObjectFactory createCart) withCreditCard: (testObjectFactory notExpiredCreditCard ) for: (testObjectFactory defaultCardOwner) ]
	raise: Error 
	withMessageText: RestInterface unknownCartErrorMessage.
	
	
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 09:05:36' prior: 50912526!
test08CannotCheckOutEmptyCart

	| interface cartID  |
	interface := testObjectFactory defaultRestInterface.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	
	self should: [interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.] 
	raise: Error
	withExceptionDo: [:anError | | clientPurchases |
		clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
		self assert: clientPurchases = 'No purchases'. 
		self assert: anError messageText = RestInterface cannotCheckOutEmptyCart.
		].! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 09:05:50' prior: 50912086!
test10CheckOutValidCartWorksCorrectly

	| interface cartID itemToAdd clientPurchases purchase |
	interface := testObjectFactory defaultRestInterface.
	
	purchase := '(''validBook''->1 ) Total spent = 10'.
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	interface checkout: cartID withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'aClientID'.
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: purchase = clientPurchases.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 09:07:02' prior: 50912659!
test12PurchasesForClientWhoDidNotCheckOutIsEmpty

	| interface cartID itemToAdd clientPurchases |
	interface := testObjectFactory defaultRestInterface.
	
	cartID := interface createCartForClient: 'aClientID'  withPassword: 'passwordOfClientWhoIsCreatingACart'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartID book: itemToAdd. 
	
	clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
	self assert: 'No purchases' = clientPurchases.
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 09:07:10' prior: 50912953!
test11TransactionIDOfCheckOutIsUnique

	| interface itemToAdd cartIDOwnedByBelen cartIDOwnedByCeleste transactionIDCeleste transactionIDBelen |
	interface := testObjectFactory defaultRestInterface.
	
	cartIDOwnedByCeleste := interface createCartForClient: 'Celeste'  withPassword: 'celeste123'.
	cartIDOwnedByBelen := interface createCartForClient: 'Belen'  withPassword: 'belen123'.
	itemToAdd := testObjectFactory itemSellByTheStore.
	interface addToCart: cartIDOwnedByCeleste book: itemToAdd. 
	interface addToCart: cartIDOwnedByBelen book: itemToAdd. 
	
	transactionIDCeleste := interface checkout: cartIDOwnedByCeleste withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'Celeste'.
	transactionIDBelen := interface checkout: cartIDOwnedByBelen withCreditCard: (testObjectFactory notExpiredCreditCard ) for: 'Belen'.
	
	self deny: transactionIDCeleste = transactionIDBelen. 
	
	
	
	
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 09:08:50' prior: 50913153!
test07CannotCheckOutUnknownCart

	| interface |
	interface := testObjectFactory defaultRestInterface.
	
	self should: [ interface checkout: (testObjectFactory createCart) withCreditCard: (testObjectFactory notExpiredCreditCard ) for: (testObjectFactory defaultCardOwner) ]
	raise: Error 
	withExceptionDo: [:anError |
		 self assert: anError messageText = RestInterface unknownCartErrorMessage.
		].
	
	
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 09:09:13' prior: 50913266!
test07CannotCheckOutUnknownCart

	| interface |
	interface := testObjectFactory defaultRestInterface.
	
	self should: [ interface checkout: (testObjectFactory createCart) withCreditCard: (testObjectFactory notExpiredCreditCard ) for: (testObjectFactory defaultCardOwner) ]
	raise: Error 
	withExceptionDo: [:anError | | clientPurchases |
		clientPurchases := interface listPurchases: 'aClientID' withPassword: 'passwordOfClientWhoIsCreatingACart'.
		self assert: clientPurchases = 'No purchases'. 
		 self assert: anError messageText = RestInterface unknownCartErrorMessage.
		].
	
	
				! !
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 09:10:24' prior: 50913282!
test07CannotCheckOutUnknownCart

	| interface |
	interface := testObjectFactory defaultRestInterface.
	
	self should: [ interface checkout: (testObjectFactory createCart) withCreditCard: (testObjectFactory notExpiredCreditCard ) for: (testObjectFactory defaultCardOwner) ]
	raise: Error 
	withExceptionDo: [:anError | | clientPurchases |
		clientPurchases := interface listPurchases: (testObjectFactory defaultCardOwner) withPassword: 'defaultPassword'.
		self assert: clientPurchases = 'No purchases'. 
		 self assert: anError messageText = RestInterface unknownCartErrorMessage.
		].
	
	
				! !

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:10:26'!
ERROR!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:10:26'!
ERROR!

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 09:11:53'!
FAILURE!

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 09:11:53'!
FAILURE!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:11:56'!
ERROR!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:11:56'!
ERROR!

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 09:12:44'!
FAILURE!

anError messageText!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'CR 12/3/2020 09:14:07' prior: 50909152!
notExpiredCreditCard
	
	^CreditCard expiringOn:  (Month month: today monthIndex year: today yearNumber + 1)! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'CR 12/3/2020 09:15:05' prior: 50913349!
notExpiredCreditCard
	
	^CreditCard expiringOn:  (Month month: today monthIndex year: today yearNumber + 1) owner: self defaultCardOwner number: self defaultCardNumber.
	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'CR 12/3/2020 09:15:47'!
expiringOn: aMonth owner: cardOwner number: cardNumber.
	
	^self new initializeExpiringOn: aMonth owner: cardOwner number: cardNumber.! !

!methodRemoval: CreditCard class #expiringOn: stamp: 'CR 12/3/2020 09:15:51'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth.!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'CR 12/3/2020 09:15:59' prior: 50909145!
expiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber - 1) owner: self defaultCardOwner number: self defaultCardNumber.! !

!testRun: #RestInterfaceTest #test01newCartsCreatedAreEmpty stamp: 'CR 12/3/2020 09:16:07'!
PASSED!

!testRun: #RestInterfaceTest #test02UserIsAuthenticatedWhenCreatesANewCart stamp: 'CR 12/3/2020 09:16:07'!
PASSED!

!testRun: #RestInterfaceTest #test03CannotAddABookToAnUnknownCart stamp: 'CR 12/3/2020 09:16:07'!
PASSED!

!testRun: #RestInterfaceTest #test04AddingABookToACreatedCartWorksCorrectly stamp: 'CR 12/3/2020 09:16:07'!
PASSED!

!testRun: #RestInterfaceTest #test05CannotListItemsOfAnInvalidCart stamp: 'CR 12/3/2020 09:16:07'!
PASSED!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/3/2020 09:16:07'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:16:07'!
ERROR!

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 09:16:07'!
PASSED!

!testRun: #RestInterfaceTest #test09UserIsAuthenticatedWhenListingPurchases stamp: 'CR 12/3/2020 09:16:07'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 09:16:07'!
PASSED!

!testRun: #RestInterfaceTest #test11TransactionIDOfCheckOutIsUnique stamp: 'CR 12/3/2020 09:16:07'!
PASSED!

!testRun: #RestInterfaceTest #test12PurchasesForClientWhoDidNotCheckOutIsEmpty stamp: 'CR 12/3/2020 09:16:07'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:16:07'!
ERROR!

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 09:16:15'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:16:18'!
ERROR!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:16:18'!
ERROR!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:18:50'!
ERROR!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:18:50'!
ERROR!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:19:20'!
ERROR!
!RestInterface class methodsFor: 'error messages' stamp: 'CR 12/3/2020 09:21:08' prior: 50909067!
unknownCartErrorMessage
	^ 'cant add items to an unknown cart!!'.! !

!testRun: #RestInterfaceTest #test01newCartsCreatedAreEmpty stamp: 'CR 12/3/2020 09:21:14'!
PASSED!

!testRun: #RestInterfaceTest #test02UserIsAuthenticatedWhenCreatesANewCart stamp: 'CR 12/3/2020 09:21:14'!
PASSED!

!testRun: #RestInterfaceTest #test03CannotAddABookToAnUnknownCart stamp: 'CR 12/3/2020 09:21:14'!
PASSED!

!testRun: #RestInterfaceTest #test04AddingABookToACreatedCartWorksCorrectly stamp: 'CR 12/3/2020 09:21:14'!
PASSED!

!testRun: #RestInterfaceTest #test05CannotListItemsOfAnInvalidCart stamp: 'CR 12/3/2020 09:21:14'!
PASSED!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/3/2020 09:21:14'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:21:14'!
ERROR!

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 09:21:14'!
PASSED!

!testRun: #RestInterfaceTest #test09UserIsAuthenticatedWhenListingPurchases stamp: 'CR 12/3/2020 09:21:14'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 09:21:14'!
PASSED!

!testRun: #RestInterfaceTest #test11TransactionIDOfCheckOutIsUnique stamp: 'CR 12/3/2020 09:21:14'!
PASSED!

!testRun: #RestInterfaceTest #test12PurchasesForClientWhoDidNotCheckOutIsEmpty stamp: 'CR 12/3/2020 09:21:14'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:21:14'!
ERROR!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:22:37'!
ERROR!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 09:24:23' prior: 50913304!
test07CannotCheckOutUnknownCart

	| interface |
	interface := testObjectFactory defaultRestInterface.
	
	self should: [ interface checkout: (testObjectFactory createCart) withCreditCard: (testObjectFactory notExpiredCreditCard ) for: (testObjectFactory defaultCardOwner) ]
	raise: Error 
	withMessageText: RestInterface unknownCartErrorMessage.
	
	"self should: [ interface checkout: (testObjectFactory createCart) withCreditCard: (testObjectFactory notExpiredCreditCard ) for: (testObjectFactory defaultCardOwner) ]
	raise: Error 
	withExceptionDo: [:anError | | clientPurchases |
		clientPurchases := interface listPurchases: (testObjectFactory defaultCardOwner) withPassword: 'defaultPassword'.
		self assert: clientPurchases = 'No purchases'. 
		 self assert: anError messageText = RestInterface unknownCartErrorMessage.
		]."
	
	
				! !

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:24:25'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 09:25:28' prior: 50913501!
test07CannotCheckOutUnknownCart

	| interface |
	interface := testObjectFactory defaultRestInterface.
	
	self should: [ interface checkout: (testObjectFactory createCart) withCreditCard: (testObjectFactory notExpiredCreditCard ) for: (testObjectFactory defaultCardOwner) ]
	raise: Error 
	withMessageText: RestInterface unknownCartErrorMessage.
	
	self should: [ interface checkout: (testObjectFactory createCart) withCreditCard: (testObjectFactory notExpiredCreditCard ) for: (testObjectFactory defaultCardOwner) ]
	raise: Error 
	withExceptionDo: [:anError | | clientPurchases |
		"clientPurchases := interface listPurchases: (testObjectFactory defaultCardOwner) withPassword: 'defaultPassword'."
		"self assert: clientPurchases = 'No purchases'. "
		 self assert: anError messageText = RestInterface unknownCartErrorMessage.
		].
	
	
				! !

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:25:32'!
PASSED!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 09:25:51' prior: 50913534!
test07CannotCheckOutUnknownCart

	| interface |
	interface := testObjectFactory defaultRestInterface.
	
	self should: [ interface checkout: (testObjectFactory createCart) withCreditCard: (testObjectFactory notExpiredCreditCard ) for: (testObjectFactory defaultCardOwner) ]
	raise: Error 
	withMessageText: RestInterface unknownCartErrorMessage.
	
	self should: [ interface checkout: (testObjectFactory createCart) withCreditCard: (testObjectFactory notExpiredCreditCard ) for: (testObjectFactory defaultCardOwner) ]
	raise: Error 
	withExceptionDo: [:anError | | clientPurchases |
		clientPurchases := interface listPurchases: (testObjectFactory defaultCardOwner) withPassword: 'defaultPassword'.
		"self assert: clientPurchases = 'No purchases'. "
		 self assert: anError messageText = RestInterface unknownCartErrorMessage.
		].
	
	
				! !

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:25:55'!
ERROR!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:25:55'!
ERROR!
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 09:33:31' prior: 50910825!
checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID 
	cartsByClient at: clientID ifPresent: [((cartsByClient at: clientID) includes: aCartToCheckOut) ifFalse: [self error: self class unknownCartErrorMessage ]] ifAbsent: [self error: self class invalidClientErrorDescription].
	^ supermarket checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID ifInvalidCart: [self error: self class unknownCartErrorMessage].! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 09:34:52'!
verifyCart: aCartToCheckOut isOwnedBy: clientID

	^ ((cartsByClient at: clientID) includes: aCartToCheckOut) ifFalse: [self error: self class unknownCartErrorMessage ]! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 09:34:52' prior: 50913603!
checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID 
	cartsByClient at: clientID ifPresent: [self verifyCart: aCartToCheckOut isOwnedBy: clientID] ifAbsent: [self error: self class invalidClientErrorDescription].
	^ supermarket checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID ifInvalidCart: [self error: self class unknownCartErrorMessage].! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 09:35:18'!
signalInvalidClient

	^ self error: self class invalidClientErrorDescription! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 09:35:18' prior: 50913627!
checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID 
	cartsByClient at: clientID ifPresent: [self verifyCart: aCartToCheckOut isOwnedBy: clientID] ifAbsent: [self signalInvalidClient].
	^ supermarket checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID ifInvalidCart: [self error: self class unknownCartErrorMessage].! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 09:36:36'!
verifyClientExists: clientID andCartBelongsToHim: aCartToCheckOut

	^ cartsByClient at: clientID ifPresent: [self verifyCart: aCartToCheckOut isOwnedBy: clientID] ifAbsent: [self signalInvalidClient]! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 09:36:36' prior: 50913648!
checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID 
	self verifyClientExists: clientID andCartBelongsToHim: aCartToCheckOut.
	^ supermarket checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID ifInvalidCart: [self error: self class unknownCartErrorMessage].! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 09:37:04'!
signalUnknownCart

	^ self error: self class unknownCartErrorMessage! !
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 09:37:04' prior: 50913619!
verifyCart: aCartToCheckOut isOwnedBy: clientID

	^ ((cartsByClient at: clientID) includes: aCartToCheckOut) ifFalse: [self signalUnknownCart ]! !
!RestInterface methodsFor: 'verification' stamp: 'CR 12/3/2020 09:38:10'!
verifyCart: aCartToCheckOut isAssignedTo: clientID

	^ ((cartsByClient at: clientID) includes: aCartToCheckOut) ifFalse: [self signalUnknownCart ]! !

!methodRemoval: RestInterface #verifyCart:isOwnedBy: stamp: 'CR 12/3/2020 09:38:13'!
verifyCart: aCartToCheckOut isOwnedBy: clientID

	^ ((cartsByClient at: clientID) includes: aCartToCheckOut) ifFalse: [self signalUnknownCart ]!
!RestInterface methodsFor: 'verification' stamp: 'CR 12/3/2020 09:38:58'!
verifyClientExists: clientID andCartIsAssignedToHim: aCartToCheckOut

	^ cartsByClient at: clientID ifPresent: [self verifyCart: aCartToCheckOut isOwnedBy: clientID] ifAbsent: [self signalInvalidClient]! !

!methodRemoval: RestInterface #verifyClientExists:andCartBelongsToHim: stamp: 'CR 12/3/2020 09:39:29'!
verifyClientExists: clientID andCartBelongsToHim: aCartToCheckOut

	^ cartsByClient at: clientID ifPresent: [self verifyCart: aCartToCheckOut isOwnedBy: clientID] ifAbsent: [self signalInvalidClient]!
!RestInterface methodsFor: 'api' stamp: 'CR 12/3/2020 09:39:46' prior: 50913671!
checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID 
	self verifyClientExists: clientID andCartIsAssignedToHim: aCartToCheckOut.
	^ supermarket checkout: aCartToCheckOut withCreditCard: cardToPayWith for: clientID ifInvalidCart: [self error: self class unknownCartErrorMessage].! !
!RestInterface methodsFor: 'verification' stamp: 'CR 12/3/2020 09:40:39' prior: 50913710!
verifyClientExists: clientID andCartIsAssignedToHim: aCartToCheckOut

	^ cartsByClient at: clientID ifPresent: [self verifyCart:  aCartToCheckOut isAssignedTo: clientID] ifAbsent: [self signalInvalidClient].! !

!testRun: #RestInterfaceTest #test01newCartsCreatedAreEmpty stamp: 'CR 12/3/2020 09:41:00'!
PASSED!

!testRun: #RestInterfaceTest #test02UserIsAuthenticatedWhenCreatesANewCart stamp: 'CR 12/3/2020 09:41:00'!
PASSED!

!testRun: #RestInterfaceTest #test03CannotAddABookToAnUnknownCart stamp: 'CR 12/3/2020 09:41:00'!
PASSED!

!testRun: #RestInterfaceTest #test04AddingABookToACreatedCartWorksCorrectly stamp: 'CR 12/3/2020 09:41:00'!
PASSED!

!testRun: #RestInterfaceTest #test05CannotListItemsOfAnInvalidCart stamp: 'CR 12/3/2020 09:41:00'!
PASSED!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/3/2020 09:41:00'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:41:00'!
FAILURE!

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 09:41:00'!
FAILURE!

!testRun: #RestInterfaceTest #test09UserIsAuthenticatedWhenListingPurchases stamp: 'CR 12/3/2020 09:41:00'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 09:41:00'!
ERROR!

!testRun: #RestInterfaceTest #test11TransactionIDOfCheckOutIsUnique stamp: 'CR 12/3/2020 09:41:00'!
ERROR!

!testRun: #RestInterfaceTest #test12PurchasesForClientWhoDidNotCheckOutIsEmpty stamp: 'CR 12/3/2020 09:41:00'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 09:41:10'!
ERROR!

!testRun: #RestInterfaceTest #test10CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 09:41:10'!
ERROR!

!testRun: #RestInterfaceTest #test10CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 09:41:26'!
ERROR!
!RestInterface methodsFor: 'verification' stamp: 'CR 12/3/2020 09:43:24' prior: 50913742!
verifyClientExists: clientID andCartIsAssignedToHim: aCartToCheckOut

	cartsByClient at: clientID ifAbsent: [self signalInvalidClient].
	self verifyCart:  aCartToCheckOut isAssignedTo: clientID.! !

!testRun: #RestInterfaceTest #test01newCartsCreatedAreEmpty stamp: 'CR 12/3/2020 09:43:28'!
PASSED!

!testRun: #RestInterfaceTest #test02UserIsAuthenticatedWhenCreatesANewCart stamp: 'CR 12/3/2020 09:43:28'!
PASSED!

!testRun: #RestInterfaceTest #test03CannotAddABookToAnUnknownCart stamp: 'CR 12/3/2020 09:43:28'!
PASSED!

!testRun: #RestInterfaceTest #test04AddingABookToACreatedCartWorksCorrectly stamp: 'CR 12/3/2020 09:43:28'!
PASSED!

!testRun: #RestInterfaceTest #test05CannotListItemsOfAnInvalidCart stamp: 'CR 12/3/2020 09:43:28'!
PASSED!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/3/2020 09:43:28'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:43:28'!
FAILURE!

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 09:43:28'!
PASSED!

!testRun: #RestInterfaceTest #test09UserIsAuthenticatedWhenListingPurchases stamp: 'CR 12/3/2020 09:43:28'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 09:43:28'!
PASSED!

!testRun: #RestInterfaceTest #test11TransactionIDOfCheckOutIsUnique stamp: 'CR 12/3/2020 09:43:28'!
PASSED!

!testRun: #RestInterfaceTest #test12PurchasesForClientWhoDidNotCheckOutIsEmpty stamp: 'CR 12/3/2020 09:43:28'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:43:28'!
FAILURE!

!testRun: #RestInterfaceTest #test10CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 09:43:39'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:43:42'!
FAILURE!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:43:42'!
FAILURE!
!RestInterfaceTest methodsFor: 'tests' stamp: 'CR 12/3/2020 09:45:36' prior: 50913567!
test07CannotCheckOutUnknownCart

	| interface |
	interface := testObjectFactory defaultRestInterface.
	interface createCartForClient:  testObjectFactory defaultCardOwner withPassword: 'defaultPassword'. 
	
	self should: [ interface checkout: (testObjectFactory createCart) withCreditCard: (testObjectFactory notExpiredCreditCard ) for: (testObjectFactory defaultCardOwner) ]
	raise: Error 
	withMessageText: RestInterface unknownCartErrorMessage.
	
	self should: [ interface checkout: (testObjectFactory createCart) withCreditCard: (testObjectFactory notExpiredCreditCard ) for: (testObjectFactory defaultCardOwner) ]
	raise: Error 
	withExceptionDo: [:anError | | clientPurchases |
		clientPurchases := interface listPurchases: (testObjectFactory defaultCardOwner) withPassword: 'defaultPassword'.
		self assert: clientPurchases = 'No purchases'. 
		self assert: anError messageText = RestInterface unknownCartErrorMessage.
		].
	
	
				! !

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:45:37'!
PASSED!

!testRun: #RestInterfaceTest #test01newCartsCreatedAreEmpty stamp: 'CR 12/3/2020 09:45:40'!
PASSED!

!testRun: #RestInterfaceTest #test02UserIsAuthenticatedWhenCreatesANewCart stamp: 'CR 12/3/2020 09:45:40'!
PASSED!

!testRun: #RestInterfaceTest #test03CannotAddABookToAnUnknownCart stamp: 'CR 12/3/2020 09:45:40'!
PASSED!

!testRun: #RestInterfaceTest #test04AddingABookToACreatedCartWorksCorrectly stamp: 'CR 12/3/2020 09:45:40'!
PASSED!

!testRun: #RestInterfaceTest #test05CannotListItemsOfAnInvalidCart stamp: 'CR 12/3/2020 09:45:40'!
PASSED!

!testRun: #RestInterfaceTest #test06ListItemsOfValidCartWorksCorrectly stamp: 'CR 12/3/2020 09:45:40'!
PASSED!

!testRun: #RestInterfaceTest #test07CannotCheckOutUnknownCart stamp: 'CR 12/3/2020 09:45:40'!
PASSED!

!testRun: #RestInterfaceTest #test08CannotCheckOutEmptyCart stamp: 'CR 12/3/2020 09:45:40'!
PASSED!

!testRun: #RestInterfaceTest #test09UserIsAuthenticatedWhenListingPurchases stamp: 'CR 12/3/2020 09:45:40'!
PASSED!

!testRun: #RestInterfaceTest #test10CheckOutValidCartWorksCorrectly stamp: 'CR 12/3/2020 09:45:40'!
PASSED!

!testRun: #RestInterfaceTest #test11TransactionIDOfCheckOutIsUnique stamp: 'CR 12/3/2020 09:45:40'!
PASSED!

!testRun: #RestInterfaceTest #test12PurchasesForClientWhoDidNotCheckOutIsEmpty stamp: 'CR 12/3/2020 09:45:40'!
PASSED!